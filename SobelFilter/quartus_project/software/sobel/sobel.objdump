
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000240

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001146c memsz 0x0001146c flags r-x
    LOAD off    0x0001248c vaddr 0x0001148c paddr 0x00012f78 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00014a64 vaddr 0x00014a64 paddr 0x00014a64 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010b04  00000240  00000240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000748  00010d44  00010d44  00011d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0001148c  00012f78  0001248c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00014a64  00014a64  00014a64  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00014bf4  00014bf4  00013f78  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013f78  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001030  00000000  00000000  00013fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024f8d  00000000  00000000  00014fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000098bb  00000000  00000000  00039f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bc2d  00000000  00000000  00043818  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026d0  00000000  00000000  0004f448  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003b15  00000000  00000000  00051b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016f30  00000000  00000000  0005562d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006c560  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001808  00000000  00000000  0006c5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007177c  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0007177f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00071782  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00071783  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00071784  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00071788  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007178c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00071790  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00071799  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000717a2  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000717ab  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  000717b6  2**0
                  CONTENTS, READONLY
 29 .jdi          00004020  00000000  00000000  000717ea  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007303b  00000000  00000000  0007580a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000240 l    d  .text	00000000 .text
00010d44 l    d  .rodata	00000000 .rodata
0001148c l    d  .rwdata	00000000 .rwdata
00014a64 l    d  .bss	00000000 .bss
00014bf4 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sobel_bsp//obj/HAL/src/crt0.o
00000288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001f38 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000111da l     O .rodata	00000010 zeroes.4255
000049b8 l     F .text	000000bc __sbprintf
000111ea l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004bc8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006784 l     F .text	00000008 __fp_lock
0000678c l     F .text	00000008 __fp_unlock
000067a0 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011894 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00011cd8 l     O .rwdata	00000020 lc_ctype_charset
00011cb8 l     O .rwdata	00000020 lc_message_charset
00011cf8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001121c l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009414 l     F .text	000000fc __sprint_r.part.0
00011350 l     O .rodata	00000010 blanks.4199
00011340 l     O .rodata	00000010 zeroes.4200
0000a81c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e320 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e440 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e46c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e56c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e660 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e744 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e920 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012f68 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000ebac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000ecf4 l     F .text	00000038 alt_dev_reg
00011ed8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f010 l     F .text	00000204 altera_avalon_jtag_uart_irq
0000f214 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f834 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000fc0c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000100b8 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000101f0 l     F .text	00000050 alt_get_errno
00010240 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014ac8 g     O .bss	00000004 alt_instruction_exception_handler
00008ae0 g     F .text	00000074 _mprec_log10
00008bcc g     F .text	0000008c __any_on
0000ad88 g     F .text	00000054 _isatty_r
00011228 g     O .rodata	00000028 __mprec_tinytens
0000e868 g     F .text	00000078 alt_main
0000289c g     F .text	000000a8 _puts_r
00014af4 g     O .bss	00000100 alt_irq
0000addc g     F .text	0000005c _lseek_r
00011189 g     O .rodata	00000009 gy_array
00012f78 g       *ABS*	00000000 __flash_rwdata_start
0000ce88 g     F .text	00000084 .hidden __eqdf2
00014bf4 g       *ABS*	00000000 __alt_heap_start
00002860 g     F .text	0000003c printf
0000afe8 g     F .text	0000009c _wcrtomb_r
0000930c g     F .text	0000005c __sseek
00006ad4 g     F .text	00000010 __sinit
0000ae94 g     F .text	00000138 __swbuf_r
00007580 g     F .text	0000007c _setlocale_r
0000693c g     F .text	00000068 __sfmoreglue
0000e900 g     F .text	00000020 __malloc_unlock
00000e84 g     F .text	00000040 LCD_Write_Command
00014a74 g     O .bss	00000004 sobel_width
00014ab8 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007a38 g     F .text	0000015c memmove
00000ec4 g     F .text	00000040 LCD_Write_Data
00006abc g     F .text	00000018 _cleanup
00007cb8 g     F .text	000000a8 _Balloc
0000cf0c g     F .text	000000e0 .hidden __gtdf2
00010600 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000760 g     F .text	0000004c cam_get_xsize
0000ad30 g     F .text	00000058 _fstat_r
00014a98 g     O .bss	00000004 errno
00009288 g     F .text	00000008 __seofread
00014aac g     O .bss	00000004 alt_argv
0001af38 g       *ABS*	00000000 _gp
0000eb7c g     F .text	00000030 usleep
0000089c g     F .text	000000a8 cam_set_image_pointer
00011d58 g     O .rwdata	00000180 alt_fd_list
00001ed4 g     F .text	00000030 vga_set_pointer
00010620 g     F .text	00000090 alt_find_dev
00007900 g     F .text	00000138 memcpy
00006794 g     F .text	0000000c _cleanup_r
0000e148 g     F .text	000000d0 .hidden __floatsidf
00010178 g     F .text	00000078 alt_io_redirect
0000cfec g     F .text	000000e0 .hidden __ltdf2
00010d44 g       *ABS*	00000000 __DTOR_END__
00002944 g     F .text	00000014 puts
00010904 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000091c0 g     F .text	00000074 __fpclassifyd
00008a3c g     F .text	000000a4 __ratio
0000a7f8 g     F .text	00000024 __vfiprintf_internal
0000f410 g     F .text	0000020c altera_avalon_jtag_uart_read
00002064 g     F .text	00000014 malloc
00002834 g     F .text	0000002c _printf_r
00000c5c g     F .text	00000020 get_grayscale_picture
00002054 g     F .text	00000008 .hidden __udivsi3
0000028c g     F .text	000004d4 init_camera
00010f9c g     O .rodata	00000128 lens_roll_off_tbl
0000e5bc g     F .text	000000a4 isatty
00011278 g     O .rodata	000000c8 __mprec_tens
000075fc g     F .text	0000000c __locale_charset
00010878 g     F .text	0000008c alt_icache_flush
00014a94 g     O .bss	00000004 __malloc_top_pad
00012f48 g     O .rwdata	00000004 __mb_cur_max
0000762c g     F .text	0000000c _localeconv_r
0000198c g     F .text	000000c4 sobel_x
000080c4 g     F .text	0000003c __i2b
00006f38 g     F .text	000004c0 __sfvwrite_r
00000f04 g     F .text	0000023c init_LCD
00002958 g     F .text	00000054 _sbrk_r
000007f8 g     F .text	000000a4 cam_get_profiling
0000ae38 g     F .text	0000005c _read_r
00014a78 g     O .bss	00000004 sobel_result
00012f60 g     O .rwdata	00000004 alt_max_fd
0000aa4c g     F .text	000000f0 _fclose_r
00006754 g     F .text	00000030 fflush
00014a90 g     O .bss	00000004 __malloc_max_sbrked_mem
00014a6c g     O .bss	00000004 grayscale_array
0000bd20 g     F .text	0000089c .hidden __adddf3
000007ac g     F .text	0000004c cam_get_ysize
000087e4 g     F .text	0000011c __b2d
0000b790 g     F .text	00000590 .hidden __umoddi3
0000e794 g     F .text	000000d4 lseek
00000d64 g     F .text	000000a0 i2c_short_read
00012f40 g     O .rwdata	00000004 _global_impure_ptr
00008c58 g     F .text	00000568 _realloc_r
00014bf4 g       *ABS*	00000000 __bss_end
0000ffc8 g     F .text	000000f0 alt_iic_isr_register
000104fc g     F .text	00000104 alt_tick
0000b1d0 g     F .text	000005c0 .hidden __udivdi3
0000ab50 g     F .text	00000184 _fputwc_r
00011250 g     O .rodata	00000028 __mprec_bigtens
00007ea8 g     F .text	00000104 __s2b
0000e218 g     F .text	000000a4 .hidden __floatunsidf
0000858c g     F .text	00000060 __mcmp
00006af4 g     F .text	00000018 __fp_lock_all
0000ff7c g     F .text	0000004c alt_ic_irq_enabled
00014a68 g     O .bss	00000004 grayscape_height
00010464 g     F .text	00000098 alt_alarm_stop
00014abc g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d0 alt_irq_handler
00011d30 g     O .rwdata	00000028 alt_dev_null
000011e0 g     F .text	000000c4 transfer_LCD_with_dma
0000fbc8 g     F .text	00000044 alt_dcache_flush_all
00007fac g     F .text	00000068 __hi0bits
0000e0c0 g     F .text	00000088 .hidden __fixdfsi
00012f78 g       *ABS*	00000000 __ram_rwdata_end
00012f58 g     O .rwdata	00000008 alt_dev_list
0000ebfc g     F .text	000000f8 write
0001148c g       *ABS*	00000000 __ram_rodata_end
0000e4bc g     F .text	000000b0 fstat
0000cfec g     F .text	000000e0 .hidden __ledf2
000082fc g     F .text	00000140 __pow5mult
00009528 g     F .text	000012d0 ___vfiprintf_internal_r
00014aa4 g     O .bss	00000004 __nlocale_changed
0000205c g     F .text	00000008 .hidden __umodsi3
00001e94 g     F .text	00000020 GetSobel_rgb
00014bf4 g       *ABS*	00000000 end
00001eb4 g     F .text	00000020 GetSobelResult
000009a4 g     F .text	0000004c take_picture_blocking
00000a74 g     F .text	00000030 DIPSW_get_value
00001c4c g     F .text	00000138 sobel_y_with_rgb
0000ef4c g     F .text	000000c4 altera_avalon_jtag_uart_init
000001cc g     F .exceptions	00000074 alt_instruction_exception_entry
0000097c g     F .text	00000028 current_image_pointer
00010d44 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000f8a8 g     F .text	00000088 alt_avalon_timer_sc_init
0000e2bc g     F .text	00000064 .hidden __clzsi2
0000f61c g     F .text	00000218 altera_avalon_jtag_uart_write
00006ae4 g     F .text	00000004 __sfp_lock_acquire
00007818 g     F .text	000000e8 memchr
00002a44 g     F .text	00001f50 ___vfprintf_internal_r
00006c48 g     F .text	000002f0 _free_r
00007608 g     F .text	00000010 __locale_mb_cur_max
00001b88 g     F .text	000000c4 sobel_y
00010e5c g     O .rodata	00000140 noise_reduction_reg_settings_array
00010b7c g     F .text	00000194 __call_exitprocs
00014aa0 g     O .bss	00000004 __mlocale_changed
00012f38 g     O .rwdata	00000004 __malloc_sbrk_base
00000240 g     F .text	0000004c _start
00014ac0 g     O .bss	00000004 _alt_tick_rate
0000843c g     F .text	00000150 __lshift
00014ac4 g     O .bss	00000004 _alt_nticks
0000e970 g     F .text	000000fc read
0000ed60 g     F .text	00000088 alt_sys_init
00001a50 g     F .text	00000138 sobel_x_with_rgb
00010a68 g     F .text	00000114 __register_exitproc
00008100 g     F .text	000001fc __multiply
0000f2bc g     F .text	00000068 altera_avalon_jtag_uart_close
0001148c g       *ABS*	00000000 __ram_rwdata_start
00010d44 g       *ABS*	00000000 __ram_rodata_start
00014acc g     O .bss	00000028 __malloc_current_mallinfo
00008900 g     F .text	0000013c __d2b
00014a7c g     O .bss	00000004 sobel_height
000009f0 g     F .text	0000002c enable_continues_mode
0000ede8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001720 g     F .text	0000016c init_sobel_arrays
000107c4 g     F .text	000000b4 alt_get_fd
0000fa70 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000a934 g     F .text	00000054 _close_r
000109ec g     F .text	0000007c memcmp
0000eea8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014bf4 g       *ABS*	00000000 __alt_stack_base
0000eef8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004a74 g     F .text	00000154 __swsetup_r
0000c5bc g     F .text	000008cc .hidden __divdf3
000069a4 g     F .text	00000118 __sfp
00008b54 g     F .text	00000078 __copybits
0001148c g     O .rwdata	00000408 __malloc_av_
00006af0 g     F .text	00000004 __sinit_lock_release
0000d0cc g     F .text	00000724 .hidden __muldf3
00009234 g     F .text	00000054 __sread
000106b0 g     F .text	00000114 alt_find_file
0000fc5c g     F .text	000000a4 alt_dev_llist_insert
0000e8e0 g     F .text	00000020 __malloc_lock
0000eacc g     F .text	000000b0 sbrk
000066f8 g     F .text	0000005c _fflush_r
0000a988 g     F .text	000000c4 _calloc_r
00014a64 g       *ABS*	00000000 __bss_start
00007b94 g     F .text	00000124 memset
000012a4 g     F .text	0000047c main
00014ab0 g     O .bss	00000004 alt_envp
00014a8c g     O .bss	00000004 __malloc_max_total_mem
00000c1c g     F .text	00000020 get_grayscale_width
0000ee48 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000afcc g     F .text	0000001c __swbuf
00014a80 g     O .bss	00000004 sobel_x_result
00009368 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000ab3c g     F .text	00000014 fclose
00004dc8 g     F .text	00001728 _dtoa_r
0000208c g     F .text	000007a8 _malloc_r
0000b144 g     F .text	00000030 __ascii_wctomb
00012f64 g     O .rwdata	00000004 alt_errno
000073f8 g     F .text	000000c4 _fwalk
00001fa4 g     F .text	00000054 .hidden __divsi3
00006b24 g     F .text	00000124 _malloc_trim_r
00010d44 g       *ABS*	00000000 __CTOR_END__
00014a64 g     O .bss	00000004 grayscale_width
00009370 g     F .text	000000a4 strcmp
00001140 g     F .text	000000a0 transfer_LCD_no_dma
00010d44 g       *ABS*	00000000 __flash_rodata_start
00010d44 g       *ABS*	00000000 __DTOR_LIST__
0000ce88 g     F .text	00000084 .hidden __nedf2
00010d44 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000ed2c g     F .text	00000034 alt_irq_init
0000ea6c g     F .text	00000060 alt_release_fd
00000cb4 g     F .text	000000b0 i2c_auto_detect
00011360 g     O .rodata	00000100 .hidden __clz_tab
00000944 g     F .text	00000038 current_image_valid
00014a9c g     O .bss	00000004 _PathLocale
00000c7c g     F .text	00000038 i2c_busy_wait
000109a0 g     F .text	00000014 atexit
0000a8d8 g     F .text	0000005c _write_r
00007638 g     F .text	0000001c setlocale
00012f44 g     O .rwdata	00000004 _impure_ptr
00014aa8 g     O .bss	00000004 alt_argc
000064f0 g     F .text	00000208 __sflush_r
00014ab4 g     O .bss	00000004 altera_avalon_timer_ts_base
0000fd5c g     F .text	0000005c _do_dtors
00007624 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00008784 g     F .text	00000060 __ulp
00006b0c g     F .text	00000018 __fp_unlock_all
00012f50 g     O .rwdata	00000008 alt_fs_list
00014a84 g     O .bss	00000004 sobel_y_result
00000e04 g     F .text	00000080 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014a70 g     O .bss	00000002 LCD_height
00007654 g     F .text	0000000c localeconv
00001f04 g     F .text	00000034 vga_set_swap
0000fde8 g     F .text	00000050 alt_ic_isr_register
00001d84 g     F .text	00000110 sobel_threshold
00012f78 g       *ABS*	00000000 _edata
00014bf4 g       *ABS*	00000000 _end
00000240 g       *ABS*	00000000 __ram_exceptions_end
0000f324 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00011180 g     O .rodata	00000009 gx_array
0000fed8 g     F .text	000000a4 alt_ic_irq_disable
00009290 g     F .text	0000007c __swrite
00012f3c g     O .rwdata	00000004 __malloc_trim_threshold
00014a72 g     O .bss	00000002 LCD_width
00000aa4 g     F .text	00000178 conv_grayscale
00007618 g     F .text	0000000c __locale_msgcharset
000109b4 g     F .text	00000038 exit
000074bc g     F .text	000000c4 _fwalk_reent
000085ec g     F .text	00000198 __mdiff
00001ff8 g     F .text	0000005c .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006ae8 g     F .text	00000004 __sfp_lock_release
00000c3c g     F .text	00000020 get_grayscale_height
00010d10 g     F .text	00000034 _exit
0000188c g     F .text	00000100 sobel_mac
0000f930 g     F .text	00000140 alt_alarm_start
00007660 g     F .text	000001b8 __smakebuf_r
00014a88 g     O .bss	00000004 sobel_rgb565
000029ac g     F .text	00000098 strlen
0001030c g     F .text	00000158 open
0000cf0c g     F .text	000000e0 .hidden __gedf2
00012f4c g     O .rwdata	00000004 __wctomb
00009510 g     F .text	00000018 __sprint_r
0000fdb8 g     F .text	00000030 alt_icache_flush_all
00012f6c g     O .rwdata	00000004 alt_priority_mask
0000fe38 g     F .text	000000a0 alt_ic_irq_enable
00004994 g     F .text	00000024 __vfprintf_internal
0000b174 g     F .text	0000005c _wctomb_r
0000d7f0 g     F .text	000008d0 .hidden __subdf3
00008014 g     F .text	000000b0 __lo0bits
00012f70 g     O .rwdata	00000008 alt_alarm_list
0000fd00 g     F .text	0000005c _do_ctors
0000b084 g     F .text	000000c0 wcrtomb
0000e370 g     F .text	000000d0 close
0000e6c4 g     F .text	00000080 alt_load
0000acd4 g     F .text	0000005c fputwc
00002078 g     F .text	00000014 free
00006aec g     F .text	00000004 __sinit_lock_acquire
00007d88 g     F .text	00000120 __multadd
00007d60 g     F .text	00000028 _Bfree
00000a1c g     F .text	00000058 new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409014 	ori	at,at,576
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001cc0 	call	1cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	1092bd04 	addi	r2,r2,19188
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	1092bd04 	addi	r2,r2,19188
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	e037883a 	mov	sp,fp
 1bc:	dfc00117 	ldw	ra,4(sp)
 1c0:	df000017 	ldw	fp,0(sp)
 1c4:	dec00204 	addi	sp,sp,8
 1c8:	f800283a 	ret

000001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1cc:	defffb04 	addi	sp,sp,-20
 1d0:	dfc00415 	stw	ra,16(sp)
 1d4:	df000315 	stw	fp,12(sp)
 1d8:	df000304 	addi	fp,sp,12
 1dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e0:	000531fa 	rdctl	r2,exception
 1e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1e8:	e0bffd17 	ldw	r2,-12(fp)
 1ec:	10801f0c 	andi	r2,r2,124
 1f0:	1004d0ba 	srli	r2,r2,2
 1f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1f8:	0005333a 	rdctl	r2,badaddr
 1fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 200:	d0a6e417 	ldw	r2,-25712(gp)
 204:	10000726 	beq	r2,zero,224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 208:	d0a6e417 	ldw	r2,-25712(gp)
 20c:	e0fffd17 	ldw	r3,-12(fp)
 210:	1809883a 	mov	r4,r3
 214:	e17fff17 	ldw	r5,-4(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	103ee83a 	callr	r2
 220:	00000206 	br	22c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 228:	0005883a 	mov	r2,zero
}
 22c:	e037883a 	mov	sp,fp
 230:	dfc00117 	ldw	ra,4(sp)
 234:	df000017 	ldw	fp,0(sp)
 238:	dec00204 	addi	sp,sp,8
 23c:	f800283a 	ret

Disassembly of section .text:

00000240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     240:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
     244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     24c:	00bffd16 	blt	zero,r2,244 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     250:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     258:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     25c:	d6abce14 	ori	gp,gp,44856
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     260:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     264:	10929914 	ori	r2,r2,19044

    movhi r3, %hi(__bss_end)
     268:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     26c:	18d2fd14 	ori	r3,r3,19444

    beq r2, r3, 1f
     270:	10c00326 	beq	r2,r3,280 <_start+0x40>

0:
    stw zero, (r2)
     274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     27c:	10fffd36 	bltu	r2,r3,274 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     280:	000e6c40 	call	e6c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     284:	000e8680 	call	e868 <alt_main>

00000288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     288:	003fff06 	br	288 <alt_after_alt_main>

0000028c <init_camera>:
 */

#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     28c:	defffd04 	addi	sp,sp,-12
     290:	dfc00215 	stw	ra,8(sp)
     294:	df000115 	stw	fp,4(sp)
     298:	df000104 	addi	fp,sp,4
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     29c:	00c00084 	movi	r3,2
     2a0:	00804034 	movhi	r2,256
     2a4:	10842744 	addi	r2,r2,4253
     2a8:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2ac:	00c00044 	movi	r3,1
     2b0:	00804034 	movhi	r2,256
     2b4:	10840304 	addi	r2,r2,4108
     2b8:	10c00025 	stbio	r3,0(r2)
	for (i=0; i < 1000000 ; i++)
     2bc:	e03fff15 	stw	zero,-4(fp)
     2c0:	00000406 	br	2d4 <init_camera+0x48>
		asm volatile ("nop");
     2c4:	0001883a 	nop

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2c8:	e0bfff17 	ldw	r2,-4(fp)
     2cc:	10800044 	addi	r2,r2,1
     2d0:	e0bfff15 	stw	r2,-4(fp)
     2d4:	e0ffff17 	ldw	r3,-4(fp)
     2d8:	008003f4 	movhi	r2,15
     2dc:	10908fc4 	addi	r2,r2,16959
     2e0:	10fff80e 	bge	r2,r3,2c4 <init_camera+0x38>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2e4:	0007883a 	mov	r3,zero
     2e8:	00804034 	movhi	r2,256
     2ec:	10840304 	addi	r2,r2,4108
     2f0:	10c00025 	stbio	r3,0(r2)
	for (i=0; i < 1000000 ; i++)
     2f4:	e03fff15 	stw	zero,-4(fp)
     2f8:	00000406 	br	30c <init_camera+0x80>
		asm volatile ("nop");
     2fc:	0001883a 	nop
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     300:	e0bfff17 	ldw	r2,-4(fp)
     304:	10800044 	addi	r2,r2,1
     308:	e0bfff15 	stw	r2,-4(fp)
     30c:	e0ffff17 	ldw	r3,-4(fp)
     310:	008003f4 	movhi	r2,15
     314:	10908fc4 	addi	r2,r2,16959
     318:	10fff80e 	bge	r2,r3,2fc <init_camera+0x70>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     31c:	01001e04 	movi	r4,120
     320:	014ce184 	movi	r5,13190
     324:	01800044 	movi	r6,1
     328:	0000e040 	call	e04 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     32c:	01001e04 	movi	r4,120
     330:	014ce184 	movi	r5,13190
     334:	000d883a 	mov	r6,zero
     338:	0000e040 	call	e04 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     33c:	e03fff15 	stw	zero,-4(fp)
     340:	00000406 	br	354 <init_camera+0xc8>
		asm volatile ("nop");
     344:	0001883a 	nop
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     348:	e0bfff17 	ldw	r2,-4(fp)
     34c:	10800044 	addi	r2,r2,1
     350:	e0bfff15 	stw	r2,-4(fp)
     354:	e0ffff17 	ldw	r3,-4(fp)
     358:	008003f4 	movhi	r2,15
     35c:	10908fc4 	addi	r2,r2,16959
     360:	10fff80e 	bge	r2,r3,344 <init_camera+0xb8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     364:	01001e04 	movi	r4,120
     368:	014c0684 	movi	r5,12314
     36c:	01803104 	movi	r6,196
     370:	0000e040 	call	e04 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     374:	01001e04 	movi	r4,120
     378:	014c8084 	movi	r5,12802
     37c:	01800204 	movi	r6,8
     380:	0000e040 	call	e04 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     384:	01001e04 	movi	r4,120
     388:	014cfd04 	movi	r5,13300
     38c:	0180c744 	movi	r6,797
     390:	0000e040 	call	e04 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     394:	e03fff15 	stw	zero,-4(fp)
     398:	00000406 	br	3ac <init_camera+0x120>
		asm volatile ("nop");
     39c:	0001883a 	nop
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     3a0:	e0bfff17 	ldw	r2,-4(fp)
     3a4:	10800044 	addi	r2,r2,1
     3a8:	e0bfff15 	stw	r2,-4(fp)
     3ac:	e0ffff17 	ldw	r3,-4(fp)
     3b0:	008000b4 	movhi	r2,2
     3b4:	10a1a7c4 	addi	r2,r2,-31073
     3b8:	10fff80e 	bge	r2,r3,39c <init_camera+0x110>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3bc:	01001e04 	movi	r4,120
     3c0:	014d0784 	movi	r5,13342
     3c4:	01a3c254 	movui	r6,36617
     3c8:	0000e040 	call	e04 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     3cc:	01001e04 	movi	r4,120
     3d0:	014d0704 	movi	r5,13340
     3d4:	01805404 	movi	r6,336
     3d8:	0000e040 	call	e04 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3dc:	01001e04 	movi	r4,120
     3e0:	014d0784 	movi	r5,13342
     3e4:	01a3c254 	movui	r6,36617
     3e8:	0000e040 	call	e04 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     3ec:	e03fff15 	stw	zero,-4(fp)
     3f0:	00000406 	br	404 <init_camera+0x178>
		asm volatile ("nop");
     3f4:	0001883a 	nop
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3f8:	e0bfff17 	ldw	r2,-4(fp)
     3fc:	10800044 	addi	r2,r2,1
     400:	e0bfff15 	stw	r2,-4(fp)
     404:	e0ffff17 	ldw	r3,-4(fp)
     408:	008000b4 	movhi	r2,2
     40c:	10a1a7c4 	addi	r2,r2,-31073
     410:	10fff80e 	bge	r2,r3,3f4 <init_camera+0x168>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     414:	01001e04 	movi	r4,120
     418:	014d0784 	movi	r5,13342
     41c:	01a3c214 	movui	r6,36616
     420:	0000e040 	call	e04 <i2c_short_write>
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     424:	e03fff15 	stw	zero,-4(fp)
     428:	00001706 	br	488 <init_camera+0x1fc>
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
     42c:	00800074 	movhi	r2,1
     430:	10835104 	addi	r2,r2,3396
     434:	e0ffff17 	ldw	r3,-4(fp)
     438:	18c7883a 	add	r3,r3,r3
     43c:	18c7883a 	add	r3,r3,r3
     440:	10c5883a 	add	r2,r2,r3
     444:	1080000b 	ldhu	r2,0(r2)
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     448:	117fffcc 	andi	r5,r2,65535
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
     44c:	00800074 	movhi	r2,1
     450:	10835104 	addi	r2,r2,3396
     454:	e0ffff17 	ldw	r3,-4(fp)
     458:	18c7883a 	add	r3,r3,r3
     45c:	18c7883a 	add	r3,r3,r3
     460:	18c00084 	addi	r3,r3,2
     464:	10c5883a 	add	r2,r2,r3
     468:	1080000b 	ldhu	r2,0(r2)
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     46c:	10bfffcc 	andi	r2,r2,65535
     470:	01001e04 	movi	r4,120
     474:	100d883a 	mov	r6,r2
     478:	0000e040 	call	e04 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     47c:	e0bfff17 	ldw	r2,-4(fp)
     480:	10800044 	addi	r2,r2,1
     484:	e0bfff15 	stw	r2,-4(fp)
     488:	e0bfff17 	ldw	r2,-4(fp)
     48c:	108011b0 	cmpltui	r2,r2,70
     490:	103fe61e 	bne	r2,zero,42c <init_camera+0x1a0>
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     494:	e03fff15 	stw	zero,-4(fp)
     498:	00001706 	br	4f8 <init_camera+0x26c>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
     49c:	00800074 	movhi	r2,1
     4a0:	10839704 	addi	r2,r2,3676
     4a4:	e0ffff17 	ldw	r3,-4(fp)
     4a8:	18c7883a 	add	r3,r3,r3
     4ac:	18c7883a 	add	r3,r3,r3
     4b0:	10c5883a 	add	r2,r2,r3
     4b4:	1080000b 	ldhu	r2,0(r2)
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4b8:	117fffcc 	andi	r5,r2,65535
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
     4bc:	00800074 	movhi	r2,1
     4c0:	10839704 	addi	r2,r2,3676
     4c4:	e0ffff17 	ldw	r3,-4(fp)
     4c8:	18c7883a 	add	r3,r3,r3
     4cc:	18c7883a 	add	r3,r3,r3
     4d0:	18c00084 	addi	r3,r3,2
     4d4:	10c5883a 	add	r2,r2,r3
     4d8:	1080000b 	ldhu	r2,0(r2)
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4dc:	10bfffcc 	andi	r2,r2,65535
     4e0:	01001e04 	movi	r4,120
     4e4:	100d883a 	mov	r6,r2
     4e8:	0000e040 	call	e04 <i2c_short_write>
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     4ec:	e0bfff17 	ldw	r2,-4(fp)
     4f0:	10800044 	addi	r2,r2,1
     4f4:	e0bfff15 	stw	r2,-4(fp)
     4f8:	e0bfff17 	ldw	r2,-4(fp)
     4fc:	10801430 	cmpltui	r2,r2,80
     500:	103fe61e 	bne	r2,zero,49c <init_camera+0x210>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     504:	01001e04 	movi	r4,120
     508:	014d6904 	movi	r5,13732
     50c:	018164c4 	movi	r6,1427
     510:	0000e040 	call	e04 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     514:	01001e04 	movi	r4,120
     518:	014ce304 	movi	r5,13196
     51c:	0189e644 	movi	r6,10137
     520:	0000e040 	call	e04 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     524:	01001e04 	movi	r4,120
     528:	014ce404 	movi	r5,13200
     52c:	01991004 	movi	r6,25664
     530:	0000e040 	call	e04 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     534:	e03fff15 	stw	zero,-4(fp)
     538:	00000406 	br	54c <init_camera+0x2c0>
		asm volatile ("nop");
     53c:	0001883a 	nop
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     540:	e0bfff17 	ldw	r2,-4(fp)
     544:	10800044 	addi	r2,r2,1
     548:	e0bfff15 	stw	r2,-4(fp)
     54c:	e0ffff17 	ldw	r3,-4(fp)
     550:	008000b4 	movhi	r2,2
     554:	10a1a7c4 	addi	r2,r2,-31073
     558:	10fff80e 	bge	r2,r3,53c <init_camera+0x2b0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     55c:	01001e04 	movi	r4,120
     560:	014ce304 	movi	r5,13196
     564:	0189e6c4 	movi	r6,10139
     568:	0000e040 	call	e04 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     56c:	01001e04 	movi	r4,120
     570:	014ce404 	movi	r5,13200
     574:	01991004 	movi	r6,25664
     578:	0000e040 	call	e04 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     57c:	e03fff15 	stw	zero,-4(fp)
     580:	00000406 	br	594 <init_camera+0x308>
		asm volatile ("nop");
     584:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     588:	e0bfff17 	ldw	r2,-4(fp)
     58c:	10800044 	addi	r2,r2,1
     590:	e0bfff15 	stw	r2,-4(fp)
     594:	e0ffff17 	ldw	r3,-4(fp)
     598:	008000b4 	movhi	r2,2
     59c:	10a1a7c4 	addi	r2,r2,-31073
     5a0:	10fff80e 	bge	r2,r3,584 <init_camera+0x2f8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     5a4:	01001e04 	movi	r4,120
     5a8:	014ce304 	movi	r5,13196
     5ac:	01a840d4 	movui	r6,41219
     5b0:	0000e040 	call	e04 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     5b4:	01001e04 	movi	r4,120
     5b8:	014ce404 	movi	r5,13200
     5bc:	01800144 	movi	r6,5
     5c0:	0000e040 	call	e04 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     5c4:	e03fff15 	stw	zero,-4(fp)
     5c8:	00000406 	br	5dc <init_camera+0x350>
		asm volatile ("nop");
     5cc:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     5d0:	e0bfff17 	ldw	r2,-4(fp)
     5d4:	10800044 	addi	r2,r2,1
     5d8:	e0bfff15 	stw	r2,-4(fp)
     5dc:	e0ffff17 	ldw	r3,-4(fp)
     5e0:	008000b4 	movhi	r2,2
     5e4:	10a1a7c4 	addi	r2,r2,-31073
     5e8:	10fff80e 	bge	r2,r3,5cc <init_camera+0x340>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     5ec:	01001e04 	movi	r4,120
     5f0:	014ce304 	movi	r5,13196
     5f4:	01a840d4 	movui	r6,41219
     5f8:	0000e040 	call	e04 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     5fc:	01001e04 	movi	r4,120
     600:	014ce404 	movi	r5,13200
     604:	01800184 	movi	r6,6
     608:	0000e040 	call	e04 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     60c:	e03fff15 	stw	zero,-4(fp)
     610:	00000406 	br	624 <init_camera+0x398>
		asm volatile ("nop");
     614:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     618:	e0bfff17 	ldw	r2,-4(fp)
     61c:	10800044 	addi	r2,r2,1
     620:	e0bfff15 	stw	r2,-4(fp)
     624:	e0ffff17 	ldw	r3,-4(fp)
     628:	008000b4 	movhi	r2,2
     62c:	10a1a7c4 	addi	r2,r2,-31073
     630:	10fff80e 	bge	r2,r3,614 <init_camera+0x388>
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     634:	e03fff15 	stw	zero,-4(fp)
     638:	00001706 	br	698 <init_camera+0x40c>
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
     63c:	00800074 	movhi	r2,1
     640:	1083e704 	addi	r2,r2,3996
     644:	e0ffff17 	ldw	r3,-4(fp)
     648:	18c7883a 	add	r3,r3,r3
     64c:	18c7883a 	add	r3,r3,r3
     650:	10c5883a 	add	r2,r2,r3
     654:	1080000b 	ldhu	r2,0(r2)
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     658:	117fffcc 	andi	r5,r2,65535
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
     65c:	00800074 	movhi	r2,1
     660:	1083e704 	addi	r2,r2,3996
     664:	e0ffff17 	ldw	r3,-4(fp)
     668:	18c7883a 	add	r3,r3,r3
     66c:	18c7883a 	add	r3,r3,r3
     670:	18c00084 	addi	r3,r3,2
     674:	10c5883a 	add	r2,r2,r3
     678:	1080000b 	ldhu	r2,0(r2)
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     67c:	10bfffcc 	andi	r2,r2,65535
     680:	01001e04 	movi	r4,120
     684:	100d883a 	mov	r6,r2
     688:	0000e040 	call	e04 <i2c_short_write>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     68c:	e0bfff17 	ldw	r2,-4(fp)
     690:	10800044 	addi	r2,r2,1
     694:	e0bfff15 	stw	r2,-4(fp)
     698:	e0bfff17 	ldw	r2,-4(fp)
     69c:	108012b0 	cmpltui	r2,r2,74
     6a0:	103fe61e 	bne	r2,zero,63c <init_camera+0x3b0>
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     6a4:	e03fff15 	stw	zero,-4(fp)
     6a8:	00000406 	br	6bc <init_camera+0x430>
		asm volatile ("nop");
     6ac:	0001883a 	nop
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	10800044 	addi	r2,r2,1
     6b8:	e0bfff15 	stw	r2,-4(fp)
     6bc:	e0ffff17 	ldw	r3,-4(fp)
     6c0:	008003f4 	movhi	r2,15
     6c4:	10908fc4 	addi	r2,r2,16959
     6c8:	10fff80e 	bge	r2,r3,6ac <init_camera+0x420>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     6cc:	01001e04 	movi	r4,120
     6d0:	014ccb84 	movi	r5,13102
     6d4:	01800804 	movi	r6,32
     6d8:	0000e040 	call	e04 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     6dc:	e03fff15 	stw	zero,-4(fp)
     6e0:	00000406 	br	6f4 <init_camera+0x468>
		asm volatile ("nop");
     6e4:	0001883a 	nop
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     6e8:	e0bfff17 	ldw	r2,-4(fp)
     6ec:	10800044 	addi	r2,r2,1
     6f0:	e0bfff15 	stw	r2,-4(fp)
     6f4:	e0ffff17 	ldw	r3,-4(fp)
     6f8:	008003f4 	movhi	r2,15
     6fc:	10908fc4 	addi	r2,r2,16959
     700:	10fff80e 	bge	r2,r3,6e4 <init_camera+0x458>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     704:	01001e04 	movi	r4,120
     708:	014d0104 	movi	r5,13316
     70c:	01800884 	movi	r6,34
     710:	0000e040 	call	e04 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     714:	e03fff15 	stw	zero,-4(fp)
     718:	00000406 	br	72c <init_camera+0x4a0>
		asm volatile ("nop");
     71c:	0001883a 	nop
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bfff15 	stw	r2,-4(fp)
     72c:	e0ffff17 	ldw	r3,-4(fp)
     730:	008003f4 	movhi	r2,15
     734:	10908fc4 	addi	r2,r2,16959
     738:	10fff80e 	bge	r2,r3,71c <init_camera+0x490>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     73c:	01001e04 	movi	r4,120
     740:	014c1004 	movi	r5,12352
     744:	018009c4 	movi	r6,39
     748:	0000e040 	call	e04 <i2c_short_write>
}
     74c:	e037883a 	mov	sp,fp
     750:	dfc00117 	ldw	ra,4(sp)
     754:	df000017 	ldw	fp,0(sp)
     758:	dec00204 	addi	sp,sp,8
     75c:	f800283a 	ret

00000760 <cam_get_xsize>:

unsigned short cam_get_xsize(){
     760:	defffe04 	addi	sp,sp,-8
     764:	df000115 	stw	fp,4(sp)
     768:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     76c:	00804034 	movhi	r2,256
     770:	10840304 	addi	r2,r2,4108
     774:	10800023 	ldbuio	r2,0(r2)
     778:	10803fcc 	andi	r2,r2,255
     77c:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     780:	e0bfff03 	ldbu	r2,-4(fp)
     784:	1080010c 	andi	r2,r2,4
     788:	103ff826 	beq	r2,zero,76c <cam_get_xsize+0xc>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     78c:	00804034 	movhi	r2,256
     790:	10840004 	addi	r2,r2,4096
     794:	1080002b 	ldhuio	r2,0(r2)
     798:	10bfffcc 	andi	r2,r2,65535
}
     79c:	e037883a 	mov	sp,fp
     7a0:	df000017 	ldw	fp,0(sp)
     7a4:	dec00104 	addi	sp,sp,4
     7a8:	f800283a 	ret

000007ac <cam_get_ysize>:

unsigned short cam_get_ysize() {
     7ac:	defffe04 	addi	sp,sp,-8
     7b0:	df000115 	stw	fp,4(sp)
     7b4:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     7b8:	00804034 	movhi	r2,256
     7bc:	10840304 	addi	r2,r2,4108
     7c0:	10800023 	ldbuio	r2,0(r2)
     7c4:	10803fcc 	andi	r2,r2,255
     7c8:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     7cc:	e0bfff03 	ldbu	r2,-4(fp)
     7d0:	1080010c 	andi	r2,r2,4
     7d4:	103ff826 	beq	r2,zero,7b8 <cam_get_ysize+0xc>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     7d8:	00804034 	movhi	r2,256
     7dc:	10840104 	addi	r2,r2,4100
     7e0:	1080002b 	ldhuio	r2,0(r2)
     7e4:	10bfffcc 	andi	r2,r2,65535
}
     7e8:	e037883a 	mov	sp,fp
     7ec:	df000017 	ldw	fp,0(sp)
     7f0:	dec00104 	addi	sp,sp,4
     7f4:	f800283a 	ret

000007f8 <cam_get_profiling>:

void cam_get_profiling() {
     7f8:	defffd04 	addi	sp,sp,-12
     7fc:	dfc00215 	stw	ra,8(sp)
     800:	df000115 	stw	fp,4(sp)
     804:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     808:	00804034 	movhi	r2,256
     80c:	10840304 	addi	r2,r2,4108
     810:	10800023 	ldbuio	r2,0(r2)
     814:	10803fcc 	andi	r2,r2,255
     818:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     81c:	e0bfff03 	ldbu	r2,-4(fp)
     820:	1080010c 	andi	r2,r2,4
     824:	103ff826 	beq	r2,zero,808 <cam_get_profiling+0x10>
	printf("Nr. of bytes each line    : %d\n",
     828:	00804034 	movhi	r2,256
     82c:	10840004 	addi	r2,r2,4096
     830:	1080002b 	ldhuio	r2,0(r2)
     834:	10bfffcc 	andi	r2,r2,65535
     838:	01000074 	movhi	r4,1
     83c:	21043104 	addi	r4,r4,4292
     840:	100b883a 	mov	r5,r2
     844:	00028600 	call	2860 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     848:	00804034 	movhi	r2,256
     84c:	10840104 	addi	r2,r2,4100
     850:	1080002b 	ldhuio	r2,0(r2)
     854:	10bfffcc 	andi	r2,r2,65535
     858:	01000074 	movhi	r4,1
     85c:	21043904 	addi	r4,r4,4324
     860:	100b883a 	mov	r5,r2
     864:	00028600 	call	2860 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     868:	00804034 	movhi	r2,256
     86c:	10840204 	addi	r2,r2,4104
     870:	1080002b 	ldhuio	r2,0(r2)
     874:	10bfffcc 	andi	r2,r2,65535
     878:	01000074 	movhi	r4,1
     87c:	21044104 	addi	r4,r4,4356
     880:	100b883a 	mov	r5,r2
     884:	00028600 	call	2860 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     888:	e037883a 	mov	sp,fp
     88c:	dfc00117 	ldw	ra,4(sp)
     890:	df000017 	ldw	fp,0(sp)
     894:	dec00204 	addi	sp,sp,8
     898:	f800283a 	ret

0000089c <cam_set_image_pointer>:

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
     89c:	defffd04 	addi	sp,sp,-12
     8a0:	df000215 	stw	fp,8(sp)
     8a4:	df000204 	addi	fp,sp,8
     8a8:	2005883a 	mov	r2,r4
     8ac:	e17fff15 	stw	r5,-4(fp)
     8b0:	e0bffe05 	stb	r2,-8(fp)
	switch (pointer_id) {
     8b4:	e0bffe07 	ldb	r2,-8(fp)
     8b8:	10c00060 	cmpeqi	r3,r2,1
     8bc:	18000e1e 	bne	r3,zero,8f8 <cam_set_image_pointer+0x5c>
     8c0:	10c00088 	cmpgei	r3,r2,2
     8c4:	1800021e 	bne	r3,zero,8d0 <cam_set_image_pointer+0x34>
     8c8:	10000626 	beq	r2,zero,8e4 <cam_set_image_pointer+0x48>
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
                break;
	   default: return;
     8cc:	00001906 	br	934 <cam_set_image_pointer+0x98>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     8d0:	10c000a0 	cmpeqi	r3,r2,2
     8d4:	18000d1e 	bne	r3,zero,90c <cam_set_image_pointer+0x70>
     8d8:	108000e0 	cmpeqi	r2,r2,3
     8dc:	1000101e 	bne	r2,zero,920 <cam_set_image_pointer+0x84>
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
                break;
	   default: return;
     8e0:	00001406 	br	934 <cam_set_image_pointer+0x98>
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     8e4:	e0ffff17 	ldw	r3,-4(fp)
     8e8:	00804034 	movhi	r2,256
     8ec:	10840404 	addi	r2,r2,4112
     8f0:	10c00035 	stwio	r3,0(r2)
	            break;
     8f4:	00000f06 	br	934 <cam_set_image_pointer+0x98>
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     8f8:	e0ffff17 	ldw	r3,-4(fp)
     8fc:	00804034 	movhi	r2,256
     900:	10840504 	addi	r2,r2,4116
     904:	10c00035 	stwio	r3,0(r2)
                break;
     908:	00000a06 	br	934 <cam_set_image_pointer+0x98>
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     90c:	e0ffff17 	ldw	r3,-4(fp)
     910:	00804034 	movhi	r2,256
     914:	10840604 	addi	r2,r2,4120
     918:	10c00035 	stwio	r3,0(r2)
                break;
     91c:	00000506 	br	934 <cam_set_image_pointer+0x98>
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     920:	e0ffff17 	ldw	r3,-4(fp)
     924:	00804034 	movhi	r2,256
     928:	10840704 	addi	r2,r2,4124
     92c:	10c00035 	stwio	r3,0(r2)
                break;
     930:	0001883a 	nop
	   default: return;
	}
}
     934:	e037883a 	mov	sp,fp
     938:	df000017 	ldw	fp,0(sp)
     93c:	dec00104 	addi	sp,sp,4
     940:	f800283a 	ret

00000944 <current_image_valid>:

short current_image_valid() {
     944:	defffe04 	addi	sp,sp,-8
     948:	df000115 	stw	fp,4(sp)
     94c:	df000104 	addi	fp,sp,4
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     950:	00804034 	movhi	r2,256
     954:	10840304 	addi	r2,r2,4108
     958:	1080002b 	ldhuio	r2,0(r2)
     95c:	10bfffcc 	andi	r2,r2,65535
     960:	e0bfff0d 	sth	r2,-4(fp)
	return (value&CAM_Current_Image_Valid);
     964:	e0bfff0b 	ldhu	r2,-4(fp)
     968:	1080800c 	andi	r2,r2,512
}
     96c:	e037883a 	mov	sp,fp
     970:	df000017 	ldw	fp,0(sp)
     974:	dec00104 	addi	sp,sp,4
     978:	f800283a 	ret

0000097c <current_image_pointer>:

void *current_image_pointer() {
     97c:	deffff04 	addi	sp,sp,-4
     980:	df000015 	stw	fp,0(sp)
     984:	d839883a 	mov	fp,sp
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     988:	00804034 	movhi	r2,256
     98c:	10840404 	addi	r2,r2,4112
     990:	10800037 	ldwio	r2,0(r2)
}
     994:	e037883a 	mov	sp,fp
     998:	df000017 	ldw	fp,0(sp)
     99c:	dec00104 	addi	sp,sp,4
     9a0:	f800283a 	ret

000009a4 <take_picture_blocking>:

void take_picture_blocking() {
     9a4:	defffe04 	addi	sp,sp,-8
     9a8:	df000115 	stw	fp,4(sp)
     9ac:	df000104 	addi	fp,sp,4
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     9b0:	00c00204 	movi	r3,8
     9b4:	00804034 	movhi	r2,256
     9b8:	10840304 	addi	r2,r2,4108
     9bc:	10c0002d 	sthio	r3,0(r2)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     9c0:	00804034 	movhi	r2,256
     9c4:	10840304 	addi	r2,r2,4108
     9c8:	1080002b 	ldhuio	r2,0(r2)
     9cc:	10bfffcc 	andi	r2,r2,65535
     9d0:	e0bfff0d 	sth	r2,-4(fp)
	} while ((value&CAM_Busy)!= 0);
     9d4:	e0bfff0b 	ldhu	r2,-4(fp)
     9d8:	1080020c 	andi	r2,r2,8
     9dc:	103ff81e 	bne	r2,zero,9c0 <take_picture_blocking+0x1c>
}
     9e0:	e037883a 	mov	sp,fp
     9e4:	df000017 	ldw	fp,0(sp)
     9e8:	dec00104 	addi	sp,sp,4
     9ec:	f800283a 	ret

000009f0 <enable_continues_mode>:

void enable_continues_mode() {
     9f0:	deffff04 	addi	sp,sp,-4
     9f4:	df000015 	stw	fp,0(sp)
     9f8:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     9fc:	00c00404 	movi	r3,16
     a00:	00804034 	movhi	r2,256
     a04:	10840304 	addi	r2,r2,4108
     a08:	10c0002d 	sthio	r3,0(r2)
}
     a0c:	e037883a 	mov	sp,fp
     a10:	df000017 	ldw	fp,0(sp)
     a14:	dec00104 	addi	sp,sp,4
     a18:	f800283a 	ret

00000a1c <new_image_available>:

char new_image_available() {
     a1c:	defffe04 	addi	sp,sp,-8
     a20:	df000115 	stw	fp,4(sp)
     a24:	df000104 	addi	fp,sp,4
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     a28:	00804034 	movhi	r2,256
     a2c:	10840304 	addi	r2,r2,4108
     a30:	1080002b 	ldhuio	r2,0(r2)
     a34:	10bfffcc 	andi	r2,r2,65535
     a38:	e0bfff0d 	sth	r2,-4(fp)
	if ((value&CAM_IRQ_Generated)!=0) {
     a3c:	e0bfff0b 	ldhu	r2,-4(fp)
     a40:	1080200c 	andi	r2,r2,128
     a44:	10000626 	beq	r2,zero,a60 <new_image_available+0x44>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     a48:	00c04004 	movi	r3,256
     a4c:	00804034 	movhi	r2,256
     a50:	10840304 	addi	r2,r2,4108
     a54:	10c0002d 	sthio	r3,0(r2)
		return 1;
     a58:	00800044 	movi	r2,1
     a5c:	00000106 	br	a64 <new_image_available+0x48>
	} else return 0;
     a60:	0005883a 	mov	r2,zero
}
     a64:	e037883a 	mov	sp,fp
     a68:	df000017 	ldw	fp,0(sp)
     a6c:	dec00104 	addi	sp,sp,4
     a70:	f800283a 	ret

00000a74 <DIPSW_get_value>:
 * @todo no open tasks
 */

#include "dipswitch.h"

unsigned char DIPSW_get_value() {
     a74:	deffff04 	addi	sp,sp,-4
     a78:	df000015 	stw	fp,0(sp)
     a7c:	d839883a 	mov	fp,sp
	return IORD_8DIRECT(DIPSW_BASE,0)^0xFF;
     a80:	00804034 	movhi	r2,256
     a84:	10842804 	addi	r2,r2,4256
     a88:	10800023 	ldbuio	r2,0(r2)
     a8c:	10803fcc 	andi	r2,r2,255
     a90:	0084303a 	nor	r2,zero,r2
}
     a94:	e037883a 	mov	sp,fp
     a98:	df000017 	ldw	fp,0(sp)
     a9c:	dec00104 	addi	sp,sp,4
     aa0:	f800283a 	ret

00000aa4 <conv_grayscale>:
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     aa4:	defff604 	addi	sp,sp,-40
     aa8:	dfc00915 	stw	ra,36(sp)
     aac:	df000815 	stw	fp,32(sp)
     ab0:	df000804 	addi	fp,sp,32
     ab4:	e13ffd15 	stw	r4,-12(fp)
     ab8:	e17ffe15 	stw	r5,-8(fp)
     abc:	e1bfff15 	stw	r6,-4(fp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
     ac0:	e0bffd17 	ldw	r2,-12(fp)
     ac4:	e0bffa15 	stw	r2,-24(fp)
	grayscale_width = width;
     ac8:	e0bffe17 	ldw	r2,-8(fp)
     acc:	d0a6cb15 	stw	r2,-25812(gp)
	grayscape_height = height;
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	d0a6cc15 	stw	r2,-25808(gp)
	if (grayscale_array != NULL)
     ad8:	d0a6cd17 	ldw	r2,-25804(gp)
     adc:	10000326 	beq	r2,zero,aec <conv_grayscale+0x48>
		free(grayscale_array);
     ae0:	d0a6cd17 	ldw	r2,-25804(gp)
     ae4:	1009883a 	mov	r4,r2
     ae8:	00020780 	call	2078 <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     aec:	e0fffe17 	ldw	r3,-8(fp)
     af0:	e0bfff17 	ldw	r2,-4(fp)
     af4:	1885383a 	mul	r2,r3,r2
     af8:	1009883a 	mov	r4,r2
     afc:	00020640 	call	2064 <malloc>
     b00:	d0a6cd15 	stw	r2,-25804(gp)
	for (y = 0 ; y < height ; y++) {
     b04:	e03ff915 	stw	zero,-28(fp)
     b08:	00003c06 	br	bfc <conv_grayscale+0x158>
		for (x = 0 ; x < width ; x++) {
     b0c:	e03ff815 	stw	zero,-32(fp)
     b10:	00003406 	br	be4 <conv_grayscale+0x140>
			rgb = pixels[y*width+x];
     b14:	e0fff917 	ldw	r3,-28(fp)
     b18:	e0bffe17 	ldw	r2,-8(fp)
     b1c:	1887383a 	mul	r3,r3,r2
     b20:	e0bff817 	ldw	r2,-32(fp)
     b24:	1885883a 	add	r2,r3,r2
     b28:	1085883a 	add	r2,r2,r2
     b2c:	1007883a 	mov	r3,r2
     b30:	e0bffa17 	ldw	r2,-24(fp)
     b34:	10c5883a 	add	r2,r2,r3
     b38:	1080000b 	ldhu	r2,0(r2)
     b3c:	e0bffb0d 	sth	r2,-20(fp)
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     b40:	e0bffb0b 	ldhu	r2,-20(fp)
     b44:	1004d2fa 	srli	r2,r2,11
     b48:	10bfffcc 	andi	r2,r2,65535
     b4c:	100490fa 	slli	r2,r2,3
     b50:	10803fcc 	andi	r2,r2,255
     b54:	10800564 	muli	r2,r2,21
     b58:	e0bffc15 	stw	r2,-16(fp)
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     b5c:	e0bffb0b 	ldhu	r2,-20(fp)
     b60:	1004d17a 	srli	r2,r2,5
     b64:	10bfffcc 	andi	r2,r2,65535
     b68:	1085883a 	add	r2,r2,r2
     b6c:	1085883a 	add	r2,r2,r2
     b70:	10803fcc 	andi	r2,r2,255
     b74:	10801224 	muli	r2,r2,72
     b78:	e0fffc17 	ldw	r3,-16(fp)
     b7c:	1885883a 	add	r2,r3,r2
     b80:	e0bffc15 	stw	r2,-16(fp)
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     b84:	e0bffb0b 	ldhu	r2,-20(fp)
     b88:	100490fa 	slli	r2,r2,3
     b8c:	10803fcc 	andi	r2,r2,255
     b90:	108001e4 	muli	r2,r2,7
     b94:	e0fffc17 	ldw	r3,-16(fp)
     b98:	1885883a 	add	r2,r3,r2
     b9c:	e0bffc15 	stw	r2,-16(fp)
			gray /= 100;
     ba0:	e0bffc17 	ldw	r2,-16(fp)
     ba4:	1009883a 	mov	r4,r2
     ba8:	01401904 	movi	r5,100
     bac:	0001fa40 	call	1fa4 <__divsi3>
     bb0:	e0bffc15 	stw	r2,-16(fp)
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     bb4:	d0a6cd17 	ldw	r2,-25804(gp)
     bb8:	e13ff917 	ldw	r4,-28(fp)
     bbc:	e0fffe17 	ldw	r3,-8(fp)
     bc0:	20c9383a 	mul	r4,r4,r3
     bc4:	e0fff817 	ldw	r3,-32(fp)
     bc8:	20c7883a 	add	r3,r4,r3
     bcc:	10c5883a 	add	r2,r2,r3
     bd0:	e0fffc03 	ldbu	r3,-16(fp)
     bd4:	10c00025 	stbio	r3,0(r2)
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     bd8:	e0bff817 	ldw	r2,-32(fp)
     bdc:	10800044 	addi	r2,r2,1
     be0:	e0bff815 	stw	r2,-32(fp)
     be4:	e0fff817 	ldw	r3,-32(fp)
     be8:	e0bffe17 	ldw	r2,-8(fp)
     bec:	18bfc916 	blt	r3,r2,b14 <conv_grayscale+0x70>
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     bf0:	e0bff917 	ldw	r2,-28(fp)
     bf4:	10800044 	addi	r2,r2,1
     bf8:	e0bff915 	stw	r2,-28(fp)
     bfc:	e0fff917 	ldw	r3,-28(fp)
     c00:	e0bfff17 	ldw	r2,-4(fp)
     c04:	18bfc116 	blt	r3,r2,b0c <conv_grayscale+0x68>
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     c08:	e037883a 	mov	sp,fp
     c0c:	dfc00117 	ldw	ra,4(sp)
     c10:	df000017 	ldw	fp,0(sp)
     c14:	dec00204 	addi	sp,sp,8
     c18:	f800283a 	ret

00000c1c <get_grayscale_width>:


int get_grayscale_width() {
     c1c:	deffff04 	addi	sp,sp,-4
     c20:	df000015 	stw	fp,0(sp)
     c24:	d839883a 	mov	fp,sp
	return grayscale_width;
     c28:	d0a6cb17 	ldw	r2,-25812(gp)
}
     c2c:	e037883a 	mov	sp,fp
     c30:	df000017 	ldw	fp,0(sp)
     c34:	dec00104 	addi	sp,sp,4
     c38:	f800283a 	ret

00000c3c <get_grayscale_height>:

int get_grayscale_height() {
     c3c:	deffff04 	addi	sp,sp,-4
     c40:	df000015 	stw	fp,0(sp)
     c44:	d839883a 	mov	fp,sp
	return grayscape_height;
     c48:	d0a6cc17 	ldw	r2,-25808(gp)
}
     c4c:	e037883a 	mov	sp,fp
     c50:	df000017 	ldw	fp,0(sp)
     c54:	dec00104 	addi	sp,sp,4
     c58:	f800283a 	ret

00000c5c <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
     c5c:	deffff04 	addi	sp,sp,-4
     c60:	df000015 	stw	fp,0(sp)
     c64:	d839883a 	mov	fp,sp
	return grayscale_array;
     c68:	d0a6cd17 	ldw	r2,-25804(gp)
}
     c6c:	e037883a 	mov	sp,fp
     c70:	df000017 	ldw	fp,0(sp)
     c74:	dec00104 	addi	sp,sp,4
     c78:	f800283a 	ret

00000c7c <i2c_busy_wait>:
 * @todo no open tasks
 */
#include "i2c.h"

void i2c_busy_wait(void)
{
     c7c:	defffe04 	addi	sp,sp,-8
     c80:	df000115 	stw	fp,4(sp)
     c84:	df000104 	addi	fp,sp,4
	int busy;
	do{
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     c88:	00804034 	movhi	r2,256
     c8c:	10842704 	addi	r2,r2,4252
     c90:	10800037 	ldwio	r2,0(r2)
     c94:	e0bfff15 	stw	r2,-4(fp)
	}while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     c98:	e0bfff17 	ldw	r2,-4(fp)
     c9c:	108000cc 	andi	r2,r2,3
     ca0:	103ff91e 	bne	r2,zero,c88 <i2c_busy_wait+0xc>
}
     ca4:	e037883a 	mov	sp,fp
     ca8:	df000017 	ldw	fp,0(sp)
     cac:	dec00104 	addi	sp,sp,4
     cb0:	f800283a 	ret

00000cb4 <i2c_auto_detect>:

void i2c_auto_detect()
{
     cb4:	defffb04 	addi	sp,sp,-20
     cb8:	dfc00415 	stw	ra,16(sp)
     cbc:	df000315 	stw	fp,12(sp)
     cc0:	df000304 	addi	fp,sp,12
    int nrdef,loop,value;
    i2c_busy_wait();
     cc4:	0000c7c0 	call	c7c <i2c_busy_wait>
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     cc8:	00c00104 	movi	r3,4
     ccc:	00804034 	movhi	r2,256
     cd0:	10842704 	addi	r2,r2,4252
     cd4:	10c00035 	stwio	r3,0(r2)
    i2c_busy_wait();
     cd8:	0000c7c0 	call	c7c <i2c_busy_wait>
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     cdc:	00804034 	movhi	r2,256
     ce0:	10842504 	addi	r2,r2,4244
     ce4:	10800037 	ldwio	r2,0(r2)
     ce8:	e0bffe15 	stw	r2,-8(fp)
    printf("Number of I2C devices detected: %d\n",nrdef);
     cec:	01000074 	movhi	r4,1
     cf0:	21044904 	addi	r4,r4,4388
     cf4:	e17ffe17 	ldw	r5,-8(fp)
     cf8:	00028600 	call	2860 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     cfc:	e03ffd15 	stw	zero,-12(fp)
     d00:	00001006 	br	d44 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     d04:	00804034 	movhi	r2,256
     d08:	10842404 	addi	r2,r2,4240
     d0c:	e0fffd17 	ldw	r3,-12(fp)
     d10:	10c00035 	stwio	r3,0(r2)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
     d14:	00804034 	movhi	r2,256
     d18:	10842404 	addi	r2,r2,4240
     d1c:	10800037 	ldwio	r2,0(r2)
     d20:	e0bfff15 	stw	r2,-4(fp)
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     d24:	01000074 	movhi	r4,1
     d28:	21045204 	addi	r4,r4,4424
     d2c:	e17ffd17 	ldw	r5,-12(fp)
     d30:	e1bfff17 	ldw	r6,-4(fp)
     d34:	00028600 	call	2860 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     d38:	e0bffd17 	ldw	r2,-12(fp)
     d3c:	10800044 	addi	r2,r2,1
     d40:	e0bffd15 	stw	r2,-12(fp)
     d44:	e0fffd17 	ldw	r3,-12(fp)
     d48:	e0bffe17 	ldw	r2,-8(fp)
     d4c:	18bfed16 	blt	r3,r2,d04 <i2c_auto_detect+0x50>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     d50:	e037883a 	mov	sp,fp
     d54:	dfc00117 	ldw	ra,4(sp)
     d58:	df000017 	ldw	fp,0(sp)
     d5c:	dec00204 	addi	sp,sp,8
     d60:	f800283a 	ret

00000d64 <i2c_short_read>:

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address)
{
     d64:	defffc04 	addi	sp,sp,-16
     d68:	dfc00315 	stw	ra,12(sp)
     d6c:	df000215 	stw	fp,8(sp)
     d70:	df000204 	addi	fp,sp,8
     d74:	2007883a 	mov	r3,r4
     d78:	2805883a 	mov	r2,r5
     d7c:	e0fffe05 	stb	r3,-8(fp)
     d80:	e0bfff0d 	sth	r2,-4(fp)
	i2c_busy_wait();
     d84:	0000c7c0 	call	c7c <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     d88:	e0fffe03 	ldbu	r3,-8(fp)
     d8c:	00804034 	movhi	r2,256
     d90:	10842404 	addi	r2,r2,4240
     d94:	10c00025 	stbio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     d98:	e0ffff0b 	ldhu	r3,-4(fp)
     d9c:	00804034 	movhi	r2,256
     da0:	10842504 	addi	r2,r2,4244
     da4:	10c0002d 	sthio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     da8:	00c010c4 	movi	r3,67
     dac:	00804034 	movhi	r2,256
     db0:	10842704 	addi	r2,r2,4252
     db4:	10c00025 	stbio	r3,0(r2)
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
     db8:	0000c7c0 	call	c7c <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     dbc:	e0bffe03 	ldbu	r2,-8(fp)
     dc0:	10c00044 	addi	r3,r2,1
     dc4:	00804034 	movhi	r2,256
     dc8:	10842404 	addi	r2,r2,4240
     dcc:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     dd0:	00c00884 	movi	r3,34
     dd4:	00804034 	movhi	r2,256
     dd8:	10842704 	addi	r2,r2,4252
     ddc:	10c00025 	stbio	r3,0(r2)
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
     de0:	0000c7c0 	call	c7c <i2c_busy_wait>
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     de4:	00804034 	movhi	r2,256
     de8:	10842604 	addi	r2,r2,4248
     dec:	10800037 	ldwio	r2,0(r2)
}
     df0:	e037883a 	mov	sp,fp
     df4:	dfc00117 	ldw	ra,4(sp)
     df8:	df000017 	ldw	fp,0(sp)
     dfc:	dec00204 	addi	sp,sp,8
     e00:	f800283a 	ret

00000e04 <i2c_short_write>:

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data)
{
     e04:	defffb04 	addi	sp,sp,-20
     e08:	dfc00415 	stw	ra,16(sp)
     e0c:	df000315 	stw	fp,12(sp)
     e10:	df000304 	addi	fp,sp,12
     e14:	2807883a 	mov	r3,r5
     e18:	3005883a 	mov	r2,r6
     e1c:	e13ffd05 	stb	r4,-12(fp)
     e20:	e0fffe0d 	sth	r3,-8(fp)
     e24:	e0bfff0d 	sth	r2,-4(fp)
	i2c_busy_wait();
     e28:	0000c7c0 	call	c7c <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     e2c:	e0fffd03 	ldbu	r3,-12(fp)
     e30:	00804034 	movhi	r2,256
     e34:	10842404 	addi	r2,r2,4240
     e38:	10c00025 	stbio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     e3c:	e0fffe0b 	ldhu	r3,-8(fp)
     e40:	00804034 	movhi	r2,256
     e44:	10842504 	addi	r2,r2,4244
     e48:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     e4c:	e0ffff0b 	ldhu	r3,-4(fp)
     e50:	00804034 	movhi	r2,256
     e54:	10842604 	addi	r2,r2,4248
     e58:	10c0002d 	sthio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     e5c:	00c01084 	movi	r3,66
     e60:	00804034 	movhi	r2,256
     e64:	10842704 	addi	r2,r2,4252
     e68:	10c00025 	stbio	r3,0(r2)
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
     e6c:	0000c7c0 	call	c7c <i2c_busy_wait>
}
     e70:	e037883a 	mov	sp,fp
     e74:	dfc00117 	ldw	ra,4(sp)
     e78:	df000017 	ldw	fp,0(sp)
     e7c:	dec00204 	addi	sp,sp,8
     e80:	f800283a 	ret

00000e84 <LCD_Write_Command>:
#include "lcd_simple.h"

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
     e84:	defffd04 	addi	sp,sp,-12
     e88:	dfc00215 	stw	ra,8(sp)
     e8c:	df000115 	stw	fp,4(sp)
     e90:	df000104 	addi	fp,sp,4
     e94:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e98:	00804034 	movhi	r2,256
     e9c:	10840804 	addi	r2,r2,4128
     ea0:	e0ffff0b 	ldhu	r3,-4(fp)
     ea4:	10c0002d 	sthio	r3,0(r2)
	usleep(10);
     ea8:	01000284 	movi	r4,10
     eac:	000eb7c0 	call	eb7c <usleep>
}
     eb0:	e037883a 	mov	sp,fp
     eb4:	dfc00117 	ldw	ra,4(sp)
     eb8:	df000017 	ldw	fp,0(sp)
     ebc:	dec00204 	addi	sp,sp,8
     ec0:	f800283a 	ret

00000ec4 <LCD_Write_Data>:

void LCD_Write_Data(int data) {
     ec4:	defffd04 	addi	sp,sp,-12
     ec8:	dfc00215 	stw	ra,8(sp)
     ecc:	df000115 	stw	fp,4(sp)
     ed0:	df000104 	addi	fp,sp,4
     ed4:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ed8:	00804034 	movhi	r2,256
     edc:	10840904 	addi	r2,r2,4132
     ee0:	e0ffff0b 	ldhu	r3,-4(fp)
     ee4:	10c0002d 	sthio	r3,0(r2)
	usleep(10);
     ee8:	01000284 	movi	r4,10
     eec:	000eb7c0 	call	eb7c <usleep>
}
     ef0:	e037883a 	mov	sp,fp
     ef4:	dfc00117 	ldw	ra,4(sp)
     ef8:	df000017 	ldw	fp,0(sp)
     efc:	dec00204 	addi	sp,sp,8
     f00:	f800283a 	ret

00000f04 <init_LCD>:


void init_LCD() {
     f04:	defffe04 	addi	sp,sp,-8
     f08:	dfc00115 	stw	ra,4(sp)
     f0c:	df000015 	stw	fp,0(sp)
     f10:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f14:	00c00084 	movi	r3,2
     f18:	00804034 	movhi	r2,256
     f1c:	10840a04 	addi	r2,r2,4136
     f20:	10c0002d 	sthio	r3,0(r2)
			         LCD_Sixteen_Bit|LCD_Reset|
			         LCD_RGB565_Mode|LCD_Color_Image); // Set 16 bit transfer mode and reset
	LCD_Write_Command(0x0028); 	//display OFF
     f24:	01000a04 	movi	r4,40
     f28:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Command(0x0011); 	//exit SLEEP mode
     f2c:	01000444 	movi	r4,17
     f30:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
     f34:	0009883a 	mov	r4,zero
     f38:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x00CB); 	//Power Control A
     f3c:	010032c4 	movi	r4,203
     f40:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0039); 	//always 0x39
     f44:	01000e44 	movi	r4,57
     f48:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x002C); 	//always 0x2C
     f4c:	01000b04 	movi	r4,44
     f50:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0000); 	//always 0x00
     f54:	0009883a 	mov	r4,zero
     f58:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0034); 	//Vcore = 1.6V
     f5c:	01000d04 	movi	r4,52
     f60:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0002); 	//DDVDH = 5.6V
     f64:	01000084 	movi	r4,2
     f68:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x00CF); 	//Power Control B
     f6c:	010033c4 	movi	r4,207
     f70:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0000); 	//always 0x00
     f74:	0009883a 	mov	r4,zero
     f78:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0081); 	//PCEQ off
     f7c:	01002044 	movi	r4,129
     f80:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0030); 	//ESD protection
     f84:	01000c04 	movi	r4,48
     f88:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x00E8); 	//Driver timing control A
     f8c:	01003a04 	movi	r4,232
     f90:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0085); 	//non - overlap
     f94:	01002144 	movi	r4,133
     f98:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0001); 	//EQ timing
     f9c:	01000044 	movi	r4,1
     fa0:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0079); 	//Pre-chargetiming
     fa4:	01001e44 	movi	r4,121
     fa8:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Command(0x00EA); 	//Driver timing control B
     fac:	01003a84 	movi	r4,234
     fb0:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0000);		//Gate driver timing
     fb4:	0009883a 	mov	r4,zero
     fb8:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//always 0x00
     fbc:	0009883a 	mov	r4,zero
     fc0:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0064);		//soft start 
     fc4:	01001904 	movi	r4,100
     fc8:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0003);		//power on sequence 
     fcc:	010000c4 	movi	r4,3
     fd0:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0012);		//power on sequence 
     fd4:	01000484 	movi	r4,18
     fd8:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0081);		//DDVDH enhance on 
     fdc:	01002044 	movi	r4,129
     fe0:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x00F7); 	//Pump ratio control 
     fe4:	01003dc4 	movi	r4,247
     fe8:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0020); 	//DDVDH=2xVCI 
     fec:	01000804 	movi	r4,32
     ff0:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x00C0);	//power control 1 
     ff4:	01003004 	movi	r4,192
     ff8:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0026);
     ffc:	01000984 	movi	r4,38
    1000:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0004); 	//second parameter for ILI9340 (ignored by ILI9341) 
    1004:	01000104 	movi	r4,4
    1008:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x00C1); 	//power control 2 
    100c:	01003044 	movi	r4,193
    1010:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0011);
    1014:	01000444 	movi	r4,17
    1018:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x00C5); 	//VCOM control 1 
    101c:	01003144 	movi	r4,197
    1020:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0035);
    1024:	01000d44 	movi	r4,53
    1028:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x003E);
    102c:	01000f84 	movi	r4,62
    1030:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x00C7); 	//VCOM control 2 
    1034:	010031c4 	movi	r4,199
    1038:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x00BE);
    103c:	01002f84 	movi	r4,190
    1040:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x00B1); 	//frame rate control 
    1044:	01002c44 	movi	r4,177
    1048:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    104c:	0009883a 	mov	r4,zero
    1050:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0010);
    1054:	01000404 	movi	r4,16
    1058:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x003A);	//pixel format = 16 bit per pixel 
    105c:	01000e84 	movi	r4,58
    1060:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0055);
    1064:	01001544 	movi	r4,85
    1068:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x00B6); 	//display function control 
    106c:	01002d84 	movi	r4,182
    1070:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x000A);
    1074:	01000284 	movi	r4,10
    1078:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x00A2);
    107c:	01002884 	movi	r4,162
    1080:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x00F2); 	//3G Gamma control 
    1084:	01003c84 	movi	r4,242
    1088:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0002);	 	//off 
    108c:	01000084 	movi	r4,2
    1090:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x0026); 	//Gamma curve 3 
    1094:	01000984 	movi	r4,38
    1098:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0001);
    109c:	01000044 	movi	r4,1
    10a0:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x0036); 	//memory access control = BGR 
    10a4:	01000d84 	movi	r4,54
    10a8:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    10ac:	0009883a 	mov	r4,zero
    10b0:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x002A); 	//column address set 
    10b4:	01000a84 	movi	r4,42
    10b8:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    10bc:	0009883a 	mov	r4,zero
    10c0:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//start 0x0000 
    10c4:	0009883a 	mov	r4,zero
    10c8:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0000);
    10cc:	0009883a 	mov	r4,zero
    10d0:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x00EF);		//end 0x00EF 
    10d4:	01003bc4 	movi	r4,239
    10d8:	0000ec40 	call	ec4 <LCD_Write_Data>

	LCD_Write_Command(0x002B);	//page address set 
    10dc:	01000ac4 	movi	r4,43
    10e0:	0000e840 	call	e84 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    10e4:	0009883a 	mov	r4,zero
    10e8:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//start 0x0000 
    10ec:	0009883a 	mov	r4,zero
    10f0:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x0001);
    10f4:	01000044 	movi	r4,1
    10f8:	0000ec40 	call	ec4 <LCD_Write_Data>
	LCD_Write_Data(0x003F);		//end 0x013F 
    10fc:	01000fc4 	movi	r4,63
    1100:	0000ec40 	call	ec4 <LCD_Write_Data>
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
    1104:	00c03c04 	movi	r3,240
    1108:	00804034 	movhi	r2,256
    110c:	10840d04 	addi	r2,r2,4148
    1110:	10c00035 	stwio	r3,0(r2)
	LCD_width = 240;
    1114:	00803c04 	movi	r2,240
    1118:	d0a6ce8d 	sth	r2,-25798(gp)
	LCD_height = 320;
    111c:	00805004 	movi	r2,320
    1120:	d0a6ce0d 	sth	r2,-25800(gp)


	LCD_Write_Command(0x0029);
    1124:	01000a44 	movi	r4,41
    1128:	0000e840 	call	e84 <LCD_Write_Command>

}
    112c:	e037883a 	mov	sp,fp
    1130:	dfc00117 	ldw	ra,4(sp)
    1134:	df000017 	ldw	fp,0(sp)
    1138:	dec00204 	addi	sp,sp,8
    113c:	f800283a 	ret

00001140 <transfer_LCD_no_dma>:

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
    1140:	defff904 	addi	sp,sp,-28
    1144:	dfc00615 	stw	ra,24(sp)
    1148:	df000515 	stw	fp,20(sp)
    114c:	df000504 	addi	fp,sp,20
    1150:	e13ffd15 	stw	r4,-12(fp)
    1154:	e17ffe15 	stw	r5,-8(fp)
    1158:	e1bfff15 	stw	r6,-4(fp)
	unsigned short *data_array = (unsigned short *)array;
    115c:	e0bffd17 	ldw	r2,-12(fp)
    1160:	e0bffc15 	stw	r2,-16(fp)
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    1164:	00804034 	movhi	r2,256
    1168:	10840e04 	addi	r2,r2,4152
    116c:	e0fffe17 	ldw	r3,-8(fp)
    1170:	10c00035 	stwio	r3,0(r2)
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
    1174:	01000b04 	movi	r4,44
    1178:	0000e840 	call	e84 <LCD_Write_Command>
	for (pixels = 0 ; pixels < width*height ; pixels++)
    117c:	e03ffb15 	stw	zero,-20(fp)
    1180:	00000c06 	br	11b4 <transfer_LCD_no_dma+0x74>
		LCD_Write_Data(data_array[pixels]);
    1184:	e0bffb17 	ldw	r2,-20(fp)
    1188:	1085883a 	add	r2,r2,r2
    118c:	1007883a 	mov	r3,r2
    1190:	e0bffc17 	ldw	r2,-16(fp)
    1194:	10c5883a 	add	r2,r2,r3
    1198:	1080000b 	ldhu	r2,0(r2)
    119c:	10bfffcc 	andi	r2,r2,65535
    11a0:	1009883a 	mov	r4,r2
    11a4:	0000ec40 	call	ec4 <LCD_Write_Data>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    11a8:	e0bffb17 	ldw	r2,-20(fp)
    11ac:	10800044 	addi	r2,r2,1
    11b0:	e0bffb15 	stw	r2,-20(fp)
    11b4:	e0fffe17 	ldw	r3,-8(fp)
    11b8:	e0bfff17 	ldw	r2,-4(fp)
    11bc:	1885383a 	mul	r2,r3,r2
    11c0:	1007883a 	mov	r3,r2
    11c4:	e0bffb17 	ldw	r2,-20(fp)
    11c8:	10ffee36 	bltu	r2,r3,1184 <transfer_LCD_no_dma+0x44>
		LCD_Write_Data(data_array[pixels]);
}
    11cc:	e037883a 	mov	sp,fp
    11d0:	dfc00117 	ldw	ra,4(sp)
    11d4:	df000017 	ldw	fp,0(sp)
    11d8:	dec00204 	addi	sp,sp,8
    11dc:	f800283a 	ret

000011e0 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
    11e0:	defffa04 	addi	sp,sp,-24
    11e4:	df000515 	stw	fp,20(sp)
    11e8:	df000504 	addi	fp,sp,20
    11ec:	e13ffc15 	stw	r4,-16(fp)
    11f0:	e17ffd15 	stw	r5,-12(fp)
    11f4:	e1bffe15 	stw	r6,-8(fp)
    11f8:	3805883a 	mov	r2,r7
    11fc:	e0bfff05 	stb	r2,-4(fp)
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
    1200:	d0a6ce0b 	ldhu	r2,-25800(gp)
    1204:	10bfffcc 	andi	r2,r2,65535
    1208:	e0fffe17 	ldw	r3,-8(fp)
    120c:	1880010e 	bge	r3,r2,1214 <transfer_LCD_with_dma+0x34>
    1210:	1805883a 	mov	r2,r3
    1214:	e0bffb0d 	sth	r2,-20(fp)
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
    1218:	d0a6ce8b 	ldhu	r2,-25798(gp)
    121c:	10bfffcc 	andi	r2,r2,65535
    1220:	e0fffd17 	ldw	r3,-12(fp)
    1224:	1880010e 	bge	r3,r2,122c <transfer_LCD_with_dma+0x4c>
    1228:	1805883a 	mov	r2,r3
    122c:	e0bffb8d 	sth	r2,-18(fp)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    1230:	00804034 	movhi	r2,256
    1234:	10840e04 	addi	r2,r2,4152
    1238:	e0fffd17 	ldw	r3,-12(fp)
    123c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
    1240:	e0fffc17 	ldw	r3,-16(fp)
    1244:	00804034 	movhi	r2,256
    1248:	10840b04 	addi	r2,r2,4140
    124c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
    1250:	e0fffb8b 	ldhu	r3,-18(fp)
    1254:	e0bffb0b 	ldhu	r2,-20(fp)
    1258:	1887383a 	mul	r3,r3,r2
    125c:	00804034 	movhi	r2,256
    1260:	10840c04 	addi	r2,r2,4144
    1264:	10c00035 	stwio	r3,0(r2)
	if (grayscale==0)
    1268:	e0bfff07 	ldb	r2,-4(fp)
    126c:	1000051e 	bne	r2,zero,1284 <transfer_LCD_with_dma+0xa4>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    1270:	00c04004 	movi	r3,256
    1274:	00804034 	movhi	r2,256
    1278:	10840a04 	addi	r2,r2,4136
    127c:	10c0002d 	sthio	r3,0(r2)
    1280:	00000406 	br	1294 <transfer_LCD_with_dma+0xb4>
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    1284:	00c04404 	movi	r3,272
    1288:	00804034 	movhi	r2,256
    128c:	10840a04 	addi	r2,r2,4136
    1290:	10c0002d 	sthio	r3,0(r2)
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_GrayScale_Image);
}
    1294:	e037883a 	mov	sp,fp
    1298:	df000017 	ldw	fp,0(sp)
    129c:	dec00104 	addi	sp,sp,4
    12a0:	f800283a 	ret

000012a4 <main>:
#include "vga.h"
#include "dipswitch.h"
#include "sobel.h"

int main(void)
{
    12a4:	defff504 	addi	sp,sp,-44
    12a8:	dfc00a15 	stw	ra,40(sp)
    12ac:	df000915 	stw	fp,36(sp)
    12b0:	dc400815 	stw	r17,32(sp)
    12b4:	dc000715 	stw	r16,28(sp)
    12b8:	df000904 	addi	fp,sp,36
  void *buffer1,*buffer2,*buffer3,*buffer4;
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;
  init_LCD();
    12bc:	0000f040 	call	f04 <init_LCD>
  init_camera();
    12c0:	000028c0 	call	28c <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    12c4:	01000604 	movi	r4,24
    12c8:	0001f040 	call	1f04 <vga_set_swap>
  printf("Hello from Nios II!\n");
    12cc:	01000074 	movhi	r4,1
    12d0:	21045b04 	addi	r4,r4,4460
    12d4:	00029440 	call	2944 <puts>
  cam_get_profiling();
    12d8:	00007f80 	call	7f8 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    12dc:	00007600 	call	760 <cam_get_xsize>
    12e0:	143fffcc 	andi	r16,r2,65535
    12e4:	00007ac0 	call	7ac <cam_get_ysize>
    12e8:	10bfffcc 	andi	r2,r2,65535
    12ec:	8085383a 	mul	r2,r16,r2
    12f0:	1009883a 	mov	r4,r2
    12f4:	00020640 	call	2064 <malloc>
    12f8:	e0bff715 	stw	r2,-36(fp)
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    12fc:	00007600 	call	760 <cam_get_xsize>
    1300:	143fffcc 	andi	r16,r2,65535
    1304:	00007ac0 	call	7ac <cam_get_ysize>
    1308:	10bfffcc 	andi	r2,r2,65535
    130c:	8085383a 	mul	r2,r16,r2
    1310:	1009883a 	mov	r4,r2
    1314:	00020640 	call	2064 <malloc>
    1318:	e0bff815 	stw	r2,-32(fp)
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    131c:	00007600 	call	760 <cam_get_xsize>
    1320:	143fffcc 	andi	r16,r2,65535
    1324:	00007ac0 	call	7ac <cam_get_ysize>
    1328:	10bfffcc 	andi	r2,r2,65535
    132c:	8085383a 	mul	r2,r16,r2
    1330:	1009883a 	mov	r4,r2
    1334:	00020640 	call	2064 <malloc>
    1338:	e0bff915 	stw	r2,-28(fp)
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    133c:	00007600 	call	760 <cam_get_xsize>
    1340:	143fffcc 	andi	r16,r2,65535
    1344:	00007ac0 	call	7ac <cam_get_ysize>
    1348:	10bfffcc 	andi	r2,r2,65535
    134c:	8085383a 	mul	r2,r16,r2
    1350:	1009883a 	mov	r4,r2
    1354:	00020640 	call	2064 <malloc>
    1358:	e0bffa15 	stw	r2,-24(fp)
  cam_set_image_pointer(0,buffer1);
    135c:	0009883a 	mov	r4,zero
    1360:	e17ff717 	ldw	r5,-36(fp)
    1364:	000089c0 	call	89c <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    1368:	01000044 	movi	r4,1
    136c:	e17ff817 	ldw	r5,-32(fp)
    1370:	000089c0 	call	89c <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    1374:	01000084 	movi	r4,2
    1378:	e17ff917 	ldw	r5,-28(fp)
    137c:	000089c0 	call	89c <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    1380:	010000c4 	movi	r4,3
    1384:	e17ffa17 	ldw	r5,-24(fp)
    1388:	000089c0 	call	89c <cam_set_image_pointer>
  enable_continues_mode();
    138c:	00009f00 	call	9f0 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    1390:	00007600 	call	760 <cam_get_xsize>
    1394:	10bfffcc 	andi	r2,r2,65535
    1398:	1004d07a 	srli	r2,r2,1
    139c:	143fffcc 	andi	r16,r2,65535
    13a0:	00007ac0 	call	7ac <cam_get_ysize>
    13a4:	10bfffcc 	andi	r2,r2,65535
    13a8:	8009883a 	mov	r4,r16
    13ac:	100b883a 	mov	r5,r2
    13b0:	00017200 	call	1720 <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
    13b4:	0000a1c0 	call	a1c <new_image_available>
    13b8:	10803fcc 	andi	r2,r2,255
    13bc:	1080201c 	xori	r2,r2,128
    13c0:	10bfe004 	addi	r2,r2,-128
    13c4:	1000d526 	beq	r2,zero,171c <main+0x478>
		  if (current_image_valid()!=0) {
    13c8:	00009440 	call	944 <current_image_valid>
    13cc:	10bfffcc 	andi	r2,r2,65535
    13d0:	10a0001c 	xori	r2,r2,32768
    13d4:	10a00004 	addi	r2,r2,-32768
    13d8:	1000d026 	beq	r2,zero,171c <main+0x478>
			  current_mode = DIPSW_get_value();
    13dc:	0000a740 	call	a74 <DIPSW_get_value>
    13e0:	e0bffb05 	stb	r2,-20(fp)
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
    13e4:	e0bffb03 	ldbu	r2,-20(fp)
    13e8:	108001cc 	andi	r2,r2,7
    13ec:	e0bffb45 	stb	r2,-19(fp)
			  image = (unsigned short*)current_image_pointer();
    13f0:	000097c0 	call	97c <current_image_pointer>
    13f4:	e0bffc15 	stw	r2,-16(fp)
		      switch (mode) {
    13f8:	e0bffb43 	ldbu	r2,-19(fp)
    13fc:	10c00060 	cmpeqi	r3,r2,1
    1400:	1800221e 	bne	r3,zero,148c <main+0x1e8>
    1404:	10c00088 	cmpgei	r3,r2,2
    1408:	1800021e 	bne	r3,zero,1414 <main+0x170>
    140c:	10000626 	beq	r2,zero,1428 <main+0x184>
    1410:	00009606 	br	166c <main+0x3c8>
    1414:	10c000a0 	cmpeqi	r3,r2,2
    1418:	1800401e 	bne	r3,zero,151c <main+0x278>
    141c:	108000e0 	cmpeqi	r2,r2,3
    1420:	1000671e 	bne	r2,zero,15c0 <main+0x31c>
    1424:	00009106 	br	166c <main+0x3c8>
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1428:	e0fffc17 	ldw	r3,-16(fp)
    142c:	00a04414 	movui	r2,33040
    1430:	18a3883a 	add	r17,r3,r2
		                	cam_get_xsize()>>1,
    1434:	00007600 	call	760 <cam_get_xsize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1438:	10bfffcc 	andi	r2,r2,65535
    143c:	1004d07a 	srli	r2,r2,1
    1440:	143fffcc 	andi	r16,r2,65535
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
    1444:	00007ac0 	call	7ac <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1448:	10bfffcc 	andi	r2,r2,65535
    144c:	8809883a 	mov	r4,r17
    1450:	800b883a 	mov	r5,r16
    1454:	100d883a 	mov	r6,r2
    1458:	000f883a 	mov	r7,zero
    145c:	00011e00 	call	11e0 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1460:	e0bffb03 	ldbu	r2,-20(fp)
    1464:	10803fcc 	andi	r2,r2,255
    1468:	1080201c 	xori	r2,r2,128
    146c:	10bfe004 	addi	r2,r2,-128
    1470:	1000050e 	bge	r2,zero,1488 <main+0x1e4>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1474:	01000204 	movi	r4,8
    1478:	0001f040 	call	1f04 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    147c:	e13ffc17 	ldw	r4,-16(fp)
    1480:	0001ed40 	call	1ed4 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    1484:	0000a506 	br	171c <main+0x478>
    1488:	0000a406 	br	171c <main+0x478>
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    148c:	00007600 	call	760 <cam_get_xsize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
    1490:	10bfffcc 	andi	r2,r2,65535
    1494:	1004d07a 	srli	r2,r2,1
    1498:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    149c:	00007ac0 	call	7ac <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
    14a0:	10bfffcc 	andi	r2,r2,65535
    14a4:	e13ffc17 	ldw	r4,-16(fp)
    14a8:	800b883a 	mov	r5,r16
    14ac:	100d883a 	mov	r6,r2
    14b0:	0000aa40 	call	aa4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    14b4:	0000c5c0 	call	c5c <get_grayscale_picture>
    14b8:	e0bffd15 	stw	r2,-12(fp)
		               transfer_LCD_with_dma(&grayscale[16520],
    14bc:	e0bffd17 	ldw	r2,-12(fp)
    14c0:	14502204 	addi	r17,r2,16520
		      		                	cam_get_xsize()>>1,
    14c4:	00007600 	call	760 <cam_get_xsize>
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    14c8:	10bfffcc 	andi	r2,r2,65535
    14cc:	1004d07a 	srli	r2,r2,1
    14d0:	143fffcc 	andi	r16,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
    14d4:	00007ac0 	call	7ac <cam_get_ysize>
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    14d8:	10bfffcc 	andi	r2,r2,65535
    14dc:	8809883a 	mov	r4,r17
    14e0:	800b883a 	mov	r5,r16
    14e4:	100d883a 	mov	r6,r2
    14e8:	01c00044 	movi	r7,1
    14ec:	00011e00 	call	11e0 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    14f0:	e0bffb03 	ldbu	r2,-20(fp)
    14f4:	10803fcc 	andi	r2,r2,255
    14f8:	1080201c 	xori	r2,r2,128
    14fc:	10bfe004 	addi	r2,r2,-128
    1500:	1000050e 	bge	r2,zero,1518 <main+0x274>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1504:	01000604 	movi	r4,24
    1508:	0001f040 	call	1f04 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    150c:	e13ffd17 	ldw	r4,-12(fp)
    1510:	0001ed40 	call	1ed4 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    1514:	00008106 	br	171c <main+0x478>
    1518:	00008006 	br	171c <main+0x478>
		      case 2 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    151c:	00007600 	call	760 <cam_get_xsize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : conv_grayscale((void *)image,
    1520:	10bfffcc 	andi	r2,r2,65535
    1524:	1004d07a 	srli	r2,r2,1
    1528:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    152c:	00007ac0 	call	7ac <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : conv_grayscale((void *)image,
    1530:	10bfffcc 	andi	r2,r2,65535
    1534:	e13ffc17 	ldw	r4,-16(fp)
    1538:	800b883a 	mov	r5,r16
    153c:	100d883a 	mov	r6,r2
    1540:	0000aa40 	call	aa4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    1544:	0000c5c0 	call	c5c <get_grayscale_picture>
    1548:	e0bffd15 	stw	r2,-12(fp)
		               sobel_x_with_rgb(grayscale);
    154c:	e13ffd17 	ldw	r4,-12(fp)
    1550:	0001a500 	call	1a50 <sobel_x_with_rgb>
		               image = GetSobel_rgb();
    1554:	0001e940 	call	1e94 <GetSobel_rgb>
    1558:	e0bffc15 	stw	r2,-16(fp)
		               transfer_LCD_with_dma(&image[16520],
    155c:	e0fffc17 	ldw	r3,-16(fp)
    1560:	00a04414 	movui	r2,33040
    1564:	18a3883a 	add	r17,r3,r2
		      		                	cam_get_xsize()>>1,
    1568:	00007600 	call	760 <cam_get_xsize>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    156c:	10bfffcc 	andi	r2,r2,65535
    1570:	1004d07a 	srli	r2,r2,1
    1574:	143fffcc 	andi	r16,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
    1578:	00007ac0 	call	7ac <cam_get_ysize>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    157c:	10bfffcc 	andi	r2,r2,65535
    1580:	8809883a 	mov	r4,r17
    1584:	800b883a 	mov	r5,r16
    1588:	100d883a 	mov	r6,r2
    158c:	000f883a 	mov	r7,zero
    1590:	00011e00 	call	11e0 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1594:	e0bffb03 	ldbu	r2,-20(fp)
    1598:	10803fcc 	andi	r2,r2,255
    159c:	1080201c 	xori	r2,r2,128
    15a0:	10bfe004 	addi	r2,r2,-128
    15a4:	1000050e 	bge	r2,zero,15bc <main+0x318>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    15a8:	01000204 	movi	r4,8
    15ac:	0001f040 	call	1f04 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    15b0:	e13ffc17 	ldw	r4,-16(fp)
    15b4:	0001ed40 	call	1ed4 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    15b8:	00005806 	br	171c <main+0x478>
    15bc:	00005706 	br	171c <main+0x478>
		      case 3 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    15c0:	00007600 	call	760 <cam_get_xsize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
    15c4:	10bfffcc 	andi	r2,r2,65535
    15c8:	1004d07a 	srli	r2,r2,1
    15cc:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    15d0:	00007ac0 	call	7ac <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
    15d4:	10bfffcc 	andi	r2,r2,65535
    15d8:	e13ffc17 	ldw	r4,-16(fp)
    15dc:	800b883a 	mov	r5,r16
    15e0:	100d883a 	mov	r6,r2
    15e4:	0000aa40 	call	aa4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    15e8:	0000c5c0 	call	c5c <get_grayscale_picture>
    15ec:	e0bffd15 	stw	r2,-12(fp)
		               sobel_x(grayscale);
    15f0:	e13ffd17 	ldw	r4,-12(fp)
    15f4:	000198c0 	call	198c <sobel_x>
		               sobel_y_with_rgb(grayscale);
    15f8:	e13ffd17 	ldw	r4,-12(fp)
    15fc:	0001c4c0 	call	1c4c <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    1600:	0001e940 	call	1e94 <GetSobel_rgb>
    1604:	e0bffc15 	stw	r2,-16(fp)
		               transfer_LCD_with_dma(&image[16520],
    1608:	e0fffc17 	ldw	r3,-16(fp)
    160c:	00a04414 	movui	r2,33040
    1610:	18a3883a 	add	r17,r3,r2
		      		                	cam_get_xsize()>>1,
    1614:	00007600 	call	760 <cam_get_xsize>
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1618:	10bfffcc 	andi	r2,r2,65535
    161c:	1004d07a 	srli	r2,r2,1
    1620:	143fffcc 	andi	r16,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
    1624:	00007ac0 	call	7ac <cam_get_ysize>
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1628:	10bfffcc 	andi	r2,r2,65535
    162c:	8809883a 	mov	r4,r17
    1630:	800b883a 	mov	r5,r16
    1634:	100d883a 	mov	r6,r2
    1638:	000f883a 	mov	r7,zero
    163c:	00011e00 	call	11e0 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1640:	e0bffb03 	ldbu	r2,-20(fp)
    1644:	10803fcc 	andi	r2,r2,255
    1648:	1080201c 	xori	r2,r2,128
    164c:	10bfe004 	addi	r2,r2,-128
    1650:	1000050e 	bge	r2,zero,1668 <main+0x3c4>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1654:	01000204 	movi	r4,8
    1658:	0001f040 	call	1f04 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    165c:	e13ffc17 	ldw	r4,-16(fp)
    1660:	0001ed40 	call	1ed4 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    1664:	00002d06 	br	171c <main+0x478>
    1668:	00002c06 	br	171c <main+0x478>
		      default: conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    166c:	00007600 	call	760 <cam_get_xsize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: conv_grayscale((void *)image,
    1670:	10bfffcc 	andi	r2,r2,65535
    1674:	1004d07a 	srli	r2,r2,1
    1678:	143fffcc 	andi	r16,r2,65535
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
    167c:	00007ac0 	call	7ac <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: conv_grayscale((void *)image,
    1680:	10bfffcc 	andi	r2,r2,65535
    1684:	e13ffc17 	ldw	r4,-16(fp)
    1688:	800b883a 	mov	r5,r16
    168c:	100d883a 	mov	r6,r2
    1690:	0000aa40 	call	aa4 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
                       grayscale = get_grayscale_picture();
    1694:	0000c5c0 	call	c5c <get_grayscale_picture>
    1698:	e0bffd15 	stw	r2,-12(fp)
                       sobel_x(grayscale);
    169c:	e13ffd17 	ldw	r4,-12(fp)
    16a0:	000198c0 	call	198c <sobel_x>
                       sobel_y(grayscale);
    16a4:	e13ffd17 	ldw	r4,-12(fp)
    16a8:	0001b880 	call	1b88 <sobel_y>
                       sobel_threshold(128);
    16ac:	01002004 	movi	r4,128
    16b0:	0001d840 	call	1d84 <sobel_threshold>
                       grayscale=GetSobelResult();
    16b4:	0001eb40 	call	1eb4 <GetSobelResult>
    16b8:	e0bffd15 	stw	r2,-12(fp)
		               transfer_LCD_with_dma(&grayscale[16520],
    16bc:	e0bffd17 	ldw	r2,-12(fp)
    16c0:	14502204 	addi	r17,r2,16520
		      		                	cam_get_xsize()>>1,
    16c4:	00007600 	call	760 <cam_get_xsize>
                       grayscale = get_grayscale_picture();
                       sobel_x(grayscale);
                       sobel_y(grayscale);
                       sobel_threshold(128);
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    16c8:	10bfffcc 	andi	r2,r2,65535
    16cc:	1004d07a 	srli	r2,r2,1
    16d0:	143fffcc 	andi	r16,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
    16d4:	00007ac0 	call	7ac <cam_get_ysize>
                       grayscale = get_grayscale_picture();
                       sobel_x(grayscale);
                       sobel_y(grayscale);
                       sobel_threshold(128);
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    16d8:	10bfffcc 	andi	r2,r2,65535
    16dc:	8809883a 	mov	r4,r17
    16e0:	800b883a 	mov	r5,r16
    16e4:	100d883a 	mov	r6,r2
    16e8:	01c00044 	movi	r7,1
    16ec:	00011e00 	call	11e0 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    16f0:	e0bffb03 	ldbu	r2,-20(fp)
    16f4:	10803fcc 	andi	r2,r2,255
    16f8:	1080201c 	xori	r2,r2,128
    16fc:	10bfe004 	addi	r2,r2,-128
    1700:	1000050e 	bge	r2,zero,1718 <main+0x474>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1704:	01000604 	movi	r4,24
    1708:	0001f040 	call	1f04 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    170c:	e13ffd17 	ldw	r4,-12(fp)
    1710:	0001ed40 	call	1ed4 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    1714:	00000006 	br	1718 <main+0x474>
    1718:	0001883a 	nop
		      }
		  }
	  }
  } while (1);
    171c:	003f2506 	br	13b4 <main+0x110>

00001720 <init_sobel_arrays>:

int sobel_width;

int sobel_height;

void init_sobel_arrays(int width , int height) {
    1720:	defffb04 	addi	sp,sp,-20
    1724:	dfc00415 	stw	ra,16(sp)
    1728:	df000315 	stw	fp,12(sp)
    172c:	df000304 	addi	fp,sp,12
    1730:	e13ffe15 	stw	r4,-8(fp)
    1734:	e17fff15 	stw	r5,-4(fp)
	int loop;
	sobel_width = width;
    1738:	e0bffe17 	ldw	r2,-8(fp)
    173c:	d0a6cf15 	stw	r2,-25796(gp)
	sobel_height = height;
    1740:	e0bfff17 	ldw	r2,-4(fp)
    1744:	d0a6d115 	stw	r2,-25788(gp)
	if (sobel_x_result != NULL)
    1748:	d0a6d217 	ldw	r2,-25784(gp)
    174c:	10000326 	beq	r2,zero,175c <init_sobel_arrays+0x3c>
		free(sobel_x_result);
    1750:	d0a6d217 	ldw	r2,-25784(gp)
    1754:	1009883a 	mov	r4,r2
    1758:	00020780 	call	2078 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    175c:	e0fffe17 	ldw	r3,-8(fp)
    1760:	e0bfff17 	ldw	r2,-4(fp)
    1764:	1885383a 	mul	r2,r3,r2
    1768:	1085883a 	add	r2,r2,r2
    176c:	1009883a 	mov	r4,r2
    1770:	00020640 	call	2064 <malloc>
    1774:	d0a6d215 	stw	r2,-25784(gp)
	if (sobel_y_result != NULL)
    1778:	d0a6d317 	ldw	r2,-25780(gp)
    177c:	10000326 	beq	r2,zero,178c <init_sobel_arrays+0x6c>
		free(sobel_y_result);
    1780:	d0a6d317 	ldw	r2,-25780(gp)
    1784:	1009883a 	mov	r4,r2
    1788:	00020780 	call	2078 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    178c:	e0fffe17 	ldw	r3,-8(fp)
    1790:	e0bfff17 	ldw	r2,-4(fp)
    1794:	1885383a 	mul	r2,r3,r2
    1798:	1085883a 	add	r2,r2,r2
    179c:	1009883a 	mov	r4,r2
    17a0:	00020640 	call	2064 <malloc>
    17a4:	d0a6d315 	stw	r2,-25780(gp)
	if (sobel_result != NULL)
    17a8:	d0a6d017 	ldw	r2,-25792(gp)
    17ac:	10000326 	beq	r2,zero,17bc <init_sobel_arrays+0x9c>
		free(sobel_result);
    17b0:	d0a6d017 	ldw	r2,-25792(gp)
    17b4:	1009883a 	mov	r4,r2
    17b8:	00020780 	call	2078 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    17bc:	e0fffe17 	ldw	r3,-8(fp)
    17c0:	e0bfff17 	ldw	r2,-4(fp)
    17c4:	1885383a 	mul	r2,r3,r2
    17c8:	1009883a 	mov	r4,r2
    17cc:	00020640 	call	2064 <malloc>
    17d0:	d0a6d015 	stw	r2,-25792(gp)
	if (sobel_rgb565 != NULL)
    17d4:	d0a6d417 	ldw	r2,-25776(gp)
    17d8:	10000326 	beq	r2,zero,17e8 <init_sobel_arrays+0xc8>
		free(sobel_rgb565);
    17dc:	d0a6d417 	ldw	r2,-25776(gp)
    17e0:	1009883a 	mov	r4,r2
    17e4:	00020780 	call	2078 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    17e8:	e0fffe17 	ldw	r3,-8(fp)
    17ec:	e0bfff17 	ldw	r2,-4(fp)
    17f0:	1885383a 	mul	r2,r3,r2
    17f4:	1085883a 	add	r2,r2,r2
    17f8:	1009883a 	mov	r4,r2
    17fc:	00020640 	call	2064 <malloc>
    1800:	d0a6d415 	stw	r2,-25776(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1804:	e03ffd15 	stw	zero,-12(fp)
    1808:	00001606 	br	1864 <init_sobel_arrays+0x144>
		sobel_x_result[loop] = 0;
    180c:	d0e6d217 	ldw	r3,-25784(gp)
    1810:	e0bffd17 	ldw	r2,-12(fp)
    1814:	1085883a 	add	r2,r2,r2
    1818:	1885883a 	add	r2,r3,r2
    181c:	1000000d 	sth	zero,0(r2)
		sobel_y_result[loop] = 0;
    1820:	d0e6d317 	ldw	r3,-25780(gp)
    1824:	e0bffd17 	ldw	r2,-12(fp)
    1828:	1085883a 	add	r2,r2,r2
    182c:	1885883a 	add	r2,r3,r2
    1830:	1000000d 	sth	zero,0(r2)
		sobel_result[loop] = 0;
    1834:	d0e6d017 	ldw	r3,-25792(gp)
    1838:	e0bffd17 	ldw	r2,-12(fp)
    183c:	1885883a 	add	r2,r3,r2
    1840:	10000005 	stb	zero,0(r2)
		sobel_rgb565[loop] = 0;
    1844:	d0e6d417 	ldw	r3,-25776(gp)
    1848:	e0bffd17 	ldw	r2,-12(fp)
    184c:	1085883a 	add	r2,r2,r2
    1850:	1885883a 	add	r2,r3,r2
    1854:	1000000d 	sth	zero,0(r2)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1858:	e0bffd17 	ldw	r2,-12(fp)
    185c:	10800044 	addi	r2,r2,1
    1860:	e0bffd15 	stw	r2,-12(fp)
    1864:	e0fffe17 	ldw	r3,-8(fp)
    1868:	e0bfff17 	ldw	r2,-4(fp)
    186c:	1885383a 	mul	r2,r3,r2
    1870:	e0fffd17 	ldw	r3,-12(fp)
    1874:	18bfe516 	blt	r3,r2,180c <init_sobel_arrays+0xec>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    1878:	e037883a 	mov	sp,fp
    187c:	dfc00117 	ldw	ra,4(sp)
    1880:	df000017 	ldw	fp,0(sp)
    1884:	dec00204 	addi	sp,sp,8
    1888:	f800283a 	ret

0000188c <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char (*filter)[3],
                 unsigned int width ) {
    188c:	defff904 	addi	sp,sp,-28
    1890:	df000615 	stw	fp,24(sp)
    1894:	df000604 	addi	fp,sp,24
    1898:	e13ffc15 	stw	r4,-16(fp)
    189c:	e17ffd15 	stw	r5,-12(fp)
    18a0:	e1bffe15 	stw	r6,-8(fp)
    18a4:	e1ffff15 	stw	r7,-4(fp)
   short dy,dx;
   short result = 0;
    18a8:	e03ffb0d 	sth	zero,-20(fp)
   for (dy = -1 ; dy < 2 ; dy++) {
    18ac:	00bfffc4 	movi	r2,-1
    18b0:	e0bffa0d 	sth	r2,-24(fp)
    18b4:	00002d06 	br	196c <sobel_mac+0xe0>
      for (dx = -1 ; dx < 2 ; dx++) {
    18b8:	00bfffc4 	movi	r2,-1
    18bc:	e0bffa8d 	sth	r2,-22(fp)
    18c0:	00002406 	br	1954 <sobel_mac+0xc8>
         result += filter[dy+1][dx+1]*
    18c4:	e0bffa0f 	ldh	r2,-24(fp)
    18c8:	10c00044 	addi	r3,r2,1
    18cc:	1805883a 	mov	r2,r3
    18d0:	1085883a 	add	r2,r2,r2
    18d4:	10c5883a 	add	r2,r2,r3
    18d8:	e0ffff17 	ldw	r3,-4(fp)
    18dc:	1887883a 	add	r3,r3,r2
    18e0:	e0bffa8f 	ldh	r2,-22(fp)
    18e4:	10800044 	addi	r2,r2,1
    18e8:	1885883a 	add	r2,r3,r2
    18ec:	10800003 	ldbu	r2,0(r2)
    18f0:	10c03fcc 	andi	r3,r2,255
    18f4:	18c0201c 	xori	r3,r3,128
    18f8:	18ffe004 	addi	r3,r3,-128
                   pixels[(y+dy)*width+(x+dx)];
    18fc:	e13ffa0f 	ldh	r4,-24(fp)
    1900:	e0bffe17 	ldw	r2,-8(fp)
    1904:	2085883a 	add	r2,r4,r2
    1908:	1009883a 	mov	r4,r2
    190c:	e0800117 	ldw	r2,4(fp)
    1910:	2085383a 	mul	r2,r4,r2
    1914:	e17ffa8f 	ldh	r5,-22(fp)
    1918:	e13ffd17 	ldw	r4,-12(fp)
    191c:	2909883a 	add	r4,r5,r4
    1920:	1105883a 	add	r2,r2,r4
    1924:	e13ffc17 	ldw	r4,-16(fp)
    1928:	2085883a 	add	r2,r4,r2
    192c:	10800003 	ldbu	r2,0(r2)
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[dy+1][dx+1]*
    1930:	10803fcc 	andi	r2,r2,255
    1934:	1885383a 	mul	r2,r3,r2
    1938:	1007883a 	mov	r3,r2
    193c:	e0bffb0b 	ldhu	r2,-20(fp)
    1940:	1885883a 	add	r2,r3,r2
    1944:	e0bffb0d 	sth	r2,-20(fp)
                 const char (*filter)[3],
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
    1948:	e0bffa8b 	ldhu	r2,-22(fp)
    194c:	10800044 	addi	r2,r2,1
    1950:	e0bffa8d 	sth	r2,-22(fp)
    1954:	e0bffa8f 	ldh	r2,-22(fp)
    1958:	10800090 	cmplti	r2,r2,2
    195c:	103fd91e 	bne	r2,zero,18c4 <sobel_mac+0x38>
                 int y,
                 const char (*filter)[3],
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
    1960:	e0bffa0b 	ldhu	r2,-24(fp)
    1964:	10800044 	addi	r2,r2,1
    1968:	e0bffa0d 	sth	r2,-24(fp)
    196c:	e0bffa0f 	ldh	r2,-24(fp)
    1970:	10800090 	cmplti	r2,r2,2
    1974:	103fd01e 	bne	r2,zero,18b8 <sobel_mac+0x2c>
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[dy+1][dx+1]*
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    1978:	e0bffb0b 	ldhu	r2,-20(fp)
}
    197c:	e037883a 	mov	sp,fp
    1980:	df000017 	ldw	fp,0(sp)
    1984:	dec00104 	addi	sp,sp,4
    1988:	f800283a 	ret

0000198c <sobel_x>:

void sobel_x( unsigned char *source ) {
    198c:	defff904 	addi	sp,sp,-28
    1990:	dfc00615 	stw	ra,24(sp)
    1994:	df000515 	stw	fp,20(sp)
    1998:	dc000415 	stw	r16,16(sp)
    199c:	df000504 	addi	fp,sp,20
    19a0:	e13ffe15 	stw	r4,-8(fp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    19a4:	00800044 	movi	r2,1
    19a8:	e0bffd15 	stw	r2,-12(fp)
    19ac:	00001e06 	br	1a28 <sobel_x+0x9c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    19b0:	00800044 	movi	r2,1
    19b4:	e0bffc15 	stw	r2,-16(fp)
    19b8:	00001406 	br	1a0c <sobel_x+0x80>
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    19bc:	d0e6d217 	ldw	r3,-25784(gp)
    19c0:	d126cf17 	ldw	r4,-25796(gp)
    19c4:	e0bffd17 	ldw	r2,-12(fp)
    19c8:	2089383a 	mul	r4,r4,r2
    19cc:	e0bffc17 	ldw	r2,-16(fp)
    19d0:	2085883a 	add	r2,r4,r2
    19d4:	1085883a 	add	r2,r2,r2
    19d8:	18a1883a 	add	r16,r3,r2
    19dc:	d0a6cf17 	ldw	r2,-25796(gp)
    19e0:	d8800015 	stw	r2,0(sp)
    19e4:	e13ffe17 	ldw	r4,-8(fp)
    19e8:	e17ffc17 	ldw	r5,-16(fp)
    19ec:	e1bffd17 	ldw	r6,-12(fp)
    19f0:	01c00074 	movhi	r7,1
    19f4:	39c46004 	addi	r7,r7,4480
    19f8:	000188c0 	call	188c <sobel_mac>
    19fc:	8080000d 	sth	r2,0(r16)

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a00:	e0bffc17 	ldw	r2,-16(fp)
    1a04:	10800044 	addi	r2,r2,1
    1a08:	e0bffc15 	stw	r2,-16(fp)
    1a0c:	d0a6cf17 	ldw	r2,-25796(gp)
    1a10:	10bfffc4 	addi	r2,r2,-1
    1a14:	e0fffc17 	ldw	r3,-16(fp)
    1a18:	18bfe816 	blt	r3,r2,19bc <sobel_x+0x30>
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a1c:	e0bffd17 	ldw	r2,-12(fp)
    1a20:	10800044 	addi	r2,r2,1
    1a24:	e0bffd15 	stw	r2,-12(fp)
    1a28:	d0a6d117 	ldw	r2,-25788(gp)
    1a2c:	10bfffc4 	addi	r2,r2,-1
    1a30:	e0fffd17 	ldw	r3,-12(fp)
    1a34:	18bfde16 	blt	r3,r2,19b0 <sobel_x+0x24>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    1a38:	e6ffff04 	addi	sp,fp,-4
    1a3c:	dfc00217 	ldw	ra,8(sp)
    1a40:	df000117 	ldw	fp,4(sp)
    1a44:	dc000017 	ldw	r16,0(sp)
    1a48:	dec00304 	addi	sp,sp,12
    1a4c:	f800283a 	ret

00001a50 <sobel_x_with_rgb>:

void sobel_x_with_rgb( unsigned char *source ) {
    1a50:	defff904 	addi	sp,sp,-28
    1a54:	dfc00615 	stw	ra,24(sp)
    1a58:	df000515 	stw	fp,20(sp)
    1a5c:	df000504 	addi	fp,sp,20
    1a60:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a64:	00800044 	movi	r2,1
    1a68:	e0bffd15 	stw	r2,-12(fp)
    1a6c:	00003d06 	br	1b64 <sobel_x_with_rgb+0x114>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a70:	00800044 	movi	r2,1
    1a74:	e0bffc15 	stw	r2,-16(fp)
    1a78:	00003306 	br	1b48 <sobel_x_with_rgb+0xf8>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
    1a7c:	d0a6cf17 	ldw	r2,-25796(gp)
    1a80:	d8800015 	stw	r2,0(sp)
    1a84:	e13fff17 	ldw	r4,-4(fp)
    1a88:	e17ffc17 	ldw	r5,-16(fp)
    1a8c:	e1bffd17 	ldw	r6,-12(fp)
    1a90:	01c00074 	movhi	r7,1
    1a94:	39c46004 	addi	r7,r7,4480
    1a98:	000188c0 	call	188c <sobel_mac>
    1a9c:	e0bffe0d 	sth	r2,-8(fp)
          sobel_x_result[y*sobel_width+x] = result;
    1aa0:	d0e6d217 	ldw	r3,-25784(gp)
    1aa4:	d126cf17 	ldw	r4,-25796(gp)
    1aa8:	e0bffd17 	ldw	r2,-12(fp)
    1aac:	2089383a 	mul	r4,r4,r2
    1ab0:	e0bffc17 	ldw	r2,-16(fp)
    1ab4:	2085883a 	add	r2,r4,r2
    1ab8:	1085883a 	add	r2,r2,r2
    1abc:	1885883a 	add	r2,r3,r2
    1ac0:	e0fffe0b 	ldhu	r3,-8(fp)
    1ac4:	10c0000d 	sth	r3,0(r2)
          if (result < 0) {
    1ac8:	e0bffe0f 	ldh	r2,-8(fp)
    1acc:	10000e0e 	bge	r2,zero,1b08 <sobel_x_with_rgb+0xb8>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1ad0:	d0e6d417 	ldw	r3,-25776(gp)
    1ad4:	d126cf17 	ldw	r4,-25796(gp)
    1ad8:	e0bffd17 	ldw	r2,-12(fp)
    1adc:	2089383a 	mul	r4,r4,r2
    1ae0:	e0bffc17 	ldw	r2,-16(fp)
    1ae4:	2085883a 	add	r2,r4,r2
    1ae8:	1085883a 	add	r2,r2,r2
    1aec:	1885883a 	add	r2,r3,r2
    1af0:	e0fffe0f 	ldh	r3,-8(fp)
    1af4:	00c7c83a 	sub	r3,zero,r3
    1af8:	1807d0ba 	srai	r3,r3,2
    1afc:	1806917a 	slli	r3,r3,5
    1b00:	10c0000d 	sth	r3,0(r2)
    1b04:	00000d06 	br	1b3c <sobel_x_with_rgb+0xec>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1b08:	d0e6d417 	ldw	r3,-25776(gp)
    1b0c:	d126cf17 	ldw	r4,-25796(gp)
    1b10:	e0bffd17 	ldw	r2,-12(fp)
    1b14:	2089383a 	mul	r4,r4,r2
    1b18:	e0bffc17 	ldw	r2,-16(fp)
    1b1c:	2085883a 	add	r2,r4,r2
    1b20:	1085883a 	add	r2,r2,r2
    1b24:	1885883a 	add	r2,r3,r2
    1b28:	e0fffe0f 	ldh	r3,-8(fp)
    1b2c:	1807d0fa 	srai	r3,r3,3
    1b30:	18ffffcc 	andi	r3,r3,65535
    1b34:	180692fa 	slli	r3,r3,11
    1b38:	10c0000d 	sth	r3,0(r2)
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1b3c:	e0bffc17 	ldw	r2,-16(fp)
    1b40:	10800044 	addi	r2,r2,1
    1b44:	e0bffc15 	stw	r2,-16(fp)
    1b48:	d0a6cf17 	ldw	r2,-25796(gp)
    1b4c:	10bfffc4 	addi	r2,r2,-1
    1b50:	e0fffc17 	ldw	r3,-16(fp)
    1b54:	18bfc916 	blt	r3,r2,1a7c <sobel_x_with_rgb+0x2c>

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b58:	e0bffd17 	ldw	r2,-12(fp)
    1b5c:	10800044 	addi	r2,r2,1
    1b60:	e0bffd15 	stw	r2,-12(fp)
    1b64:	d0a6d117 	ldw	r2,-25788(gp)
    1b68:	10bfffc4 	addi	r2,r2,-1
    1b6c:	e0fffd17 	ldw	r3,-12(fp)
    1b70:	18bfbf16 	blt	r3,r2,1a70 <sobel_x_with_rgb+0x20>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1b74:	e037883a 	mov	sp,fp
    1b78:	dfc00117 	ldw	ra,4(sp)
    1b7c:	df000017 	ldw	fp,0(sp)
    1b80:	dec00204 	addi	sp,sp,8
    1b84:	f800283a 	ret

00001b88 <sobel_y>:

void sobel_y( unsigned char *source ) {
    1b88:	defff904 	addi	sp,sp,-28
    1b8c:	dfc00615 	stw	ra,24(sp)
    1b90:	df000515 	stw	fp,20(sp)
    1b94:	dc000415 	stw	r16,16(sp)
    1b98:	df000504 	addi	fp,sp,20
    1b9c:	e13ffe15 	stw	r4,-8(fp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1ba0:	00800044 	movi	r2,1
    1ba4:	e0bffd15 	stw	r2,-12(fp)
    1ba8:	00001e06 	br	1c24 <sobel_y+0x9c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bac:	00800044 	movi	r2,1
    1bb0:	e0bffc15 	stw	r2,-16(fp)
    1bb4:	00001406 	br	1c08 <sobel_y+0x80>
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1bb8:	d0e6d317 	ldw	r3,-25780(gp)
    1bbc:	d126cf17 	ldw	r4,-25796(gp)
    1bc0:	e0bffd17 	ldw	r2,-12(fp)
    1bc4:	2089383a 	mul	r4,r4,r2
    1bc8:	e0bffc17 	ldw	r2,-16(fp)
    1bcc:	2085883a 	add	r2,r4,r2
    1bd0:	1085883a 	add	r2,r2,r2
    1bd4:	18a1883a 	add	r16,r3,r2
    1bd8:	d0a6cf17 	ldw	r2,-25796(gp)
    1bdc:	d8800015 	stw	r2,0(sp)
    1be0:	e13ffe17 	ldw	r4,-8(fp)
    1be4:	e17ffc17 	ldw	r5,-16(fp)
    1be8:	e1bffd17 	ldw	r6,-12(fp)
    1bec:	01c00074 	movhi	r7,1
    1bf0:	39c46244 	addi	r7,r7,4489
    1bf4:	000188c0 	call	188c <sobel_mac>
    1bf8:	8080000d 	sth	r2,0(r16)

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bfc:	e0bffc17 	ldw	r2,-16(fp)
    1c00:	10800044 	addi	r2,r2,1
    1c04:	e0bffc15 	stw	r2,-16(fp)
    1c08:	d0a6cf17 	ldw	r2,-25796(gp)
    1c0c:	10bfffc4 	addi	r2,r2,-1
    1c10:	e0fffc17 	ldw	r3,-16(fp)
    1c14:	18bfe816 	blt	r3,r2,1bb8 <sobel_y+0x30>
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1c18:	e0bffd17 	ldw	r2,-12(fp)
    1c1c:	10800044 	addi	r2,r2,1
    1c20:	e0bffd15 	stw	r2,-12(fp)
    1c24:	d0a6d117 	ldw	r2,-25788(gp)
    1c28:	10bfffc4 	addi	r2,r2,-1
    1c2c:	e0fffd17 	ldw	r3,-12(fp)
    1c30:	18bfde16 	blt	r3,r2,1bac <sobel_y+0x24>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    1c34:	e6ffff04 	addi	sp,fp,-4
    1c38:	dfc00217 	ldw	ra,8(sp)
    1c3c:	df000117 	ldw	fp,4(sp)
    1c40:	dc000017 	ldw	r16,0(sp)
    1c44:	dec00304 	addi	sp,sp,12
    1c48:	f800283a 	ret

00001c4c <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    1c4c:	defff904 	addi	sp,sp,-28
    1c50:	dfc00615 	stw	ra,24(sp)
    1c54:	df000515 	stw	fp,20(sp)
    1c58:	df000504 	addi	fp,sp,20
    1c5c:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1c60:	00800044 	movi	r2,1
    1c64:	e0bffd15 	stw	r2,-12(fp)
    1c68:	00003d06 	br	1d60 <sobel_y_with_rgb+0x114>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1c6c:	00800044 	movi	r2,1
    1c70:	e0bffc15 	stw	r2,-16(fp)
    1c74:	00003306 	br	1d44 <sobel_y_with_rgb+0xf8>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
    1c78:	d0a6cf17 	ldw	r2,-25796(gp)
    1c7c:	d8800015 	stw	r2,0(sp)
    1c80:	e13fff17 	ldw	r4,-4(fp)
    1c84:	e17ffc17 	ldw	r5,-16(fp)
    1c88:	e1bffd17 	ldw	r6,-12(fp)
    1c8c:	01c00074 	movhi	r7,1
    1c90:	39c46244 	addi	r7,r7,4489
    1c94:	000188c0 	call	188c <sobel_mac>
    1c98:	e0bffe0d 	sth	r2,-8(fp)
         sobel_y_result[y*sobel_width+x] = result;
    1c9c:	d0e6d317 	ldw	r3,-25780(gp)
    1ca0:	d126cf17 	ldw	r4,-25796(gp)
    1ca4:	e0bffd17 	ldw	r2,-12(fp)
    1ca8:	2089383a 	mul	r4,r4,r2
    1cac:	e0bffc17 	ldw	r2,-16(fp)
    1cb0:	2085883a 	add	r2,r4,r2
    1cb4:	1085883a 	add	r2,r2,r2
    1cb8:	1885883a 	add	r2,r3,r2
    1cbc:	e0fffe0b 	ldhu	r3,-8(fp)
    1cc0:	10c0000d 	sth	r3,0(r2)
         if (result < 0) {
    1cc4:	e0bffe0f 	ldh	r2,-8(fp)
    1cc8:	10000e0e 	bge	r2,zero,1d04 <sobel_y_with_rgb+0xb8>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1ccc:	d0e6d417 	ldw	r3,-25776(gp)
    1cd0:	d126cf17 	ldw	r4,-25796(gp)
    1cd4:	e0bffd17 	ldw	r2,-12(fp)
    1cd8:	2089383a 	mul	r4,r4,r2
    1cdc:	e0bffc17 	ldw	r2,-16(fp)
    1ce0:	2085883a 	add	r2,r4,r2
    1ce4:	1085883a 	add	r2,r2,r2
    1ce8:	1885883a 	add	r2,r3,r2
    1cec:	e0fffe0f 	ldh	r3,-8(fp)
    1cf0:	00c7c83a 	sub	r3,zero,r3
    1cf4:	1807d0ba 	srai	r3,r3,2
    1cf8:	1806917a 	slli	r3,r3,5
    1cfc:	10c0000d 	sth	r3,0(r2)
    1d00:	00000d06 	br	1d38 <sobel_y_with_rgb+0xec>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1d04:	d0e6d417 	ldw	r3,-25776(gp)
    1d08:	d126cf17 	ldw	r4,-25796(gp)
    1d0c:	e0bffd17 	ldw	r2,-12(fp)
    1d10:	2089383a 	mul	r4,r4,r2
    1d14:	e0bffc17 	ldw	r2,-16(fp)
    1d18:	2085883a 	add	r2,r4,r2
    1d1c:	1085883a 	add	r2,r2,r2
    1d20:	1885883a 	add	r2,r3,r2
    1d24:	e0fffe0f 	ldh	r3,-8(fp)
    1d28:	1807d0fa 	srai	r3,r3,3
    1d2c:	18ffffcc 	andi	r3,r3,65535
    1d30:	180692fa 	slli	r3,r3,11
    1d34:	10c0000d 	sth	r3,0(r2)
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1d38:	e0bffc17 	ldw	r2,-16(fp)
    1d3c:	10800044 	addi	r2,r2,1
    1d40:	e0bffc15 	stw	r2,-16(fp)
    1d44:	d0a6cf17 	ldw	r2,-25796(gp)
    1d48:	10bfffc4 	addi	r2,r2,-1
    1d4c:	e0fffc17 	ldw	r3,-16(fp)
    1d50:	18bfc916 	blt	r3,r2,1c78 <sobel_y_with_rgb+0x2c>

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1d54:	e0bffd17 	ldw	r2,-12(fp)
    1d58:	10800044 	addi	r2,r2,1
    1d5c:	e0bffd15 	stw	r2,-12(fp)
    1d60:	d0a6d117 	ldw	r2,-25788(gp)
    1d64:	10bfffc4 	addi	r2,r2,-1
    1d68:	e0fffd17 	ldw	r3,-12(fp)
    1d6c:	18bfbf16 	blt	r3,r2,1c6c <sobel_y_with_rgb+0x20>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1d70:	e037883a 	mov	sp,fp
    1d74:	dfc00117 	ldw	ra,4(sp)
    1d78:	df000017 	ldw	fp,0(sp)
    1d7c:	dec00204 	addi	sp,sp,8
    1d80:	f800283a 	ret

00001d84 <sobel_threshold>:

void sobel_threshold(short threshold) {
    1d84:	defffa04 	addi	sp,sp,-24
    1d88:	df000515 	stw	fp,20(sp)
    1d8c:	df000504 	addi	fp,sp,20
    1d90:	2005883a 	mov	r2,r4
    1d94:	e0bfff0d 	sth	r2,-4(fp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1d98:	00800044 	movi	r2,1
    1d9c:	e0bffc15 	stw	r2,-16(fp)
    1da0:	00003406 	br	1e74 <sobel_threshold+0xf0>
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1da4:	00800044 	movi	r2,1
    1da8:	e0bffb15 	stw	r2,-20(fp)
    1dac:	00002a06 	br	1e58 <sobel_threshold+0xd4>
			arrayindex = (y*sobel_width)+x;
    1db0:	d0e6cf17 	ldw	r3,-25796(gp)
    1db4:	e0bffc17 	ldw	r2,-16(fp)
    1db8:	1887383a 	mul	r3,r3,r2
    1dbc:	e0bffb17 	ldw	r2,-20(fp)
    1dc0:	1885883a 	add	r2,r3,r2
    1dc4:	e0bffd15 	stw	r2,-12(fp)
			value = sobel_x_result[arrayindex];
    1dc8:	d0e6d217 	ldw	r3,-25784(gp)
    1dcc:	e0bffd17 	ldw	r2,-12(fp)
    1dd0:	1085883a 	add	r2,r2,r2
    1dd4:	1885883a 	add	r2,r3,r2
    1dd8:	1080000b 	ldhu	r2,0(r2)
    1ddc:	e0bffe0d 	sth	r2,-8(fp)
			sum = (value < 0) ? -value : value;
    1de0:	e0bffe0f 	ldh	r2,-8(fp)
    1de4:	1000010e 	bge	r2,zero,1dec <sobel_threshold+0x68>
    1de8:	0085c83a 	sub	r2,zero,r2
    1dec:	e0bffe8d 	sth	r2,-6(fp)
			value = sobel_y_result[arrayindex];
    1df0:	d0e6d317 	ldw	r3,-25780(gp)
    1df4:	e0bffd17 	ldw	r2,-12(fp)
    1df8:	1085883a 	add	r2,r2,r2
    1dfc:	1885883a 	add	r2,r3,r2
    1e00:	1080000b 	ldhu	r2,0(r2)
    1e04:	e0bffe0d 	sth	r2,-8(fp)
			sum += (value < 0) ? -value : value;
    1e08:	e0bffe0f 	ldh	r2,-8(fp)
    1e0c:	1000010e 	bge	r2,zero,1e14 <sobel_threshold+0x90>
    1e10:	0085c83a 	sub	r2,zero,r2
    1e14:	1007883a 	mov	r3,r2
    1e18:	e0bffe8b 	ldhu	r2,-6(fp)
    1e1c:	1885883a 	add	r2,r3,r2
    1e20:	e0bffe8d 	sth	r2,-6(fp)
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1e24:	d0e6d017 	ldw	r3,-25792(gp)
    1e28:	e0bffd17 	ldw	r2,-12(fp)
    1e2c:	1887883a 	add	r3,r3,r2
    1e30:	e0bffe8f 	ldh	r2,-6(fp)
    1e34:	e13fff0f 	ldh	r4,-4(fp)
    1e38:	2080020e 	bge	r4,r2,1e44 <sobel_threshold+0xc0>
    1e3c:	00bfffc4 	movi	r2,-1
    1e40:	00000106 	br	1e48 <sobel_threshold+0xc4>
    1e44:	0005883a 	mov	r2,zero
    1e48:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1e4c:	e0bffb17 	ldw	r2,-20(fp)
    1e50:	10800044 	addi	r2,r2,1
    1e54:	e0bffb15 	stw	r2,-20(fp)
    1e58:	d0a6cf17 	ldw	r2,-25796(gp)
    1e5c:	10bfffc4 	addi	r2,r2,-1
    1e60:	e0fffb17 	ldw	r3,-20(fp)
    1e64:	18bfd216 	blt	r3,r2,1db0 <sobel_threshold+0x2c>
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1e68:	e0bffc17 	ldw	r2,-16(fp)
    1e6c:	10800044 	addi	r2,r2,1
    1e70:	e0bffc15 	stw	r2,-16(fp)
    1e74:	d0a6d117 	ldw	r2,-25788(gp)
    1e78:	10bfffc4 	addi	r2,r2,-1
    1e7c:	e0fffc17 	ldw	r3,-16(fp)
    1e80:	18bfc816 	blt	r3,r2,1da4 <sobel_threshold+0x20>
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
    1e84:	e037883a 	mov	sp,fp
    1e88:	df000017 	ldw	fp,0(sp)
    1e8c:	dec00104 	addi	sp,sp,4
    1e90:	f800283a 	ret

00001e94 <GetSobel_rgb>:

unsigned short *GetSobel_rgb(void)
{
    1e94:	deffff04 	addi	sp,sp,-4
    1e98:	df000015 	stw	fp,0(sp)
    1e9c:	d839883a 	mov	fp,sp
  return sobel_rgb565;
    1ea0:	d0a6d417 	ldw	r2,-25776(gp)
}
    1ea4:	e037883a 	mov	sp,fp
    1ea8:	df000017 	ldw	fp,0(sp)
    1eac:	dec00104 	addi	sp,sp,4
    1eb0:	f800283a 	ret

00001eb4 <GetSobelResult>:

unsigned char *GetSobelResult(void)
{
    1eb4:	deffff04 	addi	sp,sp,-4
    1eb8:	df000015 	stw	fp,0(sp)
    1ebc:	d839883a 	mov	fp,sp
  return sobel_result;
    1ec0:	d0a6d017 	ldw	r2,-25792(gp)
}
    1ec4:	e037883a 	mov	sp,fp
    1ec8:	df000017 	ldw	fp,0(sp)
    1ecc:	dec00104 	addi	sp,sp,4
    1ed0:	f800283a 	ret

00001ed4 <vga_set_pointer>:
 * @todo no open tasks
 */

#include "vga.h"

void vga_set_pointer( void* image ) {
    1ed4:	defffe04 	addi	sp,sp,-8
    1ed8:	df000115 	stw	fp,4(sp)
    1edc:	df000104 	addi	fp,sp,4
    1ee0:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(VGA_DMA_BASE,0,(int)image);
    1ee4:	e0ffff17 	ldw	r3,-4(fp)
    1ee8:	00804034 	movhi	r2,256
    1eec:	10843404 	addi	r2,r2,4304
    1ef0:	10c00035 	stwio	r3,0(r2)
}
    1ef4:	e037883a 	mov	sp,fp
    1ef8:	df000017 	ldw	fp,0(sp)
    1efc:	dec00104 	addi	sp,sp,4
    1f00:	f800283a 	ret

00001f04 <vga_set_swap>:

void vga_set_swap(char swap) {
    1f04:	defffe04 	addi	sp,sp,-8
    1f08:	df000115 	stw	fp,4(sp)
    1f0c:	df000104 	addi	fp,sp,4
    1f10:	2005883a 	mov	r2,r4
    1f14:	e0bfff05 	stb	r2,-4(fp)
	IOWR_8DIRECT(VGA_DMA_BASE,4,swap);
    1f18:	e0ffff07 	ldb	r3,-4(fp)
    1f1c:	00804034 	movhi	r2,256
    1f20:	10843504 	addi	r2,r2,4308
    1f24:	10c00025 	stbio	r3,0(r2)
}
    1f28:	e037883a 	mov	sp,fp
    1f2c:	df000017 	ldw	fp,0(sp)
    1f30:	dec00104 	addi	sp,sp,4
    1f34:	f800283a 	ret

00001f38 <udivmodsi4>:
    1f38:	2900182e 	bgeu	r5,r4,1f9c <udivmodsi4+0x64>
    1f3c:	28001716 	blt	r5,zero,1f9c <udivmodsi4+0x64>
    1f40:	00800804 	movi	r2,32
    1f44:	00c00044 	movi	r3,1
    1f48:	00000206 	br	1f54 <udivmodsi4+0x1c>
    1f4c:	10001126 	beq	r2,zero,1f94 <udivmodsi4+0x5c>
    1f50:	28000516 	blt	r5,zero,1f68 <udivmodsi4+0x30>
    1f54:	294b883a 	add	r5,r5,r5
    1f58:	10bfffc4 	addi	r2,r2,-1
    1f5c:	18c7883a 	add	r3,r3,r3
    1f60:	293ffa36 	bltu	r5,r4,1f4c <udivmodsi4+0x14>
    1f64:	18000b26 	beq	r3,zero,1f94 <udivmodsi4+0x5c>
    1f68:	0005883a 	mov	r2,zero
    1f6c:	21400236 	bltu	r4,r5,1f78 <udivmodsi4+0x40>
    1f70:	2149c83a 	sub	r4,r4,r5
    1f74:	10c4b03a 	or	r2,r2,r3
    1f78:	1806d07a 	srli	r3,r3,1
    1f7c:	280ad07a 	srli	r5,r5,1
    1f80:	183ffa1e 	bne	r3,zero,1f6c <udivmodsi4+0x34>
    1f84:	3000011e 	bne	r6,zero,1f8c <udivmodsi4+0x54>
    1f88:	f800283a 	ret
    1f8c:	2005883a 	mov	r2,r4
    1f90:	f800283a 	ret
    1f94:	0005883a 	mov	r2,zero
    1f98:	003ffa06 	br	1f84 <udivmodsi4+0x4c>
    1f9c:	00c00044 	movi	r3,1
    1fa0:	003ff106 	br	1f68 <udivmodsi4+0x30>

00001fa4 <__divsi3>:
    1fa4:	defffe04 	addi	sp,sp,-8
    1fa8:	dfc00115 	stw	ra,4(sp)
    1fac:	dc000015 	stw	r16,0(sp)
    1fb0:	20000b16 	blt	r4,zero,1fe0 <__divsi3+0x3c>
    1fb4:	0021883a 	mov	r16,zero
    1fb8:	28000c16 	blt	r5,zero,1fec <__divsi3+0x48>
    1fbc:	000d883a 	mov	r6,zero
    1fc0:	0001f380 	call	1f38 <udivmodsi4>
    1fc4:	0407c83a 	sub	r3,zero,r16
    1fc8:	1884f03a 	xor	r2,r3,r2
    1fcc:	1405883a 	add	r2,r2,r16
    1fd0:	dfc00117 	ldw	ra,4(sp)
    1fd4:	dc000017 	ldw	r16,0(sp)
    1fd8:	dec00204 	addi	sp,sp,8
    1fdc:	f800283a 	ret
    1fe0:	0109c83a 	sub	r4,zero,r4
    1fe4:	04000044 	movi	r16,1
    1fe8:	283ff40e 	bge	r5,zero,1fbc <__divsi3+0x18>
    1fec:	014bc83a 	sub	r5,zero,r5
    1ff0:	8400005c 	xori	r16,r16,1
    1ff4:	003ff106 	br	1fbc <__divsi3+0x18>

00001ff8 <__modsi3>:
    1ff8:	defffd04 	addi	sp,sp,-12
    1ffc:	dfc00215 	stw	ra,8(sp)
    2000:	dc400115 	stw	r17,4(sp)
    2004:	dc000015 	stw	r16,0(sp)
    2008:	20000c16 	blt	r4,zero,203c <__modsi3+0x44>
    200c:	0023883a 	mov	r17,zero
    2010:	0021883a 	mov	r16,zero
    2014:	28000d16 	blt	r5,zero,204c <__modsi3+0x54>
    2018:	01800044 	movi	r6,1
    201c:	0001f380 	call	1f38 <udivmodsi4>
    2020:	1404f03a 	xor	r2,r2,r16
    2024:	8885883a 	add	r2,r17,r2
    2028:	dfc00217 	ldw	ra,8(sp)
    202c:	dc400117 	ldw	r17,4(sp)
    2030:	dc000017 	ldw	r16,0(sp)
    2034:	dec00304 	addi	sp,sp,12
    2038:	f800283a 	ret
    203c:	0109c83a 	sub	r4,zero,r4
    2040:	04400044 	movi	r17,1
    2044:	043fffc4 	movi	r16,-1
    2048:	283ff30e 	bge	r5,zero,2018 <__modsi3+0x20>
    204c:	014bc83a 	sub	r5,zero,r5
    2050:	003ff106 	br	2018 <__modsi3+0x20>

00002054 <__udivsi3>:
    2054:	000d883a 	mov	r6,zero
    2058:	0001f381 	jmpi	1f38 <udivmodsi4>

0000205c <__umodsi3>:
    205c:	01800044 	movi	r6,1
    2060:	0001f381 	jmpi	1f38 <udivmodsi4>

00002064 <malloc>:
    2064:	00800074 	movhi	r2,1
    2068:	108bd104 	addi	r2,r2,12100
    206c:	200b883a 	mov	r5,r4
    2070:	11000017 	ldw	r4,0(r2)
    2074:	000208c1 	jmpi	208c <_malloc_r>

00002078 <free>:
    2078:	00800074 	movhi	r2,1
    207c:	108bd104 	addi	r2,r2,12100
    2080:	200b883a 	mov	r5,r4
    2084:	11000017 	ldw	r4,0(r2)
    2088:	0006c481 	jmpi	6c48 <_free_r>

0000208c <_malloc_r>:
    208c:	defff504 	addi	sp,sp,-44
    2090:	dc800315 	stw	r18,12(sp)
    2094:	dfc00a15 	stw	ra,40(sp)
    2098:	df000915 	stw	fp,36(sp)
    209c:	ddc00815 	stw	r23,32(sp)
    20a0:	dd800715 	stw	r22,28(sp)
    20a4:	dd400615 	stw	r21,24(sp)
    20a8:	dd000515 	stw	r20,20(sp)
    20ac:	dcc00415 	stw	r19,16(sp)
    20b0:	dc400215 	stw	r17,8(sp)
    20b4:	dc000115 	stw	r16,4(sp)
    20b8:	288002c4 	addi	r2,r5,11
    20bc:	00c00584 	movi	r3,22
    20c0:	2025883a 	mov	r18,r4
    20c4:	18802a2e 	bgeu	r3,r2,2170 <_malloc_r+0xe4>
    20c8:	047ffe04 	movi	r17,-8
    20cc:	1462703a 	and	r17,r2,r17
    20d0:	88009e16 	blt	r17,zero,234c <_malloc_r+0x2c0>
    20d4:	89409d36 	bltu	r17,r5,234c <_malloc_r+0x2c0>
    20d8:	000e8e00 	call	e8e0 <__malloc_lock>
    20dc:	00807dc4 	movi	r2,503
    20e0:	14402736 	bltu	r2,r17,2180 <_malloc_r+0xf4>
    20e4:	8806d0fa 	srli	r3,r17,3
    20e8:	04c00074 	movhi	r19,1
    20ec:	9cc52304 	addi	r19,r19,5260
    20f0:	18c5883a 	add	r2,r3,r3
    20f4:	1085883a 	add	r2,r2,r2
    20f8:	1085883a 	add	r2,r2,r2
    20fc:	9885883a 	add	r2,r19,r2
    2100:	14000317 	ldw	r16,12(r2)
    2104:	80814a26 	beq	r16,r2,2630 <_malloc_r+0x5a4>
    2108:	80c00117 	ldw	r3,4(r16)
    210c:	81000317 	ldw	r4,12(r16)
    2110:	00bfff04 	movi	r2,-4
    2114:	1884703a 	and	r2,r3,r2
    2118:	81400217 	ldw	r5,8(r16)
    211c:	8085883a 	add	r2,r16,r2
    2120:	10c00117 	ldw	r3,4(r2)
    2124:	29000315 	stw	r4,12(r5)
    2128:	21400215 	stw	r5,8(r4)
    212c:	18c00054 	ori	r3,r3,1
    2130:	10c00115 	stw	r3,4(r2)
    2134:	9009883a 	mov	r4,r18
    2138:	000e9000 	call	e900 <__malloc_unlock>
    213c:	80800204 	addi	r2,r16,8
    2140:	dfc00a17 	ldw	ra,40(sp)
    2144:	df000917 	ldw	fp,36(sp)
    2148:	ddc00817 	ldw	r23,32(sp)
    214c:	dd800717 	ldw	r22,28(sp)
    2150:	dd400617 	ldw	r21,24(sp)
    2154:	dd000517 	ldw	r20,20(sp)
    2158:	dcc00417 	ldw	r19,16(sp)
    215c:	dc800317 	ldw	r18,12(sp)
    2160:	dc400217 	ldw	r17,8(sp)
    2164:	dc000117 	ldw	r16,4(sp)
    2168:	dec00b04 	addi	sp,sp,44
    216c:	f800283a 	ret
    2170:	04400404 	movi	r17,16
    2174:	89407536 	bltu	r17,r5,234c <_malloc_r+0x2c0>
    2178:	000e8e00 	call	e8e0 <__malloc_lock>
    217c:	003fd906 	br	20e4 <_malloc_r+0x58>
    2180:	8806d27a 	srli	r3,r17,9
    2184:	18007526 	beq	r3,zero,235c <_malloc_r+0x2d0>
    2188:	00800104 	movi	r2,4
    218c:	10c0ef36 	bltu	r2,r3,254c <_malloc_r+0x4c0>
    2190:	8806d1ba 	srli	r3,r17,6
    2194:	19c00e04 	addi	r7,r3,56
    2198:	39cb883a 	add	r5,r7,r7
    219c:	04c00074 	movhi	r19,1
    21a0:	294b883a 	add	r5,r5,r5
    21a4:	9cc52304 	addi	r19,r19,5260
    21a8:	294b883a 	add	r5,r5,r5
    21ac:	994b883a 	add	r5,r19,r5
    21b0:	2c000317 	ldw	r16,12(r5)
    21b4:	2c000e26 	beq	r5,r16,21f0 <_malloc_r+0x164>
    21b8:	80800117 	ldw	r2,4(r16)
    21bc:	01bfff04 	movi	r6,-4
    21c0:	010003c4 	movi	r4,15
    21c4:	1184703a 	and	r2,r2,r6
    21c8:	1447c83a 	sub	r3,r2,r17
    21cc:	20c00716 	blt	r4,r3,21ec <_malloc_r+0x160>
    21d0:	1800650e 	bge	r3,zero,2368 <_malloc_r+0x2dc>
    21d4:	84000317 	ldw	r16,12(r16)
    21d8:	2c000526 	beq	r5,r16,21f0 <_malloc_r+0x164>
    21dc:	80800117 	ldw	r2,4(r16)
    21e0:	1184703a 	and	r2,r2,r6
    21e4:	1447c83a 	sub	r3,r2,r17
    21e8:	20fff90e 	bge	r4,r3,21d0 <_malloc_r+0x144>
    21ec:	39ffffc4 	addi	r7,r7,-1
    21f0:	38c00044 	addi	r3,r7,1
    21f4:	01800074 	movhi	r6,1
    21f8:	9c000417 	ldw	r16,16(r19)
    21fc:	31852304 	addi	r6,r6,5260
    2200:	32400204 	addi	r9,r6,8
    2204:	82410326 	beq	r16,r9,2614 <_malloc_r+0x588>
    2208:	81000117 	ldw	r4,4(r16)
    220c:	00bfff04 	movi	r2,-4
    2210:	208e703a 	and	r7,r4,r2
    2214:	3c45c83a 	sub	r2,r7,r17
    2218:	010003c4 	movi	r4,15
    221c:	2080ee16 	blt	r4,r2,25d8 <_malloc_r+0x54c>
    2220:	32400515 	stw	r9,20(r6)
    2224:	32400415 	stw	r9,16(r6)
    2228:	1000510e 	bge	r2,zero,2370 <_malloc_r+0x2e4>
    222c:	00807fc4 	movi	r2,511
    2230:	11c0ce36 	bltu	r2,r7,256c <_malloc_r+0x4e0>
    2234:	3808d0fa 	srli	r4,r7,3
    2238:	01c00044 	movi	r7,1
    223c:	30800117 	ldw	r2,4(r6)
    2240:	210b883a 	add	r5,r4,r4
    2244:	294b883a 	add	r5,r5,r5
    2248:	2009d0ba 	srai	r4,r4,2
    224c:	294b883a 	add	r5,r5,r5
    2250:	298b883a 	add	r5,r5,r6
    2254:	2a000217 	ldw	r8,8(r5)
    2258:	3908983a 	sll	r4,r7,r4
    225c:	81400315 	stw	r5,12(r16)
    2260:	82000215 	stw	r8,8(r16)
    2264:	2088b03a 	or	r4,r4,r2
    2268:	2c000215 	stw	r16,8(r5)
    226c:	31000115 	stw	r4,4(r6)
    2270:	44000315 	stw	r16,12(r8)
    2274:	1805d0ba 	srai	r2,r3,2
    2278:	01400044 	movi	r5,1
    227c:	288a983a 	sll	r5,r5,r2
    2280:	21404336 	bltu	r4,r5,2390 <_malloc_r+0x304>
    2284:	2144703a 	and	r2,r4,r5
    2288:	10000a1e 	bne	r2,zero,22b4 <_malloc_r+0x228>
    228c:	00bfff04 	movi	r2,-4
    2290:	294b883a 	add	r5,r5,r5
    2294:	1886703a 	and	r3,r3,r2
    2298:	2144703a 	and	r2,r4,r5
    229c:	18c00104 	addi	r3,r3,4
    22a0:	1000041e 	bne	r2,zero,22b4 <_malloc_r+0x228>
    22a4:	294b883a 	add	r5,r5,r5
    22a8:	2144703a 	and	r2,r4,r5
    22ac:	18c00104 	addi	r3,r3,4
    22b0:	103ffc26 	beq	r2,zero,22a4 <_malloc_r+0x218>
    22b4:	023fff04 	movi	r8,-4
    22b8:	01c003c4 	movi	r7,15
    22bc:	18c5883a 	add	r2,r3,r3
    22c0:	1085883a 	add	r2,r2,r2
    22c4:	1085883a 	add	r2,r2,r2
    22c8:	9895883a 	add	r10,r19,r2
    22cc:	52c00304 	addi	r11,r10,12
    22d0:	1819883a 	mov	r12,r3
    22d4:	5c000017 	ldw	r16,0(r11)
    22d8:	59bffd04 	addi	r6,r11,-12
    22dc:	8180041e 	bne	r16,r6,22f0 <_malloc_r+0x264>
    22e0:	0000ce06 	br	261c <_malloc_r+0x590>
    22e4:	2000d70e 	bge	r4,zero,2644 <_malloc_r+0x5b8>
    22e8:	84000317 	ldw	r16,12(r16)
    22ec:	8180cb26 	beq	r16,r6,261c <_malloc_r+0x590>
    22f0:	80800117 	ldw	r2,4(r16)
    22f4:	1204703a 	and	r2,r2,r8
    22f8:	1449c83a 	sub	r4,r2,r17
    22fc:	393ff90e 	bge	r7,r4,22e4 <_malloc_r+0x258>
    2300:	80800317 	ldw	r2,12(r16)
    2304:	80c00217 	ldw	r3,8(r16)
    2308:	89400054 	ori	r5,r17,1
    230c:	81400115 	stw	r5,4(r16)
    2310:	18800315 	stw	r2,12(r3)
    2314:	10c00215 	stw	r3,8(r2)
    2318:	8463883a 	add	r17,r16,r17
    231c:	9c400515 	stw	r17,20(r19)
    2320:	9c400415 	stw	r17,16(r19)
    2324:	20800054 	ori	r2,r4,1
    2328:	88800115 	stw	r2,4(r17)
    232c:	8a400315 	stw	r9,12(r17)
    2330:	8a400215 	stw	r9,8(r17)
    2334:	8923883a 	add	r17,r17,r4
    2338:	89000015 	stw	r4,0(r17)
    233c:	9009883a 	mov	r4,r18
    2340:	000e9000 	call	e900 <__malloc_unlock>
    2344:	80800204 	addi	r2,r16,8
    2348:	003f7d06 	br	2140 <_malloc_r+0xb4>
    234c:	00800304 	movi	r2,12
    2350:	90800015 	stw	r2,0(r18)
    2354:	0005883a 	mov	r2,zero
    2358:	003f7906 	br	2140 <_malloc_r+0xb4>
    235c:	01401f84 	movi	r5,126
    2360:	01c00fc4 	movi	r7,63
    2364:	003f8d06 	br	219c <_malloc_r+0x110>
    2368:	81000317 	ldw	r4,12(r16)
    236c:	003f6a06 	br	2118 <_malloc_r+0x8c>
    2370:	81c5883a 	add	r2,r16,r7
    2374:	10c00117 	ldw	r3,4(r2)
    2378:	9009883a 	mov	r4,r18
    237c:	18c00054 	ori	r3,r3,1
    2380:	10c00115 	stw	r3,4(r2)
    2384:	000e9000 	call	e900 <__malloc_unlock>
    2388:	80800204 	addi	r2,r16,8
    238c:	003f6c06 	br	2140 <_malloc_r+0xb4>
    2390:	9c000217 	ldw	r16,8(r19)
    2394:	00bfff04 	movi	r2,-4
    2398:	85800117 	ldw	r22,4(r16)
    239c:	b0ac703a 	and	r22,r22,r2
    23a0:	b4400336 	bltu	r22,r17,23b0 <_malloc_r+0x324>
    23a4:	b445c83a 	sub	r2,r22,r17
    23a8:	00c003c4 	movi	r3,15
    23ac:	18805d16 	blt	r3,r2,2524 <_malloc_r+0x498>
    23b0:	05c00074 	movhi	r23,1
    23b4:	00800074 	movhi	r2,1
    23b8:	bdcbce04 	addi	r23,r23,12088
    23bc:	1092a504 	addi	r2,r2,19092
    23c0:	15400017 	ldw	r21,0(r2)
    23c4:	b9000017 	ldw	r4,0(r23)
    23c8:	00ffffc4 	movi	r3,-1
    23cc:	858d883a 	add	r6,r16,r22
    23d0:	8d6b883a 	add	r21,r17,r21
    23d4:	20c0e426 	beq	r4,r3,2768 <_malloc_r+0x6dc>
    23d8:	ad4403c4 	addi	r21,r21,4111
    23dc:	00fc0004 	movi	r3,-4096
    23e0:	a8ea703a 	and	r21,r21,r3
    23e4:	9009883a 	mov	r4,r18
    23e8:	a80b883a 	mov	r5,r21
    23ec:	d9800015 	stw	r6,0(sp)
    23f0:	00029580 	call	2958 <_sbrk_r>
    23f4:	00ffffc4 	movi	r3,-1
    23f8:	1029883a 	mov	r20,r2
    23fc:	d9800017 	ldw	r6,0(sp)
    2400:	10c0a426 	beq	r2,r3,2694 <_malloc_r+0x608>
    2404:	1180a236 	bltu	r2,r6,2690 <_malloc_r+0x604>
    2408:	07000074 	movhi	fp,1
    240c:	e712b304 	addi	fp,fp,19148
    2410:	e0c00017 	ldw	r3,0(fp)
    2414:	a8c7883a 	add	r3,r21,r3
    2418:	e0c00015 	stw	r3,0(fp)
    241c:	3500da26 	beq	r6,r20,2788 <_malloc_r+0x6fc>
    2420:	b9000017 	ldw	r4,0(r23)
    2424:	00bfffc4 	movi	r2,-1
    2428:	2080e426 	beq	r4,r2,27bc <_malloc_r+0x730>
    242c:	a185c83a 	sub	r2,r20,r6
    2430:	1885883a 	add	r2,r3,r2
    2434:	e0800015 	stw	r2,0(fp)
    2438:	a0c001cc 	andi	r3,r20,7
    243c:	1800b526 	beq	r3,zero,2714 <_malloc_r+0x688>
    2440:	a0e9c83a 	sub	r20,r20,r3
    2444:	00840204 	movi	r2,4104
    2448:	a5000204 	addi	r20,r20,8
    244c:	10c7c83a 	sub	r3,r2,r3
    2450:	a545883a 	add	r2,r20,r21
    2454:	1083ffcc 	andi	r2,r2,4095
    2458:	18abc83a 	sub	r21,r3,r2
    245c:	9009883a 	mov	r4,r18
    2460:	a80b883a 	mov	r5,r21
    2464:	00029580 	call	2958 <_sbrk_r>
    2468:	00ffffc4 	movi	r3,-1
    246c:	10c0d026 	beq	r2,r3,27b0 <_malloc_r+0x724>
    2470:	1507c83a 	sub	r3,r2,r20
    2474:	a8c7883a 	add	r3,r21,r3
    2478:	18c00054 	ori	r3,r3,1
    247c:	e0800017 	ldw	r2,0(fp)
    2480:	9d000215 	stw	r20,8(r19)
    2484:	a0c00115 	stw	r3,4(r20)
    2488:	a887883a 	add	r3,r21,r2
    248c:	e0c00015 	stw	r3,0(fp)
    2490:	84c00e26 	beq	r16,r19,24cc <_malloc_r+0x440>
    2494:	018003c4 	movi	r6,15
    2498:	3580a02e 	bgeu	r6,r22,271c <_malloc_r+0x690>
    249c:	81400117 	ldw	r5,4(r16)
    24a0:	013ffe04 	movi	r4,-8
    24a4:	b0bffd04 	addi	r2,r22,-12
    24a8:	1104703a 	and	r2,r2,r4
    24ac:	2900004c 	andi	r4,r5,1
    24b0:	1108b03a 	or	r4,r2,r4
    24b4:	81000115 	stw	r4,4(r16)
    24b8:	01400144 	movi	r5,5
    24bc:	8089883a 	add	r4,r16,r2
    24c0:	21400115 	stw	r5,4(r4)
    24c4:	21400215 	stw	r5,8(r4)
    24c8:	3080c036 	bltu	r6,r2,27cc <_malloc_r+0x740>
    24cc:	00800074 	movhi	r2,1
    24d0:	1092a404 	addi	r2,r2,19088
    24d4:	11000017 	ldw	r4,0(r2)
    24d8:	20c0012e 	bgeu	r4,r3,24e0 <_malloc_r+0x454>
    24dc:	10c00015 	stw	r3,0(r2)
    24e0:	00800074 	movhi	r2,1
    24e4:	1092a304 	addi	r2,r2,19084
    24e8:	11000017 	ldw	r4,0(r2)
    24ec:	9c000217 	ldw	r16,8(r19)
    24f0:	20c0012e 	bgeu	r4,r3,24f8 <_malloc_r+0x46c>
    24f4:	10c00015 	stw	r3,0(r2)
    24f8:	80c00117 	ldw	r3,4(r16)
    24fc:	00bfff04 	movi	r2,-4
    2500:	1886703a 	and	r3,r3,r2
    2504:	1c45c83a 	sub	r2,r3,r17
    2508:	1c400236 	bltu	r3,r17,2514 <_malloc_r+0x488>
    250c:	00c003c4 	movi	r3,15
    2510:	18800416 	blt	r3,r2,2524 <_malloc_r+0x498>
    2514:	9009883a 	mov	r4,r18
    2518:	000e9000 	call	e900 <__malloc_unlock>
    251c:	0005883a 	mov	r2,zero
    2520:	003f0706 	br	2140 <_malloc_r+0xb4>
    2524:	88c00054 	ori	r3,r17,1
    2528:	80c00115 	stw	r3,4(r16)
    252c:	8463883a 	add	r17,r16,r17
    2530:	10800054 	ori	r2,r2,1
    2534:	9c400215 	stw	r17,8(r19)
    2538:	88800115 	stw	r2,4(r17)
    253c:	9009883a 	mov	r4,r18
    2540:	000e9000 	call	e900 <__malloc_unlock>
    2544:	80800204 	addi	r2,r16,8
    2548:	003efd06 	br	2140 <_malloc_r+0xb4>
    254c:	00800504 	movi	r2,20
    2550:	10c0482e 	bgeu	r2,r3,2674 <_malloc_r+0x5e8>
    2554:	00801504 	movi	r2,84
    2558:	10c06836 	bltu	r2,r3,26fc <_malloc_r+0x670>
    255c:	8806d33a 	srli	r3,r17,12
    2560:	19c01b84 	addi	r7,r3,110
    2564:	39cb883a 	add	r5,r7,r7
    2568:	003f0c06 	br	219c <_malloc_r+0x110>
    256c:	3804d27a 	srli	r2,r7,9
    2570:	01000104 	movi	r4,4
    2574:	2080422e 	bgeu	r4,r2,2680 <_malloc_r+0x5f4>
    2578:	01000504 	movi	r4,20
    257c:	20807c36 	bltu	r4,r2,2770 <_malloc_r+0x6e4>
    2580:	110016c4 	addi	r4,r2,91
    2584:	210b883a 	add	r5,r4,r4
    2588:	294b883a 	add	r5,r5,r5
    258c:	294b883a 	add	r5,r5,r5
    2590:	994b883a 	add	r5,r19,r5
    2594:	28800217 	ldw	r2,8(r5)
    2598:	02000074 	movhi	r8,1
    259c:	42052304 	addi	r8,r8,5260
    25a0:	11406326 	beq	r2,r5,2730 <_malloc_r+0x6a4>
    25a4:	01bfff04 	movi	r6,-4
    25a8:	11000117 	ldw	r4,4(r2)
    25ac:	2188703a 	and	r4,r4,r6
    25b0:	3900022e 	bgeu	r7,r4,25bc <_malloc_r+0x530>
    25b4:	10800217 	ldw	r2,8(r2)
    25b8:	28bffb1e 	bne	r5,r2,25a8 <_malloc_r+0x51c>
    25bc:	11800317 	ldw	r6,12(r2)
    25c0:	99000117 	ldw	r4,4(r19)
    25c4:	81800315 	stw	r6,12(r16)
    25c8:	80800215 	stw	r2,8(r16)
    25cc:	34000215 	stw	r16,8(r6)
    25d0:	14000315 	stw	r16,12(r2)
    25d4:	003f2706 	br	2274 <_malloc_r+0x1e8>
    25d8:	88c00054 	ori	r3,r17,1
    25dc:	80c00115 	stw	r3,4(r16)
    25e0:	8463883a 	add	r17,r16,r17
    25e4:	34400515 	stw	r17,20(r6)
    25e8:	34400415 	stw	r17,16(r6)
    25ec:	10c00054 	ori	r3,r2,1
    25f0:	8a400315 	stw	r9,12(r17)
    25f4:	8a400215 	stw	r9,8(r17)
    25f8:	88c00115 	stw	r3,4(r17)
    25fc:	88a3883a 	add	r17,r17,r2
    2600:	88800015 	stw	r2,0(r17)
    2604:	9009883a 	mov	r4,r18
    2608:	000e9000 	call	e900 <__malloc_unlock>
    260c:	80800204 	addi	r2,r16,8
    2610:	003ecb06 	br	2140 <_malloc_r+0xb4>
    2614:	31000117 	ldw	r4,4(r6)
    2618:	003f1606 	br	2274 <_malloc_r+0x1e8>
    261c:	63000044 	addi	r12,r12,1
    2620:	608000cc 	andi	r2,r12,3
    2624:	5ac00204 	addi	r11,r11,8
    2628:	103f2a1e 	bne	r2,zero,22d4 <_malloc_r+0x248>
    262c:	00002106 	br	26b4 <_malloc_r+0x628>
    2630:	80800204 	addi	r2,r16,8
    2634:	84000517 	ldw	r16,20(r16)
    2638:	143eb31e 	bne	r2,r16,2108 <_malloc_r+0x7c>
    263c:	18c00084 	addi	r3,r3,2
    2640:	003eec06 	br	21f4 <_malloc_r+0x168>
    2644:	8085883a 	add	r2,r16,r2
    2648:	10c00117 	ldw	r3,4(r2)
    264c:	81000317 	ldw	r4,12(r16)
    2650:	81400217 	ldw	r5,8(r16)
    2654:	18c00054 	ori	r3,r3,1
    2658:	10c00115 	stw	r3,4(r2)
    265c:	29000315 	stw	r4,12(r5)
    2660:	21400215 	stw	r5,8(r4)
    2664:	9009883a 	mov	r4,r18
    2668:	000e9000 	call	e900 <__malloc_unlock>
    266c:	80800204 	addi	r2,r16,8
    2670:	003eb306 	br	2140 <_malloc_r+0xb4>
    2674:	19c016c4 	addi	r7,r3,91
    2678:	39cb883a 	add	r5,r7,r7
    267c:	003ec706 	br	219c <_malloc_r+0x110>
    2680:	3804d1ba 	srli	r2,r7,6
    2684:	11000e04 	addi	r4,r2,56
    2688:	210b883a 	add	r5,r4,r4
    268c:	003fbe06 	br	2588 <_malloc_r+0x4fc>
    2690:	84ff5d26 	beq	r16,r19,2408 <_malloc_r+0x37c>
    2694:	9c000217 	ldw	r16,8(r19)
    2698:	00bfff04 	movi	r2,-4
    269c:	80c00117 	ldw	r3,4(r16)
    26a0:	1886703a 	and	r3,r3,r2
    26a4:	003f9706 	br	2504 <_malloc_r+0x478>
    26a8:	52800017 	ldw	r10,0(r10)
    26ac:	18ffffc4 	addi	r3,r3,-1
    26b0:	50805c1e 	bne	r10,r2,2824 <_malloc_r+0x798>
    26b4:	190000cc 	andi	r4,r3,3
    26b8:	50bffe04 	addi	r2,r10,-8
    26bc:	203ffa1e 	bne	r4,zero,26a8 <_malloc_r+0x61c>
    26c0:	98800117 	ldw	r2,4(r19)
    26c4:	0146303a 	nor	r3,zero,r5
    26c8:	1884703a 	and	r2,r3,r2
    26cc:	98800115 	stw	r2,4(r19)
    26d0:	294b883a 	add	r5,r5,r5
    26d4:	117f2e36 	bltu	r2,r5,2390 <_malloc_r+0x304>
    26d8:	283f2d26 	beq	r5,zero,2390 <_malloc_r+0x304>
    26dc:	1146703a 	and	r3,r2,r5
    26e0:	1800521e 	bne	r3,zero,282c <_malloc_r+0x7a0>
    26e4:	6007883a 	mov	r3,r12
    26e8:	294b883a 	add	r5,r5,r5
    26ec:	1148703a 	and	r4,r2,r5
    26f0:	18c00104 	addi	r3,r3,4
    26f4:	203ffc26 	beq	r4,zero,26e8 <_malloc_r+0x65c>
    26f8:	003ef006 	br	22bc <_malloc_r+0x230>
    26fc:	00805504 	movi	r2,340
    2700:	10c01336 	bltu	r2,r3,2750 <_malloc_r+0x6c4>
    2704:	8806d3fa 	srli	r3,r17,15
    2708:	19c01dc4 	addi	r7,r3,119
    270c:	39cb883a 	add	r5,r7,r7
    2710:	003ea206 	br	219c <_malloc_r+0x110>
    2714:	00c40004 	movi	r3,4096
    2718:	003f4d06 	br	2450 <_malloc_r+0x3c4>
    271c:	00800044 	movi	r2,1
    2720:	a0800115 	stw	r2,4(r20)
    2724:	a021883a 	mov	r16,r20
    2728:	0007883a 	mov	r3,zero
    272c:	003f7506 	br	2504 <_malloc_r+0x478>
    2730:	200bd0ba 	srai	r5,r4,2
    2734:	01800044 	movi	r6,1
    2738:	41000117 	ldw	r4,4(r8)
    273c:	314a983a 	sll	r5,r6,r5
    2740:	100d883a 	mov	r6,r2
    2744:	2908b03a 	or	r4,r5,r4
    2748:	41000115 	stw	r4,4(r8)
    274c:	003f9d06 	br	25c4 <_malloc_r+0x538>
    2750:	00815504 	movi	r2,1364
    2754:	10c01336 	bltu	r2,r3,27a4 <_malloc_r+0x718>
    2758:	8806d4ba 	srli	r3,r17,18
    275c:	19c01f04 	addi	r7,r3,124
    2760:	39cb883a 	add	r5,r7,r7
    2764:	003e8d06 	br	219c <_malloc_r+0x110>
    2768:	ad400404 	addi	r21,r21,16
    276c:	003f1d06 	br	23e4 <_malloc_r+0x358>
    2770:	01001504 	movi	r4,84
    2774:	20801c36 	bltu	r4,r2,27e8 <_malloc_r+0x75c>
    2778:	3804d33a 	srli	r2,r7,12
    277c:	11001b84 	addi	r4,r2,110
    2780:	210b883a 	add	r5,r4,r4
    2784:	003f8006 	br	2588 <_malloc_r+0x4fc>
    2788:	3083ffcc 	andi	r2,r6,4095
    278c:	103f241e 	bne	r2,zero,2420 <_malloc_r+0x394>
    2790:	99000217 	ldw	r4,8(r19)
    2794:	ad85883a 	add	r2,r21,r22
    2798:	10800054 	ori	r2,r2,1
    279c:	20800115 	stw	r2,4(r4)
    27a0:	003f4a06 	br	24cc <_malloc_r+0x440>
    27a4:	01403f04 	movi	r5,252
    27a8:	01c01f84 	movi	r7,126
    27ac:	003e7b06 	br	219c <_malloc_r+0x110>
    27b0:	00c00044 	movi	r3,1
    27b4:	002b883a 	mov	r21,zero
    27b8:	003f3006 	br	247c <_malloc_r+0x3f0>
    27bc:	00800074 	movhi	r2,1
    27c0:	108bce04 	addi	r2,r2,12088
    27c4:	15000015 	stw	r20,0(r2)
    27c8:	003f1b06 	br	2438 <_malloc_r+0x3ac>
    27cc:	9009883a 	mov	r4,r18
    27d0:	81400204 	addi	r5,r16,8
    27d4:	0006c480 	call	6c48 <_free_r>
    27d8:	00800074 	movhi	r2,1
    27dc:	1092b304 	addi	r2,r2,19148
    27e0:	10c00017 	ldw	r3,0(r2)
    27e4:	003f3906 	br	24cc <_malloc_r+0x440>
    27e8:	01005504 	movi	r4,340
    27ec:	20800436 	bltu	r4,r2,2800 <_malloc_r+0x774>
    27f0:	3804d3fa 	srli	r2,r7,15
    27f4:	11001dc4 	addi	r4,r2,119
    27f8:	210b883a 	add	r5,r4,r4
    27fc:	003f6206 	br	2588 <_malloc_r+0x4fc>
    2800:	01015504 	movi	r4,1364
    2804:	20800436 	bltu	r4,r2,2818 <_malloc_r+0x78c>
    2808:	3804d4ba 	srli	r2,r7,18
    280c:	11001f04 	addi	r4,r2,124
    2810:	210b883a 	add	r5,r4,r4
    2814:	003f5c06 	br	2588 <_malloc_r+0x4fc>
    2818:	01403f04 	movi	r5,252
    281c:	01001f84 	movi	r4,126
    2820:	003f5906 	br	2588 <_malloc_r+0x4fc>
    2824:	98800117 	ldw	r2,4(r19)
    2828:	003fa906 	br	26d0 <_malloc_r+0x644>
    282c:	6007883a 	mov	r3,r12
    2830:	003ea206 	br	22bc <_malloc_r+0x230>

00002834 <_printf_r>:
    2834:	defffd04 	addi	sp,sp,-12
    2838:	dfc00015 	stw	ra,0(sp)
    283c:	d9800115 	stw	r6,4(sp)
    2840:	d9c00215 	stw	r7,8(sp)
    2844:	280d883a 	mov	r6,r5
    2848:	21400217 	ldw	r5,8(r4)
    284c:	d9c00104 	addi	r7,sp,4
    2850:	0002a440 	call	2a44 <___vfprintf_internal_r>
    2854:	dfc00017 	ldw	ra,0(sp)
    2858:	dec00304 	addi	sp,sp,12
    285c:	f800283a 	ret

00002860 <printf>:
    2860:	defffc04 	addi	sp,sp,-16
    2864:	dfc00015 	stw	ra,0(sp)
    2868:	d9400115 	stw	r5,4(sp)
    286c:	d9800215 	stw	r6,8(sp)
    2870:	d9c00315 	stw	r7,12(sp)
    2874:	00800074 	movhi	r2,1
    2878:	108bd104 	addi	r2,r2,12100
    287c:	10800017 	ldw	r2,0(r2)
    2880:	200b883a 	mov	r5,r4
    2884:	d9800104 	addi	r6,sp,4
    2888:	11000217 	ldw	r4,8(r2)
    288c:	00049940 	call	4994 <__vfprintf_internal>
    2890:	dfc00017 	ldw	ra,0(sp)
    2894:	dec00404 	addi	sp,sp,16
    2898:	f800283a 	ret

0000289c <_puts_r>:
    289c:	defff604 	addi	sp,sp,-40
    28a0:	dc000715 	stw	r16,28(sp)
    28a4:	2021883a 	mov	r16,r4
    28a8:	2809883a 	mov	r4,r5
    28ac:	dc400815 	stw	r17,32(sp)
    28b0:	dfc00915 	stw	ra,36(sp)
    28b4:	2823883a 	mov	r17,r5
    28b8:	00029ac0 	call	29ac <strlen>
    28bc:	81400217 	ldw	r5,8(r16)
    28c0:	11000044 	addi	r4,r2,1
    28c4:	d8800115 	stw	r2,4(sp)
    28c8:	00800074 	movhi	r2,1
    28cc:	2980030b 	ldhu	r6,12(r5)
    28d0:	10846504 	addi	r2,r2,4500
    28d4:	d8800215 	stw	r2,8(sp)
    28d8:	00800044 	movi	r2,1
    28dc:	d8800315 	stw	r2,12(sp)
    28e0:	00800084 	movi	r2,2
    28e4:	d8800515 	stw	r2,20(sp)
    28e8:	dc400015 	stw	r17,0(sp)
    28ec:	d9000615 	stw	r4,24(sp)
    28f0:	dec00415 	stw	sp,16(sp)
    28f4:	3088000c 	andi	r2,r6,8192
    28f8:	1000061e 	bne	r2,zero,2914 <_puts_r+0x78>
    28fc:	29001917 	ldw	r4,100(r5)
    2900:	00b7ffc4 	movi	r2,-8193
    2904:	31880014 	ori	r6,r6,8192
    2908:	2084703a 	and	r2,r4,r2
    290c:	2980030d 	sth	r6,12(r5)
    2910:	28801915 	stw	r2,100(r5)
    2914:	8009883a 	mov	r4,r16
    2918:	d9800404 	addi	r6,sp,16
    291c:	0006f380 	call	6f38 <__sfvwrite_r>
    2920:	1000061e 	bne	r2,zero,293c <_puts_r+0xa0>
    2924:	00800284 	movi	r2,10
    2928:	dfc00917 	ldw	ra,36(sp)
    292c:	dc400817 	ldw	r17,32(sp)
    2930:	dc000717 	ldw	r16,28(sp)
    2934:	dec00a04 	addi	sp,sp,40
    2938:	f800283a 	ret
    293c:	00bfffc4 	movi	r2,-1
    2940:	003ff906 	br	2928 <_puts_r+0x8c>

00002944 <puts>:
    2944:	00800074 	movhi	r2,1
    2948:	108bd104 	addi	r2,r2,12100
    294c:	200b883a 	mov	r5,r4
    2950:	11000017 	ldw	r4,0(r2)
    2954:	000289c1 	jmpi	289c <_puts_r>

00002958 <_sbrk_r>:
    2958:	defffd04 	addi	sp,sp,-12
    295c:	dc000015 	stw	r16,0(sp)
    2960:	04000074 	movhi	r16,1
    2964:	dc400115 	stw	r17,4(sp)
    2968:	8412a604 	addi	r16,r16,19096
    296c:	2023883a 	mov	r17,r4
    2970:	2809883a 	mov	r4,r5
    2974:	dfc00215 	stw	ra,8(sp)
    2978:	80000015 	stw	zero,0(r16)
    297c:	000eacc0 	call	eacc <sbrk>
    2980:	00ffffc4 	movi	r3,-1
    2984:	10c00526 	beq	r2,r3,299c <_sbrk_r+0x44>
    2988:	dfc00217 	ldw	ra,8(sp)
    298c:	dc400117 	ldw	r17,4(sp)
    2990:	dc000017 	ldw	r16,0(sp)
    2994:	dec00304 	addi	sp,sp,12
    2998:	f800283a 	ret
    299c:	80c00017 	ldw	r3,0(r16)
    29a0:	183ff926 	beq	r3,zero,2988 <_sbrk_r+0x30>
    29a4:	88c00015 	stw	r3,0(r17)
    29a8:	003ff706 	br	2988 <_sbrk_r+0x30>

000029ac <strlen>:
    29ac:	208000cc 	andi	r2,r4,3
    29b0:	10002026 	beq	r2,zero,2a34 <strlen+0x88>
    29b4:	20800007 	ldb	r2,0(r4)
    29b8:	10002026 	beq	r2,zero,2a3c <strlen+0x90>
    29bc:	2005883a 	mov	r2,r4
    29c0:	00000206 	br	29cc <strlen+0x20>
    29c4:	10c00007 	ldb	r3,0(r2)
    29c8:	18001826 	beq	r3,zero,2a2c <strlen+0x80>
    29cc:	10800044 	addi	r2,r2,1
    29d0:	10c000cc 	andi	r3,r2,3
    29d4:	183ffb1e 	bne	r3,zero,29c4 <strlen+0x18>
    29d8:	10c00017 	ldw	r3,0(r2)
    29dc:	01ffbff4 	movhi	r7,65279
    29e0:	39ffbfc4 	addi	r7,r7,-257
    29e4:	00ca303a 	nor	r5,zero,r3
    29e8:	01a02074 	movhi	r6,32897
    29ec:	19c7883a 	add	r3,r3,r7
    29f0:	31a02004 	addi	r6,r6,-32640
    29f4:	1946703a 	and	r3,r3,r5
    29f8:	1986703a 	and	r3,r3,r6
    29fc:	1800091e 	bne	r3,zero,2a24 <strlen+0x78>
    2a00:	10800104 	addi	r2,r2,4
    2a04:	10c00017 	ldw	r3,0(r2)
    2a08:	19cb883a 	add	r5,r3,r7
    2a0c:	00c6303a 	nor	r3,zero,r3
    2a10:	28c6703a 	and	r3,r5,r3
    2a14:	1986703a 	and	r3,r3,r6
    2a18:	183ff926 	beq	r3,zero,2a00 <strlen+0x54>
    2a1c:	00000106 	br	2a24 <strlen+0x78>
    2a20:	10800044 	addi	r2,r2,1
    2a24:	10c00007 	ldb	r3,0(r2)
    2a28:	183ffd1e 	bne	r3,zero,2a20 <strlen+0x74>
    2a2c:	1105c83a 	sub	r2,r2,r4
    2a30:	f800283a 	ret
    2a34:	2005883a 	mov	r2,r4
    2a38:	003fe706 	br	29d8 <strlen+0x2c>
    2a3c:	0005883a 	mov	r2,zero
    2a40:	f800283a 	ret

00002a44 <___vfprintf_internal_r>:
    2a44:	deffb604 	addi	sp,sp,-296
    2a48:	dfc04915 	stw	ra,292(sp)
    2a4c:	ddc04715 	stw	r23,284(sp)
    2a50:	dd804615 	stw	r22,280(sp)
    2a54:	282f883a 	mov	r23,r5
    2a58:	202d883a 	mov	r22,r4
    2a5c:	d9802a15 	stw	r6,168(sp)
    2a60:	d9c02d15 	stw	r7,180(sp)
    2a64:	df004815 	stw	fp,288(sp)
    2a68:	dd404515 	stw	r21,276(sp)
    2a6c:	dd004415 	stw	r20,272(sp)
    2a70:	dcc04315 	stw	r19,268(sp)
    2a74:	dc804215 	stw	r18,264(sp)
    2a78:	dc404115 	stw	r17,260(sp)
    2a7c:	dc004015 	stw	r16,256(sp)
    2a80:	000762c0 	call	762c <_localeconv_r>
    2a84:	10800017 	ldw	r2,0(r2)
    2a88:	1009883a 	mov	r4,r2
    2a8c:	d8803515 	stw	r2,212(sp)
    2a90:	00029ac0 	call	29ac <strlen>
    2a94:	d8803815 	stw	r2,224(sp)
    2a98:	b0000226 	beq	r22,zero,2aa4 <___vfprintf_internal_r+0x60>
    2a9c:	b0800e17 	ldw	r2,56(r22)
    2aa0:	1000e126 	beq	r2,zero,2e28 <___vfprintf_internal_r+0x3e4>
    2aa4:	b880030b 	ldhu	r2,12(r23)
    2aa8:	10c8000c 	andi	r3,r2,8192
    2aac:	1800061e 	bne	r3,zero,2ac8 <___vfprintf_internal_r+0x84>
    2ab0:	b9001917 	ldw	r4,100(r23)
    2ab4:	00f7ffc4 	movi	r3,-8193
    2ab8:	10880014 	ori	r2,r2,8192
    2abc:	20c6703a 	and	r3,r4,r3
    2ac0:	b880030d 	sth	r2,12(r23)
    2ac4:	b8c01915 	stw	r3,100(r23)
    2ac8:	10c0020c 	andi	r3,r2,8
    2acc:	1800a726 	beq	r3,zero,2d6c <___vfprintf_internal_r+0x328>
    2ad0:	b8c00417 	ldw	r3,16(r23)
    2ad4:	1800a526 	beq	r3,zero,2d6c <___vfprintf_internal_r+0x328>
    2ad8:	1080068c 	andi	r2,r2,26
    2adc:	00c00284 	movi	r3,10
    2ae0:	10c0aa26 	beq	r2,r3,2d8c <___vfprintf_internal_r+0x348>
    2ae4:	dac01e04 	addi	r11,sp,120
    2ae8:	db001dc4 	addi	r12,sp,119
    2aec:	d8800404 	addi	r2,sp,16
    2af0:	05000074 	movhi	r20,1
    2af4:	dac02815 	stw	r11,160(sp)
    2af8:	5b17c83a 	sub	r11,r11,r12
    2afc:	a5047684 	addi	r20,r20,4570
    2b00:	db002915 	stw	r12,164(sp)
    2b04:	d8801e15 	stw	r2,120(sp)
    2b08:	d8002015 	stw	zero,128(sp)
    2b0c:	d8001f15 	stw	zero,124(sp)
    2b10:	d8003315 	stw	zero,204(sp)
    2b14:	d8003715 	stw	zero,220(sp)
    2b18:	d8003915 	stw	zero,228(sp)
    2b1c:	1011883a 	mov	r8,r2
    2b20:	d8003b15 	stw	zero,236(sp)
    2b24:	d8003a15 	stw	zero,232(sp)
    2b28:	d8002f15 	stw	zero,188(sp)
    2b2c:	dac03c15 	stw	r11,240(sp)
    2b30:	db002a17 	ldw	r12,168(sp)
    2b34:	60800007 	ldb	r2,0(r12)
    2b38:	1000be26 	beq	r2,zero,2e34 <___vfprintf_internal_r+0x3f0>
    2b3c:	00c00944 	movi	r3,37
    2b40:	10c0bc26 	beq	r2,r3,2e34 <___vfprintf_internal_r+0x3f0>
    2b44:	6021883a 	mov	r16,r12
    2b48:	00000106 	br	2b50 <___vfprintf_internal_r+0x10c>
    2b4c:	10c08426 	beq	r2,r3,2d60 <___vfprintf_internal_r+0x31c>
    2b50:	84000044 	addi	r16,r16,1
    2b54:	80800007 	ldb	r2,0(r16)
    2b58:	103ffc1e 	bne	r2,zero,2b4c <___vfprintf_internal_r+0x108>
    2b5c:	dac02a17 	ldw	r11,168(sp)
    2b60:	82e3c83a 	sub	r17,r16,r11
    2b64:	88000f26 	beq	r17,zero,2ba4 <___vfprintf_internal_r+0x160>
    2b68:	d8c02017 	ldw	r3,128(sp)
    2b6c:	d8801f17 	ldw	r2,124(sp)
    2b70:	dac02a17 	ldw	r11,168(sp)
    2b74:	1c47883a 	add	r3,r3,r17
    2b78:	10800044 	addi	r2,r2,1
    2b7c:	d8c02015 	stw	r3,128(sp)
    2b80:	42c00015 	stw	r11,0(r8)
    2b84:	44400115 	stw	r17,4(r8)
    2b88:	d8801f15 	stw	r2,124(sp)
    2b8c:	00c001c4 	movi	r3,7
    2b90:	18809316 	blt	r3,r2,2de0 <___vfprintf_internal_r+0x39c>
    2b94:	42000204 	addi	r8,r8,8
    2b98:	db002f17 	ldw	r12,188(sp)
    2b9c:	6459883a 	add	r12,r12,r17
    2ba0:	db002f15 	stw	r12,188(sp)
    2ba4:	80800007 	ldb	r2,0(r16)
    2ba8:	10009426 	beq	r2,zero,2dfc <___vfprintf_internal_r+0x3b8>
    2bac:	80800044 	addi	r2,r16,1
    2bb0:	84000047 	ldb	r16,1(r16)
    2bb4:	d8002785 	stb	zero,158(sp)
    2bb8:	000d883a 	mov	r6,zero
    2bbc:	027fffc4 	movi	r9,-1
    2bc0:	d8002e15 	stw	zero,184(sp)
    2bc4:	0023883a 	mov	r17,zero
    2bc8:	01001604 	movi	r4,88
    2bcc:	01400244 	movi	r5,9
    2bd0:	02800a84 	movi	r10,42
    2bd4:	01c01b04 	movi	r7,108
    2bd8:	10c00044 	addi	r3,r2,1
    2bdc:	80bff804 	addi	r2,r16,-32
    2be0:	2082cd36 	bltu	r4,r2,3718 <___vfprintf_internal_r+0xcd4>
    2be4:	100490ba 	slli	r2,r2,2
    2be8:	02c00034 	movhi	r11,0
    2bec:	5acaff04 	addi	r11,r11,11260
    2bf0:	12c5883a 	add	r2,r2,r11
    2bf4:	10800017 	ldw	r2,0(r2)
    2bf8:	1000683a 	jmp	r2
    2bfc:	00003530 	cmpltui	zero,zero,212
    2c00:	00003718 	cmpnei	zero,zero,220
    2c04:	00003718 	cmpnei	zero,zero,220
    2c08:	00003680 	call	368 <init_camera+0xdc>
    2c0c:	00003718 	cmpnei	zero,zero,220
    2c10:	00003718 	cmpnei	zero,zero,220
    2c14:	00003718 	cmpnei	zero,zero,220
    2c18:	00003718 	cmpnei	zero,zero,220
    2c1c:	00003718 	cmpnei	zero,zero,220
    2c20:	00003718 	cmpnei	zero,zero,220
    2c24:	00003550 	cmplti	zero,zero,213
    2c28:	0000357c 	xorhi	zero,zero,213
    2c2c:	00003718 	cmpnei	zero,zero,220
    2c30:	00002e3c 	xorhi	zero,zero,184
    2c34:	00002e4c 	andi	zero,zero,185
    2c38:	00003718 	cmpnei	zero,zero,220
    2c3c:	00002e8c 	andi	zero,zero,186
    2c40:	00002e9c 	xori	zero,zero,186
    2c44:	00002e9c 	xori	zero,zero,186
    2c48:	00002e9c 	xori	zero,zero,186
    2c4c:	00002e9c 	xori	zero,zero,186
    2c50:	00002e9c 	xori	zero,zero,186
    2c54:	00002e9c 	xori	zero,zero,186
    2c58:	00002e9c 	xori	zero,zero,186
    2c5c:	00002e9c 	xori	zero,zero,186
    2c60:	00002e9c 	xori	zero,zero,186
    2c64:	00003718 	cmpnei	zero,zero,220
    2c68:	00003718 	cmpnei	zero,zero,220
    2c6c:	00003718 	cmpnei	zero,zero,220
    2c70:	00003718 	cmpnei	zero,zero,220
    2c74:	00003718 	cmpnei	zero,zero,220
    2c78:	00003718 	cmpnei	zero,zero,220
    2c7c:	00003718 	cmpnei	zero,zero,220
    2c80:	00003718 	cmpnei	zero,zero,220
    2c84:	00003718 	cmpnei	zero,zero,220
    2c88:	00003718 	cmpnei	zero,zero,220
    2c8c:	00002ed0 	cmplti	zero,zero,187
    2c90:	00003340 	call	334 <init_camera+0xa8>
    2c94:	00003718 	cmpnei	zero,zero,220
    2c98:	00003340 	call	334 <init_camera+0xa8>
    2c9c:	00003718 	cmpnei	zero,zero,220
    2ca0:	00003718 	cmpnei	zero,zero,220
    2ca4:	00003718 	cmpnei	zero,zero,220
    2ca8:	00003718 	cmpnei	zero,zero,220
    2cac:	0000342c 	andhi	zero,zero,208
    2cb0:	00003718 	cmpnei	zero,zero,220
    2cb4:	00003718 	cmpnei	zero,zero,220
    2cb8:	000032d4 	movui	zero,203
    2cbc:	00003718 	cmpnei	zero,zero,220
    2cc0:	00003718 	cmpnei	zero,zero,220
    2cc4:	00003718 	cmpnei	zero,zero,220
    2cc8:	00003718 	cmpnei	zero,zero,220
    2ccc:	00003718 	cmpnei	zero,zero,220
    2cd0:	00003310 	cmplti	zero,zero,204
    2cd4:	00003718 	cmpnei	zero,zero,220
    2cd8:	00003718 	cmpnei	zero,zero,220
    2cdc:	000034d4 	movui	zero,211
    2ce0:	00003718 	cmpnei	zero,zero,220
    2ce4:	00003718 	cmpnei	zero,zero,220
    2ce8:	00003718 	cmpnei	zero,zero,220
    2cec:	00003718 	cmpnei	zero,zero,220
    2cf0:	00003718 	cmpnei	zero,zero,220
    2cf4:	00003718 	cmpnei	zero,zero,220
    2cf8:	00003718 	cmpnei	zero,zero,220
    2cfc:	00003718 	cmpnei	zero,zero,220
    2d00:	00003718 	cmpnei	zero,zero,220
    2d04:	00003718 	cmpnei	zero,zero,220
    2d08:	0000358c 	andi	zero,zero,214
    2d0c:	0000343c 	xorhi	zero,zero,208
    2d10:	00003340 	call	334 <init_camera+0xa8>
    2d14:	00003340 	call	334 <init_camera+0xa8>
    2d18:	00003340 	call	334 <init_camera+0xa8>
    2d1c:	0000347c 	xorhi	zero,zero,209
    2d20:	0000343c 	xorhi	zero,zero,208
    2d24:	00003718 	cmpnei	zero,zero,220
    2d28:	00003718 	cmpnei	zero,zero,220
    2d2c:	0000348c 	andi	zero,zero,210
    2d30:	00003718 	cmpnei	zero,zero,220
    2d34:	000034a0 	cmpeqi	zero,zero,210
    2d38:	000036dc 	xori	zero,zero,219
    2d3c:	000033e4 	muli	zero,zero,207
    2d40:	00003690 	cmplti	zero,zero,218
    2d44:	00003718 	cmpnei	zero,zero,220
    2d48:	000035cc 	andi	zero,zero,215
    2d4c:	00003718 	cmpnei	zero,zero,220
    2d50:	000036a0 	cmpeqi	zero,zero,218
    2d54:	00003718 	cmpnei	zero,zero,220
    2d58:	00003718 	cmpnei	zero,zero,220
    2d5c:	00003640 	call	364 <init_camera+0xd8>
    2d60:	db002a17 	ldw	r12,168(sp)
    2d64:	8323c83a 	sub	r17,r16,r12
    2d68:	003f7e06 	br	2b64 <___vfprintf_internal_r+0x120>
    2d6c:	b009883a 	mov	r4,r22
    2d70:	b80b883a 	mov	r5,r23
    2d74:	0004a740 	call	4a74 <__swsetup_r>
    2d78:	10000c1e 	bne	r2,zero,2dac <___vfprintf_internal_r+0x368>
    2d7c:	b880030b 	ldhu	r2,12(r23)
    2d80:	00c00284 	movi	r3,10
    2d84:	1080068c 	andi	r2,r2,26
    2d88:	10ff561e 	bne	r2,r3,2ae4 <___vfprintf_internal_r+0xa0>
    2d8c:	b880038f 	ldh	r2,14(r23)
    2d90:	103f5416 	blt	r2,zero,2ae4 <___vfprintf_internal_r+0xa0>
    2d94:	d9802a17 	ldw	r6,168(sp)
    2d98:	d9c02d17 	ldw	r7,180(sp)
    2d9c:	b009883a 	mov	r4,r22
    2da0:	b80b883a 	mov	r5,r23
    2da4:	00049b80 	call	49b8 <__sbprintf>
    2da8:	00000106 	br	2db0 <___vfprintf_internal_r+0x36c>
    2dac:	00bfffc4 	movi	r2,-1
    2db0:	dfc04917 	ldw	ra,292(sp)
    2db4:	df004817 	ldw	fp,288(sp)
    2db8:	ddc04717 	ldw	r23,284(sp)
    2dbc:	dd804617 	ldw	r22,280(sp)
    2dc0:	dd404517 	ldw	r21,276(sp)
    2dc4:	dd004417 	ldw	r20,272(sp)
    2dc8:	dcc04317 	ldw	r19,268(sp)
    2dcc:	dc804217 	ldw	r18,264(sp)
    2dd0:	dc404117 	ldw	r17,260(sp)
    2dd4:	dc004017 	ldw	r16,256(sp)
    2dd8:	dec04a04 	addi	sp,sp,296
    2ddc:	f800283a 	ret
    2de0:	b009883a 	mov	r4,r22
    2de4:	b80b883a 	mov	r5,r23
    2de8:	d9801e04 	addi	r6,sp,120
    2dec:	00095100 	call	9510 <__sprint_r>
    2df0:	1000081e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    2df4:	da000404 	addi	r8,sp,16
    2df8:	003f6706 	br	2b98 <___vfprintf_internal_r+0x154>
    2dfc:	d8802017 	ldw	r2,128(sp)
    2e00:	10000426 	beq	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    2e04:	b009883a 	mov	r4,r22
    2e08:	b80b883a 	mov	r5,r23
    2e0c:	d9801e04 	addi	r6,sp,120
    2e10:	00095100 	call	9510 <__sprint_r>
    2e14:	b880030b 	ldhu	r2,12(r23)
    2e18:	1080100c 	andi	r2,r2,64
    2e1c:	103fe31e 	bne	r2,zero,2dac <___vfprintf_internal_r+0x368>
    2e20:	d8802f17 	ldw	r2,188(sp)
    2e24:	003fe206 	br	2db0 <___vfprintf_internal_r+0x36c>
    2e28:	b009883a 	mov	r4,r22
    2e2c:	0006ad40 	call	6ad4 <__sinit>
    2e30:	003f1c06 	br	2aa4 <___vfprintf_internal_r+0x60>
    2e34:	dc002a17 	ldw	r16,168(sp)
    2e38:	003f5a06 	br	2ba4 <___vfprintf_internal_r+0x160>
    2e3c:	1805883a 	mov	r2,r3
    2e40:	8c400114 	ori	r17,r17,4
    2e44:	1c000007 	ldb	r16,0(r3)
    2e48:	003f6306 	br	2bd8 <___vfprintf_internal_r+0x194>
    2e4c:	1c000007 	ldb	r16,0(r3)
    2e50:	18800044 	addi	r2,r3,1
    2e54:	8286ad26 	beq	r16,r10,490c <___vfprintf_internal_r+0x1ec8>
    2e58:	82fff404 	addi	r11,r16,-48
    2e5c:	1007883a 	mov	r3,r2
    2e60:	0013883a 	mov	r9,zero
    2e64:	2aff5d36 	bltu	r5,r11,2bdc <___vfprintf_internal_r+0x198>
    2e68:	1c000007 	ldb	r16,0(r3)
    2e6c:	4a4002a4 	muli	r9,r9,10
    2e70:	18c00044 	addi	r3,r3,1
    2e74:	5a53883a 	add	r9,r11,r9
    2e78:	82fff404 	addi	r11,r16,-48
    2e7c:	2afffa2e 	bgeu	r5,r11,2e68 <___vfprintf_internal_r+0x424>
    2e80:	483f560e 	bge	r9,zero,2bdc <___vfprintf_internal_r+0x198>
    2e84:	027fffc4 	movi	r9,-1
    2e88:	003f5406 	br	2bdc <___vfprintf_internal_r+0x198>
    2e8c:	8c402014 	ori	r17,r17,128
    2e90:	1805883a 	mov	r2,r3
    2e94:	1c000007 	ldb	r16,0(r3)
    2e98:	003f4f06 	br	2bd8 <___vfprintf_internal_r+0x194>
    2e9c:	1805883a 	mov	r2,r3
    2ea0:	d8002e15 	stw	zero,184(sp)
    2ea4:	82fff404 	addi	r11,r16,-48
    2ea8:	0019883a 	mov	r12,zero
    2eac:	14000007 	ldb	r16,0(r2)
    2eb0:	630002a4 	muli	r12,r12,10
    2eb4:	18c00044 	addi	r3,r3,1
    2eb8:	1805883a 	mov	r2,r3
    2ebc:	62d9883a 	add	r12,r12,r11
    2ec0:	82fff404 	addi	r11,r16,-48
    2ec4:	2afff92e 	bgeu	r5,r11,2eac <___vfprintf_internal_r+0x468>
    2ec8:	db002e15 	stw	r12,184(sp)
    2ecc:	003f4306 	br	2bdc <___vfprintf_internal_r+0x198>
    2ed0:	8c400414 	ori	r17,r17,16
    2ed4:	d8c02a15 	stw	r3,168(sp)
    2ed8:	d9802785 	stb	r6,158(sp)
    2edc:	8880080c 	andi	r2,r17,32
    2ee0:	d8c02d17 	ldw	r3,180(sp)
    2ee4:	10015a26 	beq	r2,zero,3450 <___vfprintf_internal_r+0xa0c>
    2ee8:	db002d17 	ldw	r12,180(sp)
    2eec:	18800117 	ldw	r2,4(r3)
    2ef0:	1cc00017 	ldw	r19,0(r3)
    2ef4:	63000204 	addi	r12,r12,8
    2ef8:	db002d15 	stw	r12,180(sp)
    2efc:	1039883a 	mov	fp,r2
    2f00:	10044516 	blt	r2,zero,4018 <___vfprintf_internal_r+0x15d4>
    2f04:	dd402783 	ldbu	r21,158(sp)
    2f08:	da403215 	stw	r9,200(sp)
    2f0c:	00800044 	movi	r2,1
    2f10:	9f06b03a 	or	r3,r19,fp
    2f14:	48000216 	blt	r9,zero,2f20 <___vfprintf_internal_r+0x4dc>
    2f18:	013fdfc4 	movi	r4,-129
    2f1c:	8922703a 	and	r17,r17,r4
    2f20:	1802071e 	bne	r3,zero,3740 <___vfprintf_internal_r+0xcfc>
    2f24:	4802fa26 	beq	r9,zero,3b10 <___vfprintf_internal_r+0x10cc>
    2f28:	10803fcc 	andi	r2,r2,255
    2f2c:	00c00044 	movi	r3,1
    2f30:	10c22926 	beq	r2,r3,37d8 <___vfprintf_internal_r+0xd94>
    2f34:	00c00084 	movi	r3,2
    2f38:	10c31726 	beq	r2,r3,3b98 <___vfprintf_internal_r+0x1154>
    2f3c:	d8c01e04 	addi	r3,sp,120
    2f40:	9808d0fa 	srli	r4,r19,3
    2f44:	e00a977a 	slli	r5,fp,29
    2f48:	e038d0fa 	srli	fp,fp,3
    2f4c:	9cc001cc 	andi	r19,r19,7
    2f50:	98800c04 	addi	r2,r19,48
    2f54:	18ffffc4 	addi	r3,r3,-1
    2f58:	2926b03a 	or	r19,r5,r4
    2f5c:	18800005 	stb	r2,0(r3)
    2f60:	9f08b03a 	or	r4,r19,fp
    2f64:	203ff61e 	bne	r4,zero,2f40 <___vfprintf_internal_r+0x4fc>
    2f68:	8900004c 	andi	r4,r17,1
    2f6c:	d8c03115 	stw	r3,196(sp)
    2f70:	2003931e 	bne	r4,zero,3dc0 <___vfprintf_internal_r+0x137c>
    2f74:	dac02817 	ldw	r11,160(sp)
    2f78:	58e5c83a 	sub	r18,r11,r3
    2f7c:	9005883a 	mov	r2,r18
    2f80:	9240010e 	bge	r18,r9,2f88 <___vfprintf_internal_r+0x544>
    2f84:	4805883a 	mov	r2,r9
    2f88:	d8802b15 	stw	r2,172(sp)
    2f8c:	d8003415 	stw	zero,208(sp)
    2f90:	a8803fcc 	andi	r2,r21,255
    2f94:	1080201c 	xori	r2,r2,128
    2f98:	10bfe004 	addi	r2,r2,-128
    2f9c:	10000326 	beq	r2,zero,2fac <___vfprintf_internal_r+0x568>
    2fa0:	db002b17 	ldw	r12,172(sp)
    2fa4:	63000044 	addi	r12,r12,1
    2fa8:	db002b15 	stw	r12,172(sp)
    2fac:	88c0008c 	andi	r3,r17,2
    2fb0:	d8c02c15 	stw	r3,176(sp)
    2fb4:	18000326 	beq	r3,zero,2fc4 <___vfprintf_internal_r+0x580>
    2fb8:	dac02b17 	ldw	r11,172(sp)
    2fbc:	5ac00084 	addi	r11,r11,2
    2fc0:	dac02b15 	stw	r11,172(sp)
    2fc4:	8b00210c 	andi	r12,r17,132
    2fc8:	db003015 	stw	r12,192(sp)
    2fcc:	6001da1e 	bne	r12,zero,3738 <___vfprintf_internal_r+0xcf4>
    2fd0:	dac02e17 	ldw	r11,184(sp)
    2fd4:	db002b17 	ldw	r12,172(sp)
    2fd8:	5b39c83a 	sub	fp,r11,r12
    2fdc:	0701d60e 	bge	zero,fp,3738 <___vfprintf_internal_r+0xcf4>
    2fe0:	02400404 	movi	r9,16
    2fe4:	d8c02017 	ldw	r3,128(sp)
    2fe8:	d8801f17 	ldw	r2,124(sp)
    2fec:	4f053c0e 	bge	r9,fp,44e0 <___vfprintf_internal_r+0x1a9c>
    2ff0:	01400074 	movhi	r5,1
    2ff4:	29447a84 	addi	r5,r5,4586
    2ff8:	d9403615 	stw	r5,216(sp)
    2ffc:	482b883a 	mov	r21,r9
    3000:	04c001c4 	movi	r19,7
    3004:	00000306 	br	3014 <___vfprintf_internal_r+0x5d0>
    3008:	e73ffc04 	addi	fp,fp,-16
    300c:	42000204 	addi	r8,r8,8
    3010:	af00130e 	bge	r21,fp,3060 <___vfprintf_internal_r+0x61c>
    3014:	02c00074 	movhi	r11,1
    3018:	18c00404 	addi	r3,r3,16
    301c:	10800044 	addi	r2,r2,1
    3020:	5ac47a84 	addi	r11,r11,4586
    3024:	42c00015 	stw	r11,0(r8)
    3028:	45400115 	stw	r21,4(r8)
    302c:	d8c02015 	stw	r3,128(sp)
    3030:	d8801f15 	stw	r2,124(sp)
    3034:	98bff40e 	bge	r19,r2,3008 <___vfprintf_internal_r+0x5c4>
    3038:	b009883a 	mov	r4,r22
    303c:	b80b883a 	mov	r5,r23
    3040:	d9801e04 	addi	r6,sp,120
    3044:	00095100 	call	9510 <__sprint_r>
    3048:	103f721e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    304c:	e73ffc04 	addi	fp,fp,-16
    3050:	d8c02017 	ldw	r3,128(sp)
    3054:	d8801f17 	ldw	r2,124(sp)
    3058:	da000404 	addi	r8,sp,16
    305c:	af3fed16 	blt	r21,fp,3014 <___vfprintf_internal_r+0x5d0>
    3060:	db003617 	ldw	r12,216(sp)
    3064:	e0c7883a 	add	r3,fp,r3
    3068:	10800044 	addi	r2,r2,1
    306c:	43000015 	stw	r12,0(r8)
    3070:	47000115 	stw	fp,4(r8)
    3074:	d8c02015 	stw	r3,128(sp)
    3078:	d8801f15 	stw	r2,124(sp)
    307c:	010001c4 	movi	r4,7
    3080:	20830e16 	blt	r4,r2,3cbc <___vfprintf_internal_r+0x1278>
    3084:	d8802787 	ldb	r2,158(sp)
    3088:	42000204 	addi	r8,r8,8
    308c:	10000c26 	beq	r2,zero,30c0 <___vfprintf_internal_r+0x67c>
    3090:	d8801f17 	ldw	r2,124(sp)
    3094:	d9002784 	addi	r4,sp,158
    3098:	18c00044 	addi	r3,r3,1
    309c:	10800044 	addi	r2,r2,1
    30a0:	41000015 	stw	r4,0(r8)
    30a4:	01000044 	movi	r4,1
    30a8:	41000115 	stw	r4,4(r8)
    30ac:	d8c02015 	stw	r3,128(sp)
    30b0:	d8801f15 	stw	r2,124(sp)
    30b4:	010001c4 	movi	r4,7
    30b8:	2082a716 	blt	r4,r2,3b58 <___vfprintf_internal_r+0x1114>
    30bc:	42000204 	addi	r8,r8,8
    30c0:	dac02c17 	ldw	r11,176(sp)
    30c4:	58000c26 	beq	r11,zero,30f8 <___vfprintf_internal_r+0x6b4>
    30c8:	d8801f17 	ldw	r2,124(sp)
    30cc:	d9002704 	addi	r4,sp,156
    30d0:	18c00084 	addi	r3,r3,2
    30d4:	10800044 	addi	r2,r2,1
    30d8:	41000015 	stw	r4,0(r8)
    30dc:	01000084 	movi	r4,2
    30e0:	41000115 	stw	r4,4(r8)
    30e4:	d8c02015 	stw	r3,128(sp)
    30e8:	d8801f15 	stw	r2,124(sp)
    30ec:	010001c4 	movi	r4,7
    30f0:	2082a116 	blt	r4,r2,3b78 <___vfprintf_internal_r+0x1134>
    30f4:	42000204 	addi	r8,r8,8
    30f8:	db003017 	ldw	r12,192(sp)
    30fc:	00802004 	movi	r2,128
    3100:	60820326 	beq	r12,r2,3910 <___vfprintf_internal_r+0xecc>
    3104:	db003217 	ldw	r12,200(sp)
    3108:	64abc83a 	sub	r21,r12,r18
    310c:	0540260e 	bge	zero,r21,31a8 <___vfprintf_internal_r+0x764>
    3110:	07000404 	movi	fp,16
    3114:	d8801f17 	ldw	r2,124(sp)
    3118:	e544570e 	bge	fp,r21,4278 <___vfprintf_internal_r+0x1834>
    311c:	01400074 	movhi	r5,1
    3120:	29447684 	addi	r5,r5,4570
    3124:	d9402c15 	stw	r5,176(sp)
    3128:	04c001c4 	movi	r19,7
    312c:	00000306 	br	313c <___vfprintf_internal_r+0x6f8>
    3130:	ad7ffc04 	addi	r21,r21,-16
    3134:	42000204 	addi	r8,r8,8
    3138:	e540110e 	bge	fp,r21,3180 <___vfprintf_internal_r+0x73c>
    313c:	18c00404 	addi	r3,r3,16
    3140:	10800044 	addi	r2,r2,1
    3144:	45000015 	stw	r20,0(r8)
    3148:	47000115 	stw	fp,4(r8)
    314c:	d8c02015 	stw	r3,128(sp)
    3150:	d8801f15 	stw	r2,124(sp)
    3154:	98bff60e 	bge	r19,r2,3130 <___vfprintf_internal_r+0x6ec>
    3158:	b009883a 	mov	r4,r22
    315c:	b80b883a 	mov	r5,r23
    3160:	d9801e04 	addi	r6,sp,120
    3164:	00095100 	call	9510 <__sprint_r>
    3168:	103f2a1e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    316c:	ad7ffc04 	addi	r21,r21,-16
    3170:	d8c02017 	ldw	r3,128(sp)
    3174:	d8801f17 	ldw	r2,124(sp)
    3178:	da000404 	addi	r8,sp,16
    317c:	e57fef16 	blt	fp,r21,313c <___vfprintf_internal_r+0x6f8>
    3180:	dac02c17 	ldw	r11,176(sp)
    3184:	1d47883a 	add	r3,r3,r21
    3188:	10800044 	addi	r2,r2,1
    318c:	42c00015 	stw	r11,0(r8)
    3190:	45400115 	stw	r21,4(r8)
    3194:	d8c02015 	stw	r3,128(sp)
    3198:	d8801f15 	stw	r2,124(sp)
    319c:	010001c4 	movi	r4,7
    31a0:	20826516 	blt	r4,r2,3b38 <___vfprintf_internal_r+0x10f4>
    31a4:	42000204 	addi	r8,r8,8
    31a8:	8880400c 	andi	r2,r17,256
    31ac:	1001901e 	bne	r2,zero,37f0 <___vfprintf_internal_r+0xdac>
    31b0:	d8801f17 	ldw	r2,124(sp)
    31b4:	db003117 	ldw	r12,196(sp)
    31b8:	1c87883a 	add	r3,r3,r18
    31bc:	10800044 	addi	r2,r2,1
    31c0:	43000015 	stw	r12,0(r8)
    31c4:	44800115 	stw	r18,4(r8)
    31c8:	d8c02015 	stw	r3,128(sp)
    31cc:	d8801f15 	stw	r2,124(sp)
    31d0:	010001c4 	movi	r4,7
    31d4:	20824016 	blt	r4,r2,3ad8 <___vfprintf_internal_r+0x1094>
    31d8:	42000204 	addi	r8,r8,8
    31dc:	8c40010c 	andi	r17,r17,4
    31e0:	88003126 	beq	r17,zero,32a8 <___vfprintf_internal_r+0x864>
    31e4:	db002e17 	ldw	r12,184(sp)
    31e8:	dac02b17 	ldw	r11,172(sp)
    31ec:	62e1c83a 	sub	r16,r12,r11
    31f0:	04002d0e 	bge	zero,r16,32a8 <___vfprintf_internal_r+0x864>
    31f4:	04400404 	movi	r17,16
    31f8:	d8801f17 	ldw	r2,124(sp)
    31fc:	8c05150e 	bge	r17,r16,4654 <___vfprintf_internal_r+0x1c10>
    3200:	01000074 	movhi	r4,1
    3204:	21047a84 	addi	r4,r4,4586
    3208:	d9003615 	stw	r4,216(sp)
    320c:	048001c4 	movi	r18,7
    3210:	00000306 	br	3220 <___vfprintf_internal_r+0x7dc>
    3214:	843ffc04 	addi	r16,r16,-16
    3218:	42000204 	addi	r8,r8,8
    321c:	8c00130e 	bge	r17,r16,326c <___vfprintf_internal_r+0x828>
    3220:	01400074 	movhi	r5,1
    3224:	18c00404 	addi	r3,r3,16
    3228:	10800044 	addi	r2,r2,1
    322c:	29447a84 	addi	r5,r5,4586
    3230:	41400015 	stw	r5,0(r8)
    3234:	44400115 	stw	r17,4(r8)
    3238:	d8c02015 	stw	r3,128(sp)
    323c:	d8801f15 	stw	r2,124(sp)
    3240:	90bff40e 	bge	r18,r2,3214 <___vfprintf_internal_r+0x7d0>
    3244:	b009883a 	mov	r4,r22
    3248:	b80b883a 	mov	r5,r23
    324c:	d9801e04 	addi	r6,sp,120
    3250:	00095100 	call	9510 <__sprint_r>
    3254:	103eef1e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    3258:	843ffc04 	addi	r16,r16,-16
    325c:	d8c02017 	ldw	r3,128(sp)
    3260:	d8801f17 	ldw	r2,124(sp)
    3264:	da000404 	addi	r8,sp,16
    3268:	8c3fed16 	blt	r17,r16,3220 <___vfprintf_internal_r+0x7dc>
    326c:	dac03617 	ldw	r11,216(sp)
    3270:	1c07883a 	add	r3,r3,r16
    3274:	10800044 	addi	r2,r2,1
    3278:	42c00015 	stw	r11,0(r8)
    327c:	44000115 	stw	r16,4(r8)
    3280:	d8c02015 	stw	r3,128(sp)
    3284:	d8801f15 	stw	r2,124(sp)
    3288:	010001c4 	movi	r4,7
    328c:	2080060e 	bge	r4,r2,32a8 <___vfprintf_internal_r+0x864>
    3290:	b009883a 	mov	r4,r22
    3294:	b80b883a 	mov	r5,r23
    3298:	d9801e04 	addi	r6,sp,120
    329c:	00095100 	call	9510 <__sprint_r>
    32a0:	103edc1e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    32a4:	d8c02017 	ldw	r3,128(sp)
    32a8:	d8802b17 	ldw	r2,172(sp)
    32ac:	db002e17 	ldw	r12,184(sp)
    32b0:	1300010e 	bge	r2,r12,32b8 <___vfprintf_internal_r+0x874>
    32b4:	6005883a 	mov	r2,r12
    32b8:	dac02f17 	ldw	r11,188(sp)
    32bc:	5897883a 	add	r11,r11,r2
    32c0:	dac02f15 	stw	r11,188(sp)
    32c4:	18020c1e 	bne	r3,zero,3af8 <___vfprintf_internal_r+0x10b4>
    32c8:	d8001f15 	stw	zero,124(sp)
    32cc:	da000404 	addi	r8,sp,16
    32d0:	003e1706 	br	2b30 <___vfprintf_internal_r+0xec>
    32d4:	8c400414 	ori	r17,r17,16
    32d8:	d8c02a15 	stw	r3,168(sp)
    32dc:	8880080c 	andi	r2,r17,32
    32e0:	10010126 	beq	r2,zero,36e8 <___vfprintf_internal_r+0xca4>
    32e4:	db002d17 	ldw	r12,180(sp)
    32e8:	0005883a 	mov	r2,zero
    32ec:	64c00017 	ldw	r19,0(r12)
    32f0:	67000117 	ldw	fp,4(r12)
    32f4:	63000204 	addi	r12,r12,8
    32f8:	db002d15 	stw	r12,180(sp)
    32fc:	9f06b03a 	or	r3,r19,fp
    3300:	d8002785 	stb	zero,158(sp)
    3304:	da403215 	stw	r9,200(sp)
    3308:	002b883a 	mov	r21,zero
    330c:	003f0106 	br	2f14 <___vfprintf_internal_r+0x4d0>
    3310:	8c400414 	ori	r17,r17,16
    3314:	d8c02a15 	stw	r3,168(sp)
    3318:	8880080c 	andi	r2,r17,32
    331c:	1000e326 	beq	r2,zero,36ac <___vfprintf_internal_r+0xc68>
    3320:	dac02d17 	ldw	r11,180(sp)
    3324:	00800044 	movi	r2,1
    3328:	5cc00017 	ldw	r19,0(r11)
    332c:	5f000117 	ldw	fp,4(r11)
    3330:	5ac00204 	addi	r11,r11,8
    3334:	dac02d15 	stw	r11,180(sp)
    3338:	9f06b03a 	or	r3,r19,fp
    333c:	003ff006 	br	3300 <___vfprintf_internal_r+0x8bc>
    3340:	db002d17 	ldw	r12,180(sp)
    3344:	dac02d17 	ldw	r11,180(sp)
    3348:	d8c02a15 	stw	r3,168(sp)
    334c:	63000017 	ldw	r12,0(r12)
    3350:	5ac00117 	ldw	r11,4(r11)
    3354:	d9802785 	stb	r6,158(sp)
    3358:	6009883a 	mov	r4,r12
    335c:	580b883a 	mov	r5,r11
    3360:	db003715 	stw	r12,220(sp)
    3364:	da003f15 	stw	r8,252(sp)
    3368:	da403e15 	stw	r9,248(sp)
    336c:	dac03915 	stw	r11,228(sp)
    3370:	00091c00 	call	91c0 <__fpclassifyd>
    3374:	db002d17 	ldw	r12,180(sp)
    3378:	04800044 	movi	r18,1
    337c:	da003f17 	ldw	r8,252(sp)
    3380:	64c00204 	addi	r19,r12,8
    3384:	da403e17 	ldw	r9,248(sp)
    3388:	d9003717 	ldw	r4,220(sp)
    338c:	d9403917 	ldw	r5,228(sp)
    3390:	14832b1e 	bne	r2,r18,4040 <___vfprintf_internal_r+0x15fc>
    3394:	000d883a 	mov	r6,zero
    3398:	000f883a 	mov	r7,zero
    339c:	000cfec0 	call	cfec <__ledf2>
    33a0:	da003f17 	ldw	r8,252(sp)
    33a4:	1004b716 	blt	r2,zero,4684 <___vfprintf_internal_r+0x1c40>
    33a8:	dd402783 	ldbu	r21,158(sp)
    33ac:	008011c4 	movi	r2,71
    33b0:	14040e0e 	bge	r2,r16,43ec <___vfprintf_internal_r+0x19a8>
    33b4:	00c00074 	movhi	r3,1
    33b8:	18c46704 	addi	r3,r3,4508
    33bc:	d8c03115 	stw	r3,196(sp)
    33c0:	02c000c4 	movi	r11,3
    33c4:	00bfdfc4 	movi	r2,-129
    33c8:	dac02b15 	stw	r11,172(sp)
    33cc:	88a2703a 	and	r17,r17,r2
    33d0:	dcc02d15 	stw	r19,180(sp)
    33d4:	5825883a 	mov	r18,r11
    33d8:	d8003215 	stw	zero,200(sp)
    33dc:	d8003415 	stw	zero,208(sp)
    33e0:	003eeb06 	br	2f90 <___vfprintf_internal_r+0x54c>
    33e4:	db002d17 	ldw	r12,180(sp)
    33e8:	00800c04 	movi	r2,48
    33ec:	d8802705 	stb	r2,156(sp)
    33f0:	64c00017 	ldw	r19,0(r12)
    33f4:	00801e04 	movi	r2,120
    33f8:	d8802745 	stb	r2,157(sp)
    33fc:	00800074 	movhi	r2,1
    3400:	10846f04 	addi	r2,r2,4540
    3404:	63000104 	addi	r12,r12,4
    3408:	d8c02a15 	stw	r3,168(sp)
    340c:	d8803b15 	stw	r2,236(sp)
    3410:	0039883a 	mov	fp,zero
    3414:	8c400094 	ori	r17,r17,2
    3418:	db002d15 	stw	r12,180(sp)
    341c:	00800084 	movi	r2,2
    3420:	04001e04 	movi	r16,120
    3424:	9807883a 	mov	r3,r19
    3428:	003fb506 	br	3300 <___vfprintf_internal_r+0x8bc>
    342c:	8c400214 	ori	r17,r17,8
    3430:	1805883a 	mov	r2,r3
    3434:	1c000007 	ldb	r16,0(r3)
    3438:	003de706 	br	2bd8 <___vfprintf_internal_r+0x194>
    343c:	d8c02a15 	stw	r3,168(sp)
    3440:	d9802785 	stb	r6,158(sp)
    3444:	8880080c 	andi	r2,r17,32
    3448:	d8c02d17 	ldw	r3,180(sp)
    344c:	103ea61e 	bne	r2,zero,2ee8 <___vfprintf_internal_r+0x4a4>
    3450:	8880040c 	andi	r2,r17,16
    3454:	1002221e 	bne	r2,zero,3ce0 <___vfprintf_internal_r+0x129c>
    3458:	8880100c 	andi	r2,r17,64
    345c:	10022026 	beq	r2,zero,3ce0 <___vfprintf_internal_r+0x129c>
    3460:	1cc0000f 	ldh	r19,0(r3)
    3464:	db002d17 	ldw	r12,180(sp)
    3468:	9839d7fa 	srai	fp,r19,31
    346c:	63000104 	addi	r12,r12,4
    3470:	db002d15 	stw	r12,180(sp)
    3474:	e005883a 	mov	r2,fp
    3478:	003ea106 	br	2f00 <___vfprintf_internal_r+0x4bc>
    347c:	8c401014 	ori	r17,r17,64
    3480:	1805883a 	mov	r2,r3
    3484:	1c000007 	ldb	r16,0(r3)
    3488:	003dd306 	br	2bd8 <___vfprintf_internal_r+0x194>
    348c:	1c000007 	ldb	r16,0(r3)
    3490:	81c3e926 	beq	r16,r7,4438 <___vfprintf_internal_r+0x19f4>
    3494:	8c400414 	ori	r17,r17,16
    3498:	1805883a 	mov	r2,r3
    349c:	003dce06 	br	2bd8 <___vfprintf_internal_r+0x194>
    34a0:	d8c02a15 	stw	r3,168(sp)
    34a4:	d9802785 	stb	r6,158(sp)
    34a8:	8880080c 	andi	r2,r17,32
    34ac:	10034726 	beq	r2,zero,41cc <___vfprintf_internal_r+0x1788>
    34b0:	db002d17 	ldw	r12,180(sp)
    34b4:	dac02f17 	ldw	r11,188(sp)
    34b8:	60800017 	ldw	r2,0(r12)
    34bc:	5807d7fa 	srai	r3,r11,31
    34c0:	63000104 	addi	r12,r12,4
    34c4:	db002d15 	stw	r12,180(sp)
    34c8:	12c00015 	stw	r11,0(r2)
    34cc:	10c00115 	stw	r3,4(r2)
    34d0:	003d9706 	br	2b30 <___vfprintf_internal_r+0xec>
    34d4:	03000074 	movhi	r12,1
    34d8:	63046a04 	addi	r12,r12,4520
    34dc:	d8c02a15 	stw	r3,168(sp)
    34e0:	d9802785 	stb	r6,158(sp)
    34e4:	db003b15 	stw	r12,236(sp)
    34e8:	88c0080c 	andi	r3,r17,32
    34ec:	d8802d17 	ldw	r2,180(sp)
    34f0:	18005b26 	beq	r3,zero,3660 <___vfprintf_internal_r+0xc1c>
    34f4:	dac02d17 	ldw	r11,180(sp)
    34f8:	14c00017 	ldw	r19,0(r2)
    34fc:	17000117 	ldw	fp,4(r2)
    3500:	5ac00204 	addi	r11,r11,8
    3504:	dac02d15 	stw	r11,180(sp)
    3508:	8880004c 	andi	r2,r17,1
    350c:	10022926 	beq	r2,zero,3db4 <___vfprintf_internal_r+0x1370>
    3510:	9f06b03a 	or	r3,r19,fp
    3514:	18032b26 	beq	r3,zero,41c4 <___vfprintf_internal_r+0x1780>
    3518:	00800c04 	movi	r2,48
    351c:	d8802705 	stb	r2,156(sp)
    3520:	dc002745 	stb	r16,157(sp)
    3524:	8c400094 	ori	r17,r17,2
    3528:	00800084 	movi	r2,2
    352c:	003f7406 	br	3300 <___vfprintf_internal_r+0x8bc>
    3530:	30803fcc 	andi	r2,r6,255
    3534:	1080201c 	xori	r2,r2,128
    3538:	10bfe004 	addi	r2,r2,-128
    353c:	1003351e 	bne	r2,zero,4214 <___vfprintf_internal_r+0x17d0>
    3540:	1805883a 	mov	r2,r3
    3544:	01800804 	movi	r6,32
    3548:	1c000007 	ldb	r16,0(r3)
    354c:	003da206 	br	2bd8 <___vfprintf_internal_r+0x194>
    3550:	dac02d17 	ldw	r11,180(sp)
    3554:	db002d17 	ldw	r12,180(sp)
    3558:	5ac00017 	ldw	r11,0(r11)
    355c:	dac02e15 	stw	r11,184(sp)
    3560:	62c00104 	addi	r11,r12,4
    3564:	db002e17 	ldw	r12,184(sp)
    3568:	6003ad16 	blt	r12,zero,4420 <___vfprintf_internal_r+0x19dc>
    356c:	dac02d15 	stw	r11,180(sp)
    3570:	1805883a 	mov	r2,r3
    3574:	1c000007 	ldb	r16,0(r3)
    3578:	003d9706 	br	2bd8 <___vfprintf_internal_r+0x194>
    357c:	1805883a 	mov	r2,r3
    3580:	01800ac4 	movi	r6,43
    3584:	1c000007 	ldb	r16,0(r3)
    3588:	003d9306 	br	2bd8 <___vfprintf_internal_r+0x194>
    358c:	db002d17 	ldw	r12,180(sp)
    3590:	d8c02a15 	stw	r3,168(sp)
    3594:	00c00044 	movi	r3,1
    3598:	60800017 	ldw	r2,0(r12)
    359c:	63000104 	addi	r12,r12,4
    35a0:	d8c02b15 	stw	r3,172(sp)
    35a4:	d8002785 	stb	zero,158(sp)
    35a8:	d8801405 	stb	r2,80(sp)
    35ac:	db002d15 	stw	r12,180(sp)
    35b0:	dac01404 	addi	r11,sp,80
    35b4:	1825883a 	mov	r18,r3
    35b8:	d8003215 	stw	zero,200(sp)
    35bc:	d8003415 	stw	zero,208(sp)
    35c0:	dac03115 	stw	r11,196(sp)
    35c4:	0005883a 	mov	r2,zero
    35c8:	003e7806 	br	2fac <___vfprintf_internal_r+0x568>
    35cc:	dac02d17 	ldw	r11,180(sp)
    35d0:	db002d17 	ldw	r12,180(sp)
    35d4:	d8c02a15 	stw	r3,168(sp)
    35d8:	5ac00017 	ldw	r11,0(r11)
    35dc:	d8002785 	stb	zero,158(sp)
    35e0:	64c00104 	addi	r19,r12,4
    35e4:	dac03115 	stw	r11,196(sp)
    35e8:	5803fe26 	beq	r11,zero,45e4 <___vfprintf_internal_r+0x1ba0>
    35ec:	d9003117 	ldw	r4,196(sp)
    35f0:	4803b416 	blt	r9,zero,44c4 <___vfprintf_internal_r+0x1a80>
    35f4:	480d883a 	mov	r6,r9
    35f8:	000b883a 	mov	r5,zero
    35fc:	da003f15 	stw	r8,252(sp)
    3600:	da403e15 	stw	r9,248(sp)
    3604:	00078180 	call	7818 <memchr>
    3608:	da003f17 	ldw	r8,252(sp)
    360c:	da403e17 	ldw	r9,248(sp)
    3610:	10043026 	beq	r2,zero,46d4 <___vfprintf_internal_r+0x1c90>
    3614:	d8c03117 	ldw	r3,196(sp)
    3618:	10e5c83a 	sub	r18,r2,r3
    361c:	4c836b16 	blt	r9,r18,43cc <___vfprintf_internal_r+0x1988>
    3620:	9005883a 	mov	r2,r18
    3624:	9003ac16 	blt	r18,zero,44d8 <___vfprintf_internal_r+0x1a94>
    3628:	dd402783 	ldbu	r21,158(sp)
    362c:	d8802b15 	stw	r2,172(sp)
    3630:	dcc02d15 	stw	r19,180(sp)
    3634:	d8003215 	stw	zero,200(sp)
    3638:	d8003415 	stw	zero,208(sp)
    363c:	003e5406 	br	2f90 <___vfprintf_internal_r+0x54c>
    3640:	00800074 	movhi	r2,1
    3644:	10846f04 	addi	r2,r2,4540
    3648:	d8c02a15 	stw	r3,168(sp)
    364c:	d8803b15 	stw	r2,236(sp)
    3650:	d9802785 	stb	r6,158(sp)
    3654:	88c0080c 	andi	r3,r17,32
    3658:	d8802d17 	ldw	r2,180(sp)
    365c:	183fa51e 	bne	r3,zero,34f4 <___vfprintf_internal_r+0xab0>
    3660:	88c0040c 	andi	r3,r17,16
    3664:	1802ee26 	beq	r3,zero,4220 <___vfprintf_internal_r+0x17dc>
    3668:	db002d17 	ldw	r12,180(sp)
    366c:	14c00017 	ldw	r19,0(r2)
    3670:	0039883a 	mov	fp,zero
    3674:	63000104 	addi	r12,r12,4
    3678:	db002d15 	stw	r12,180(sp)
    367c:	003fa206 	br	3508 <___vfprintf_internal_r+0xac4>
    3680:	8c400054 	ori	r17,r17,1
    3684:	1805883a 	mov	r2,r3
    3688:	1c000007 	ldb	r16,0(r3)
    368c:	003d5206 	br	2bd8 <___vfprintf_internal_r+0x194>
    3690:	8c400814 	ori	r17,r17,32
    3694:	1805883a 	mov	r2,r3
    3698:	1c000007 	ldb	r16,0(r3)
    369c:	003d4e06 	br	2bd8 <___vfprintf_internal_r+0x194>
    36a0:	d8c02a15 	stw	r3,168(sp)
    36a4:	8880080c 	andi	r2,r17,32
    36a8:	103f1d1e 	bne	r2,zero,3320 <___vfprintf_internal_r+0x8dc>
    36ac:	8880040c 	andi	r2,r17,16
    36b0:	1001b81e 	bne	r2,zero,3d94 <___vfprintf_internal_r+0x1350>
    36b4:	8880100c 	andi	r2,r17,64
    36b8:	1001b626 	beq	r2,zero,3d94 <___vfprintf_internal_r+0x1350>
    36bc:	dac02d17 	ldw	r11,180(sp)
    36c0:	0039883a 	mov	fp,zero
    36c4:	00800044 	movi	r2,1
    36c8:	5cc0000b 	ldhu	r19,0(r11)
    36cc:	5ac00104 	addi	r11,r11,4
    36d0:	dac02d15 	stw	r11,180(sp)
    36d4:	9807883a 	mov	r3,r19
    36d8:	003f0906 	br	3300 <___vfprintf_internal_r+0x8bc>
    36dc:	d8c02a15 	stw	r3,168(sp)
    36e0:	8880080c 	andi	r2,r17,32
    36e4:	103eff1e 	bne	r2,zero,32e4 <___vfprintf_internal_r+0x8a0>
    36e8:	8880040c 	andi	r2,r17,16
    36ec:	1001a11e 	bne	r2,zero,3d74 <___vfprintf_internal_r+0x1330>
    36f0:	8880100c 	andi	r2,r17,64
    36f4:	10019f26 	beq	r2,zero,3d74 <___vfprintf_internal_r+0x1330>
    36f8:	db002d17 	ldw	r12,180(sp)
    36fc:	0039883a 	mov	fp,zero
    3700:	0005883a 	mov	r2,zero
    3704:	64c0000b 	ldhu	r19,0(r12)
    3708:	63000104 	addi	r12,r12,4
    370c:	db002d15 	stw	r12,180(sp)
    3710:	9807883a 	mov	r3,r19
    3714:	003efa06 	br	3300 <___vfprintf_internal_r+0x8bc>
    3718:	d8c02a15 	stw	r3,168(sp)
    371c:	d9802785 	stb	r6,158(sp)
    3720:	803db626 	beq	r16,zero,2dfc <___vfprintf_internal_r+0x3b8>
    3724:	00c00044 	movi	r3,1
    3728:	d8c02b15 	stw	r3,172(sp)
    372c:	dc001405 	stb	r16,80(sp)
    3730:	d8002785 	stb	zero,158(sp)
    3734:	003f9e06 	br	35b0 <___vfprintf_internal_r+0xb6c>
    3738:	d8c02017 	ldw	r3,128(sp)
    373c:	003e5306 	br	308c <___vfprintf_internal_r+0x648>
    3740:	10803fcc 	andi	r2,r2,255
    3744:	00c00044 	movi	r3,1
    3748:	10fdfa1e 	bne	r2,r3,2f34 <___vfprintf_internal_r+0x4f0>
    374c:	e000021e 	bne	fp,zero,3758 <___vfprintf_internal_r+0xd14>
    3750:	00800244 	movi	r2,9
    3754:	14c0202e 	bgeu	r2,r19,37d8 <___vfprintf_internal_r+0xd94>
    3758:	dc002b15 	stw	r16,172(sp)
    375c:	dc402c15 	stw	r17,176(sp)
    3760:	9821883a 	mov	r16,r19
    3764:	e023883a 	mov	r17,fp
    3768:	dc801e04 	addi	r18,sp,120
    376c:	4827883a 	mov	r19,r9
    3770:	4039883a 	mov	fp,r8
    3774:	8009883a 	mov	r4,r16
    3778:	880b883a 	mov	r5,r17
    377c:	01800284 	movi	r6,10
    3780:	000f883a 	mov	r7,zero
    3784:	000b7900 	call	b790 <__umoddi3>
    3788:	10800c04 	addi	r2,r2,48
    378c:	94bfffc4 	addi	r18,r18,-1
    3790:	8009883a 	mov	r4,r16
    3794:	880b883a 	mov	r5,r17
    3798:	01800284 	movi	r6,10
    379c:	000f883a 	mov	r7,zero
    37a0:	90800005 	stb	r2,0(r18)
    37a4:	000b1d00 	call	b1d0 <__udivdi3>
    37a8:	1021883a 	mov	r16,r2
    37ac:	10c4b03a 	or	r2,r2,r3
    37b0:	1823883a 	mov	r17,r3
    37b4:	103fef1e 	bne	r2,zero,3774 <___vfprintf_internal_r+0xd30>
    37b8:	dac02817 	ldw	r11,160(sp)
    37bc:	dc803115 	stw	r18,196(sp)
    37c0:	dc002b17 	ldw	r16,172(sp)
    37c4:	dc402c17 	ldw	r17,176(sp)
    37c8:	9813883a 	mov	r9,r19
    37cc:	e011883a 	mov	r8,fp
    37d0:	5ca5c83a 	sub	r18,r11,r18
    37d4:	003de906 	br	2f7c <___vfprintf_internal_r+0x538>
    37d8:	9cc00c04 	addi	r19,r19,48
    37dc:	d8c01dc4 	addi	r3,sp,119
    37e0:	dcc01dc5 	stb	r19,119(sp)
    37e4:	dc803c17 	ldw	r18,240(sp)
    37e8:	d8c03115 	stw	r3,196(sp)
    37ec:	003de306 	br	2f7c <___vfprintf_internal_r+0x538>
    37f0:	00801944 	movi	r2,101
    37f4:	1400710e 	bge	r2,r16,39bc <___vfprintf_internal_r+0xf78>
    37f8:	d9003717 	ldw	r4,220(sp)
    37fc:	d9403917 	ldw	r5,228(sp)
    3800:	000d883a 	mov	r6,zero
    3804:	000f883a 	mov	r7,zero
    3808:	d8c03d15 	stw	r3,244(sp)
    380c:	da003f15 	stw	r8,252(sp)
    3810:	000ce880 	call	ce88 <__eqdf2>
    3814:	d8c03d17 	ldw	r3,244(sp)
    3818:	da003f17 	ldw	r8,252(sp)
    381c:	1000ef1e 	bne	r2,zero,3bdc <___vfprintf_internal_r+0x1198>
    3820:	d8801f17 	ldw	r2,124(sp)
    3824:	01000074 	movhi	r4,1
    3828:	21047604 	addi	r4,r4,4568
    382c:	18c00044 	addi	r3,r3,1
    3830:	10800044 	addi	r2,r2,1
    3834:	41000015 	stw	r4,0(r8)
    3838:	01000044 	movi	r4,1
    383c:	41000115 	stw	r4,4(r8)
    3840:	d8c02015 	stw	r3,128(sp)
    3844:	d8801f15 	stw	r2,124(sp)
    3848:	010001c4 	movi	r4,7
    384c:	20828e16 	blt	r4,r2,4288 <___vfprintf_internal_r+0x1844>
    3850:	42000204 	addi	r8,r8,8
    3854:	d8802617 	ldw	r2,152(sp)
    3858:	dac03317 	ldw	r11,204(sp)
    385c:	12c00216 	blt	r2,r11,3868 <___vfprintf_internal_r+0xe24>
    3860:	8880004c 	andi	r2,r17,1
    3864:	103e5d26 	beq	r2,zero,31dc <___vfprintf_internal_r+0x798>
    3868:	db003817 	ldw	r12,224(sp)
    386c:	d8801f17 	ldw	r2,124(sp)
    3870:	dac03517 	ldw	r11,212(sp)
    3874:	1b07883a 	add	r3,r3,r12
    3878:	10800044 	addi	r2,r2,1
    387c:	42c00015 	stw	r11,0(r8)
    3880:	43000115 	stw	r12,4(r8)
    3884:	d8c02015 	stw	r3,128(sp)
    3888:	d8801f15 	stw	r2,124(sp)
    388c:	010001c4 	movi	r4,7
    3890:	2082ed16 	blt	r4,r2,4448 <___vfprintf_internal_r+0x1a04>
    3894:	42000204 	addi	r8,r8,8
    3898:	db003317 	ldw	r12,204(sp)
    389c:	643fffc4 	addi	r16,r12,-1
    38a0:	043e4e0e 	bge	zero,r16,31dc <___vfprintf_internal_r+0x798>
    38a4:	04800404 	movi	r18,16
    38a8:	d8801f17 	ldw	r2,124(sp)
    38ac:	94007e0e 	bge	r18,r16,3aa8 <___vfprintf_internal_r+0x1064>
    38b0:	01400074 	movhi	r5,1
    38b4:	29447684 	addi	r5,r5,4570
    38b8:	d9402c15 	stw	r5,176(sp)
    38bc:	054001c4 	movi	r21,7
    38c0:	00000306 	br	38d0 <___vfprintf_internal_r+0xe8c>
    38c4:	42000204 	addi	r8,r8,8
    38c8:	843ffc04 	addi	r16,r16,-16
    38cc:	9400790e 	bge	r18,r16,3ab4 <___vfprintf_internal_r+0x1070>
    38d0:	18c00404 	addi	r3,r3,16
    38d4:	10800044 	addi	r2,r2,1
    38d8:	45000015 	stw	r20,0(r8)
    38dc:	44800115 	stw	r18,4(r8)
    38e0:	d8c02015 	stw	r3,128(sp)
    38e4:	d8801f15 	stw	r2,124(sp)
    38e8:	a8bff60e 	bge	r21,r2,38c4 <___vfprintf_internal_r+0xe80>
    38ec:	b009883a 	mov	r4,r22
    38f0:	b80b883a 	mov	r5,r23
    38f4:	d9801e04 	addi	r6,sp,120
    38f8:	00095100 	call	9510 <__sprint_r>
    38fc:	103d451e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    3900:	d8c02017 	ldw	r3,128(sp)
    3904:	d8801f17 	ldw	r2,124(sp)
    3908:	da000404 	addi	r8,sp,16
    390c:	003fee06 	br	38c8 <___vfprintf_internal_r+0xe84>
    3910:	dac02e17 	ldw	r11,184(sp)
    3914:	db002b17 	ldw	r12,172(sp)
    3918:	5b2bc83a 	sub	r21,r11,r12
    391c:	057df90e 	bge	zero,r21,3104 <___vfprintf_internal_r+0x6c0>
    3920:	07000404 	movi	fp,16
    3924:	d8801f17 	ldw	r2,124(sp)
    3928:	e543640e 	bge	fp,r21,46bc <___vfprintf_internal_r+0x1c78>
    392c:	01400074 	movhi	r5,1
    3930:	29447684 	addi	r5,r5,4570
    3934:	d9402c15 	stw	r5,176(sp)
    3938:	04c001c4 	movi	r19,7
    393c:	00000306 	br	394c <___vfprintf_internal_r+0xf08>
    3940:	ad7ffc04 	addi	r21,r21,-16
    3944:	42000204 	addi	r8,r8,8
    3948:	e540110e 	bge	fp,r21,3990 <___vfprintf_internal_r+0xf4c>
    394c:	18c00404 	addi	r3,r3,16
    3950:	10800044 	addi	r2,r2,1
    3954:	45000015 	stw	r20,0(r8)
    3958:	47000115 	stw	fp,4(r8)
    395c:	d8c02015 	stw	r3,128(sp)
    3960:	d8801f15 	stw	r2,124(sp)
    3964:	98bff60e 	bge	r19,r2,3940 <___vfprintf_internal_r+0xefc>
    3968:	b009883a 	mov	r4,r22
    396c:	b80b883a 	mov	r5,r23
    3970:	d9801e04 	addi	r6,sp,120
    3974:	00095100 	call	9510 <__sprint_r>
    3978:	103d261e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    397c:	ad7ffc04 	addi	r21,r21,-16
    3980:	d8c02017 	ldw	r3,128(sp)
    3984:	d8801f17 	ldw	r2,124(sp)
    3988:	da000404 	addi	r8,sp,16
    398c:	e57fef16 	blt	fp,r21,394c <___vfprintf_internal_r+0xf08>
    3990:	dac02c17 	ldw	r11,176(sp)
    3994:	1d47883a 	add	r3,r3,r21
    3998:	10800044 	addi	r2,r2,1
    399c:	42c00015 	stw	r11,0(r8)
    39a0:	45400115 	stw	r21,4(r8)
    39a4:	d8c02015 	stw	r3,128(sp)
    39a8:	d8801f15 	stw	r2,124(sp)
    39ac:	010001c4 	movi	r4,7
    39b0:	20819116 	blt	r4,r2,3ff8 <___vfprintf_internal_r+0x15b4>
    39b4:	42000204 	addi	r8,r8,8
    39b8:	003dd206 	br	3104 <___vfprintf_internal_r+0x6c0>
    39bc:	db003317 	ldw	r12,204(sp)
    39c0:	00800044 	movi	r2,1
    39c4:	18c00044 	addi	r3,r3,1
    39c8:	1301530e 	bge	r2,r12,3f18 <___vfprintf_internal_r+0x14d4>
    39cc:	dc001f17 	ldw	r16,124(sp)
    39d0:	dac03117 	ldw	r11,196(sp)
    39d4:	00800044 	movi	r2,1
    39d8:	84000044 	addi	r16,r16,1
    39dc:	40800115 	stw	r2,4(r8)
    39e0:	42c00015 	stw	r11,0(r8)
    39e4:	d8c02015 	stw	r3,128(sp)
    39e8:	dc001f15 	stw	r16,124(sp)
    39ec:	008001c4 	movi	r2,7
    39f0:	14016b16 	blt	r2,r16,3fa0 <___vfprintf_internal_r+0x155c>
    39f4:	42000204 	addi	r8,r8,8
    39f8:	db003817 	ldw	r12,224(sp)
    39fc:	dac03517 	ldw	r11,212(sp)
    3a00:	84000044 	addi	r16,r16,1
    3a04:	1b07883a 	add	r3,r3,r12
    3a08:	42c00015 	stw	r11,0(r8)
    3a0c:	43000115 	stw	r12,4(r8)
    3a10:	d8c02015 	stw	r3,128(sp)
    3a14:	dc001f15 	stw	r16,124(sp)
    3a18:	008001c4 	movi	r2,7
    3a1c:	14016916 	blt	r2,r16,3fc4 <___vfprintf_internal_r+0x1580>
    3a20:	44800204 	addi	r18,r8,8
    3a24:	d9003717 	ldw	r4,220(sp)
    3a28:	d9403917 	ldw	r5,228(sp)
    3a2c:	000d883a 	mov	r6,zero
    3a30:	000f883a 	mov	r7,zero
    3a34:	d8c03d15 	stw	r3,244(sp)
    3a38:	000ce880 	call	ce88 <__eqdf2>
    3a3c:	d8c03d17 	ldw	r3,244(sp)
    3a40:	db003317 	ldw	r12,204(sp)
    3a44:	1000ad26 	beq	r2,zero,3cfc <___vfprintf_internal_r+0x12b8>
    3a48:	dac03117 	ldw	r11,196(sp)
    3a4c:	60bfffc4 	addi	r2,r12,-1
    3a50:	1887883a 	add	r3,r3,r2
    3a54:	59000044 	addi	r4,r11,1
    3a58:	84000044 	addi	r16,r16,1
    3a5c:	90800115 	stw	r2,4(r18)
    3a60:	91000015 	stw	r4,0(r18)
    3a64:	d8c02015 	stw	r3,128(sp)
    3a68:	dc001f15 	stw	r16,124(sp)
    3a6c:	008001c4 	movi	r2,7
    3a70:	14014216 	blt	r2,r16,3f7c <___vfprintf_internal_r+0x1538>
    3a74:	94800204 	addi	r18,r18,8
    3a78:	dac03a17 	ldw	r11,232(sp)
    3a7c:	dd4022c4 	addi	r21,sp,139
    3a80:	84000044 	addi	r16,r16,1
    3a84:	1ac7883a 	add	r3,r3,r11
    3a88:	95400015 	stw	r21,0(r18)
    3a8c:	92c00115 	stw	r11,4(r18)
    3a90:	d8c02015 	stw	r3,128(sp)
    3a94:	dc001f15 	stw	r16,124(sp)
    3a98:	008001c4 	movi	r2,7
    3a9c:	14000e16 	blt	r2,r16,3ad8 <___vfprintf_internal_r+0x1094>
    3aa0:	92000204 	addi	r8,r18,8
    3aa4:	003dcd06 	br	31dc <___vfprintf_internal_r+0x798>
    3aa8:	01000074 	movhi	r4,1
    3aac:	21047684 	addi	r4,r4,4570
    3ab0:	d9002c15 	stw	r4,176(sp)
    3ab4:	dac02c17 	ldw	r11,176(sp)
    3ab8:	1c07883a 	add	r3,r3,r16
    3abc:	44000115 	stw	r16,4(r8)
    3ac0:	42c00015 	stw	r11,0(r8)
    3ac4:	10800044 	addi	r2,r2,1
    3ac8:	d8c02015 	stw	r3,128(sp)
    3acc:	d8801f15 	stw	r2,124(sp)
    3ad0:	010001c4 	movi	r4,7
    3ad4:	20bdc00e 	bge	r4,r2,31d8 <___vfprintf_internal_r+0x794>
    3ad8:	b009883a 	mov	r4,r22
    3adc:	b80b883a 	mov	r5,r23
    3ae0:	d9801e04 	addi	r6,sp,120
    3ae4:	00095100 	call	9510 <__sprint_r>
    3ae8:	103cca1e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    3aec:	d8c02017 	ldw	r3,128(sp)
    3af0:	da000404 	addi	r8,sp,16
    3af4:	003db906 	br	31dc <___vfprintf_internal_r+0x798>
    3af8:	b009883a 	mov	r4,r22
    3afc:	b80b883a 	mov	r5,r23
    3b00:	d9801e04 	addi	r6,sp,120
    3b04:	00095100 	call	9510 <__sprint_r>
    3b08:	103def26 	beq	r2,zero,32c8 <___vfprintf_internal_r+0x884>
    3b0c:	003cc106 	br	2e14 <___vfprintf_internal_r+0x3d0>
    3b10:	10803fcc 	andi	r2,r2,255
    3b14:	1000651e 	bne	r2,zero,3cac <___vfprintf_internal_r+0x1268>
    3b18:	8880004c 	andi	r2,r17,1
    3b1c:	10013226 	beq	r2,zero,3fe8 <___vfprintf_internal_r+0x15a4>
    3b20:	00800c04 	movi	r2,48
    3b24:	d8c01dc4 	addi	r3,sp,119
    3b28:	d8801dc5 	stb	r2,119(sp)
    3b2c:	dc803c17 	ldw	r18,240(sp)
    3b30:	d8c03115 	stw	r3,196(sp)
    3b34:	003d1106 	br	2f7c <___vfprintf_internal_r+0x538>
    3b38:	b009883a 	mov	r4,r22
    3b3c:	b80b883a 	mov	r5,r23
    3b40:	d9801e04 	addi	r6,sp,120
    3b44:	00095100 	call	9510 <__sprint_r>
    3b48:	103cb21e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    3b4c:	d8c02017 	ldw	r3,128(sp)
    3b50:	da000404 	addi	r8,sp,16
    3b54:	003d9406 	br	31a8 <___vfprintf_internal_r+0x764>
    3b58:	b009883a 	mov	r4,r22
    3b5c:	b80b883a 	mov	r5,r23
    3b60:	d9801e04 	addi	r6,sp,120
    3b64:	00095100 	call	9510 <__sprint_r>
    3b68:	103caa1e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    3b6c:	d8c02017 	ldw	r3,128(sp)
    3b70:	da000404 	addi	r8,sp,16
    3b74:	003d5206 	br	30c0 <___vfprintf_internal_r+0x67c>
    3b78:	b009883a 	mov	r4,r22
    3b7c:	b80b883a 	mov	r5,r23
    3b80:	d9801e04 	addi	r6,sp,120
    3b84:	00095100 	call	9510 <__sprint_r>
    3b88:	103ca21e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    3b8c:	d8c02017 	ldw	r3,128(sp)
    3b90:	da000404 	addi	r8,sp,16
    3b94:	003d5806 	br	30f8 <___vfprintf_internal_r+0x6b4>
    3b98:	d9403b17 	ldw	r5,236(sp)
    3b9c:	d8c01e04 	addi	r3,sp,120
    3ba0:	988003cc 	andi	r2,r19,15
    3ba4:	e008973a 	slli	r4,fp,28
    3ba8:	2885883a 	add	r2,r5,r2
    3bac:	9826d13a 	srli	r19,r19,4
    3bb0:	10800003 	ldbu	r2,0(r2)
    3bb4:	e038d13a 	srli	fp,fp,4
    3bb8:	18ffffc4 	addi	r3,r3,-1
    3bbc:	24e6b03a 	or	r19,r4,r19
    3bc0:	18800005 	stb	r2,0(r3)
    3bc4:	9f04b03a 	or	r2,r19,fp
    3bc8:	103ff51e 	bne	r2,zero,3ba0 <___vfprintf_internal_r+0x115c>
    3bcc:	db002817 	ldw	r12,160(sp)
    3bd0:	d8c03115 	stw	r3,196(sp)
    3bd4:	60e5c83a 	sub	r18,r12,r3
    3bd8:	003ce806 	br	2f7c <___vfprintf_internal_r+0x538>
    3bdc:	dc002617 	ldw	r16,152(sp)
    3be0:	0401b10e 	bge	zero,r16,42a8 <___vfprintf_internal_r+0x1864>
    3be4:	db003117 	ldw	r12,196(sp)
    3be8:	dac03317 	ldw	r11,204(sp)
    3bec:	62e1883a 	add	r16,r12,r11
    3bf0:	db003417 	ldw	r12,208(sp)
    3bf4:	5825883a 	mov	r18,r11
    3bf8:	62c0010e 	bge	r12,r11,3c00 <___vfprintf_internal_r+0x11bc>
    3bfc:	6025883a 	mov	r18,r12
    3c00:	04800b0e 	bge	zero,r18,3c30 <___vfprintf_internal_r+0x11ec>
    3c04:	d8801f17 	ldw	r2,124(sp)
    3c08:	dac03117 	ldw	r11,196(sp)
    3c0c:	1c87883a 	add	r3,r3,r18
    3c10:	10800044 	addi	r2,r2,1
    3c14:	42c00015 	stw	r11,0(r8)
    3c18:	44800115 	stw	r18,4(r8)
    3c1c:	d8c02015 	stw	r3,128(sp)
    3c20:	d8801f15 	stw	r2,124(sp)
    3c24:	010001c4 	movi	r4,7
    3c28:	20824f16 	blt	r4,r2,4568 <___vfprintf_internal_r+0x1b24>
    3c2c:	42000204 	addi	r8,r8,8
    3c30:	90024b16 	blt	r18,zero,4560 <___vfprintf_internal_r+0x1b1c>
    3c34:	db003417 	ldw	r12,208(sp)
    3c38:	64a5c83a 	sub	r18,r12,r18
    3c3c:	0480730e 	bge	zero,r18,3e0c <___vfprintf_internal_r+0x13c8>
    3c40:	05400404 	movi	r21,16
    3c44:	d8801f17 	ldw	r2,124(sp)
    3c48:	ac817d0e 	bge	r21,r18,4240 <___vfprintf_internal_r+0x17fc>
    3c4c:	01400074 	movhi	r5,1
    3c50:	29447684 	addi	r5,r5,4570
    3c54:	d9402c15 	stw	r5,176(sp)
    3c58:	070001c4 	movi	fp,7
    3c5c:	00000306 	br	3c6c <___vfprintf_internal_r+0x1228>
    3c60:	42000204 	addi	r8,r8,8
    3c64:	94bffc04 	addi	r18,r18,-16
    3c68:	ac81780e 	bge	r21,r18,424c <___vfprintf_internal_r+0x1808>
    3c6c:	18c00404 	addi	r3,r3,16
    3c70:	10800044 	addi	r2,r2,1
    3c74:	45000015 	stw	r20,0(r8)
    3c78:	45400115 	stw	r21,4(r8)
    3c7c:	d8c02015 	stw	r3,128(sp)
    3c80:	d8801f15 	stw	r2,124(sp)
    3c84:	e0bff60e 	bge	fp,r2,3c60 <___vfprintf_internal_r+0x121c>
    3c88:	b009883a 	mov	r4,r22
    3c8c:	b80b883a 	mov	r5,r23
    3c90:	d9801e04 	addi	r6,sp,120
    3c94:	00095100 	call	9510 <__sprint_r>
    3c98:	103c5e1e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    3c9c:	d8c02017 	ldw	r3,128(sp)
    3ca0:	d8801f17 	ldw	r2,124(sp)
    3ca4:	da000404 	addi	r8,sp,16
    3ca8:	003fee06 	br	3c64 <___vfprintf_internal_r+0x1220>
    3cac:	dac01e04 	addi	r11,sp,120
    3cb0:	0025883a 	mov	r18,zero
    3cb4:	dac03115 	stw	r11,196(sp)
    3cb8:	003cb006 	br	2f7c <___vfprintf_internal_r+0x538>
    3cbc:	b009883a 	mov	r4,r22
    3cc0:	b80b883a 	mov	r5,r23
    3cc4:	d9801e04 	addi	r6,sp,120
    3cc8:	00095100 	call	9510 <__sprint_r>
    3ccc:	103c511e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    3cd0:	d8c02017 	ldw	r3,128(sp)
    3cd4:	d8802787 	ldb	r2,158(sp)
    3cd8:	da000404 	addi	r8,sp,16
    3cdc:	003ceb06 	br	308c <___vfprintf_internal_r+0x648>
    3ce0:	1cc00017 	ldw	r19,0(r3)
    3ce4:	dac02d17 	ldw	r11,180(sp)
    3ce8:	9839d7fa 	srai	fp,r19,31
    3cec:	5ac00104 	addi	r11,r11,4
    3cf0:	dac02d15 	stw	r11,180(sp)
    3cf4:	e005883a 	mov	r2,fp
    3cf8:	003c8106 	br	2f00 <___vfprintf_internal_r+0x4bc>
    3cfc:	657fffc4 	addi	r21,r12,-1
    3d00:	057f5d0e 	bge	zero,r21,3a78 <___vfprintf_internal_r+0x1034>
    3d04:	07000404 	movi	fp,16
    3d08:	e540900e 	bge	fp,r21,3f4c <___vfprintf_internal_r+0x1508>
    3d0c:	01000074 	movhi	r4,1
    3d10:	21047684 	addi	r4,r4,4570
    3d14:	d9002c15 	stw	r4,176(sp)
    3d18:	01c001c4 	movi	r7,7
    3d1c:	00000306 	br	3d2c <___vfprintf_internal_r+0x12e8>
    3d20:	94800204 	addi	r18,r18,8
    3d24:	ad7ffc04 	addi	r21,r21,-16
    3d28:	e5408b0e 	bge	fp,r21,3f58 <___vfprintf_internal_r+0x1514>
    3d2c:	18c00404 	addi	r3,r3,16
    3d30:	84000044 	addi	r16,r16,1
    3d34:	95000015 	stw	r20,0(r18)
    3d38:	97000115 	stw	fp,4(r18)
    3d3c:	d8c02015 	stw	r3,128(sp)
    3d40:	dc001f15 	stw	r16,124(sp)
    3d44:	3c3ff60e 	bge	r7,r16,3d20 <___vfprintf_internal_r+0x12dc>
    3d48:	b009883a 	mov	r4,r22
    3d4c:	b80b883a 	mov	r5,r23
    3d50:	d9801e04 	addi	r6,sp,120
    3d54:	d9c03d15 	stw	r7,244(sp)
    3d58:	00095100 	call	9510 <__sprint_r>
    3d5c:	d9c03d17 	ldw	r7,244(sp)
    3d60:	103c2c1e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    3d64:	d8c02017 	ldw	r3,128(sp)
    3d68:	dc001f17 	ldw	r16,124(sp)
    3d6c:	dc800404 	addi	r18,sp,16
    3d70:	003fec06 	br	3d24 <___vfprintf_internal_r+0x12e0>
    3d74:	dac02d17 	ldw	r11,180(sp)
    3d78:	0039883a 	mov	fp,zero
    3d7c:	0005883a 	mov	r2,zero
    3d80:	5cc00017 	ldw	r19,0(r11)
    3d84:	5ac00104 	addi	r11,r11,4
    3d88:	dac02d15 	stw	r11,180(sp)
    3d8c:	9807883a 	mov	r3,r19
    3d90:	003d5b06 	br	3300 <___vfprintf_internal_r+0x8bc>
    3d94:	db002d17 	ldw	r12,180(sp)
    3d98:	0039883a 	mov	fp,zero
    3d9c:	00800044 	movi	r2,1
    3da0:	64c00017 	ldw	r19,0(r12)
    3da4:	63000104 	addi	r12,r12,4
    3da8:	db002d15 	stw	r12,180(sp)
    3dac:	9807883a 	mov	r3,r19
    3db0:	003d5306 	br	3300 <___vfprintf_internal_r+0x8bc>
    3db4:	00800084 	movi	r2,2
    3db8:	9f06b03a 	or	r3,r19,fp
    3dbc:	003d5006 	br	3300 <___vfprintf_internal_r+0x8bc>
    3dc0:	10803fcc 	andi	r2,r2,255
    3dc4:	1080201c 	xori	r2,r2,128
    3dc8:	10bfe004 	addi	r2,r2,-128
    3dcc:	01000c04 	movi	r4,48
    3dd0:	1101a526 	beq	r2,r4,4468 <___vfprintf_internal_r+0x1a24>
    3dd4:	dac03117 	ldw	r11,196(sp)
    3dd8:	db002817 	ldw	r12,160(sp)
    3ddc:	193fffc5 	stb	r4,-1(r3)
    3de0:	5affffc4 	addi	r11,r11,-1
    3de4:	dac03115 	stw	r11,196(sp)
    3de8:	62e5c83a 	sub	r18,r12,r11
    3dec:	003c6306 	br	2f7c <___vfprintf_internal_r+0x538>
    3df0:	b009883a 	mov	r4,r22
    3df4:	b80b883a 	mov	r5,r23
    3df8:	d9801e04 	addi	r6,sp,120
    3dfc:	00095100 	call	9510 <__sprint_r>
    3e00:	103c041e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    3e04:	d8c02017 	ldw	r3,128(sp)
    3e08:	da000404 	addi	r8,sp,16
    3e0c:	db003117 	ldw	r12,196(sp)
    3e10:	dac03417 	ldw	r11,208(sp)
    3e14:	d8802617 	ldw	r2,152(sp)
    3e18:	62e5883a 	add	r18,r12,r11
    3e1c:	db003317 	ldw	r12,204(sp)
    3e20:	13000216 	blt	r2,r12,3e2c <___vfprintf_internal_r+0x13e8>
    3e24:	8900004c 	andi	r4,r17,1
    3e28:	20000c26 	beq	r4,zero,3e5c <___vfprintf_internal_r+0x1418>
    3e2c:	dac03817 	ldw	r11,224(sp)
    3e30:	d9001f17 	ldw	r4,124(sp)
    3e34:	db003517 	ldw	r12,212(sp)
    3e38:	1ac7883a 	add	r3,r3,r11
    3e3c:	21000044 	addi	r4,r4,1
    3e40:	43000015 	stw	r12,0(r8)
    3e44:	42c00115 	stw	r11,4(r8)
    3e48:	d8c02015 	stw	r3,128(sp)
    3e4c:	d9001f15 	stw	r4,124(sp)
    3e50:	014001c4 	movi	r5,7
    3e54:	2901cc16 	blt	r5,r4,4588 <___vfprintf_internal_r+0x1b44>
    3e58:	42000204 	addi	r8,r8,8
    3e5c:	dac03317 	ldw	r11,204(sp)
    3e60:	8489c83a 	sub	r4,r16,r18
    3e64:	5885c83a 	sub	r2,r11,r2
    3e68:	1021883a 	mov	r16,r2
    3e6c:	2080010e 	bge	r4,r2,3e74 <___vfprintf_internal_r+0x1430>
    3e70:	2021883a 	mov	r16,r4
    3e74:	04000a0e 	bge	zero,r16,3ea0 <___vfprintf_internal_r+0x145c>
    3e78:	d9001f17 	ldw	r4,124(sp)
    3e7c:	1c07883a 	add	r3,r3,r16
    3e80:	44800015 	stw	r18,0(r8)
    3e84:	21000044 	addi	r4,r4,1
    3e88:	44000115 	stw	r16,4(r8)
    3e8c:	d8c02015 	stw	r3,128(sp)
    3e90:	d9001f15 	stw	r4,124(sp)
    3e94:	014001c4 	movi	r5,7
    3e98:	2901e316 	blt	r5,r4,4628 <___vfprintf_internal_r+0x1be4>
    3e9c:	42000204 	addi	r8,r8,8
    3ea0:	8001df16 	blt	r16,zero,4620 <___vfprintf_internal_r+0x1bdc>
    3ea4:	1421c83a 	sub	r16,r2,r16
    3ea8:	043ccc0e 	bge	zero,r16,31dc <___vfprintf_internal_r+0x798>
    3eac:	04800404 	movi	r18,16
    3eb0:	d8801f17 	ldw	r2,124(sp)
    3eb4:	943efc0e 	bge	r18,r16,3aa8 <___vfprintf_internal_r+0x1064>
    3eb8:	01400074 	movhi	r5,1
    3ebc:	29447684 	addi	r5,r5,4570
    3ec0:	d9402c15 	stw	r5,176(sp)
    3ec4:	054001c4 	movi	r21,7
    3ec8:	00000306 	br	3ed8 <___vfprintf_internal_r+0x1494>
    3ecc:	42000204 	addi	r8,r8,8
    3ed0:	843ffc04 	addi	r16,r16,-16
    3ed4:	943ef70e 	bge	r18,r16,3ab4 <___vfprintf_internal_r+0x1070>
    3ed8:	18c00404 	addi	r3,r3,16
    3edc:	10800044 	addi	r2,r2,1
    3ee0:	45000015 	stw	r20,0(r8)
    3ee4:	44800115 	stw	r18,4(r8)
    3ee8:	d8c02015 	stw	r3,128(sp)
    3eec:	d8801f15 	stw	r2,124(sp)
    3ef0:	a8bff60e 	bge	r21,r2,3ecc <___vfprintf_internal_r+0x1488>
    3ef4:	b009883a 	mov	r4,r22
    3ef8:	b80b883a 	mov	r5,r23
    3efc:	d9801e04 	addi	r6,sp,120
    3f00:	00095100 	call	9510 <__sprint_r>
    3f04:	103bc31e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    3f08:	d8c02017 	ldw	r3,128(sp)
    3f0c:	d8801f17 	ldw	r2,124(sp)
    3f10:	da000404 	addi	r8,sp,16
    3f14:	003fee06 	br	3ed0 <___vfprintf_internal_r+0x148c>
    3f18:	8888703a 	and	r4,r17,r2
    3f1c:	203eab1e 	bne	r4,zero,39cc <___vfprintf_internal_r+0xf88>
    3f20:	dc001f17 	ldw	r16,124(sp)
    3f24:	db003117 	ldw	r12,196(sp)
    3f28:	40800115 	stw	r2,4(r8)
    3f2c:	84000044 	addi	r16,r16,1
    3f30:	43000015 	stw	r12,0(r8)
    3f34:	d8c02015 	stw	r3,128(sp)
    3f38:	dc001f15 	stw	r16,124(sp)
    3f3c:	008001c4 	movi	r2,7
    3f40:	14000e16 	blt	r2,r16,3f7c <___vfprintf_internal_r+0x1538>
    3f44:	44800204 	addi	r18,r8,8
    3f48:	003ecb06 	br	3a78 <___vfprintf_internal_r+0x1034>
    3f4c:	00800074 	movhi	r2,1
    3f50:	10847684 	addi	r2,r2,4570
    3f54:	d8802c15 	stw	r2,176(sp)
    3f58:	dac02c17 	ldw	r11,176(sp)
    3f5c:	1d47883a 	add	r3,r3,r21
    3f60:	84000044 	addi	r16,r16,1
    3f64:	92c00015 	stw	r11,0(r18)
    3f68:	95400115 	stw	r21,4(r18)
    3f6c:	d8c02015 	stw	r3,128(sp)
    3f70:	dc001f15 	stw	r16,124(sp)
    3f74:	008001c4 	movi	r2,7
    3f78:	143ebe0e 	bge	r2,r16,3a74 <___vfprintf_internal_r+0x1030>
    3f7c:	b009883a 	mov	r4,r22
    3f80:	b80b883a 	mov	r5,r23
    3f84:	d9801e04 	addi	r6,sp,120
    3f88:	00095100 	call	9510 <__sprint_r>
    3f8c:	103ba11e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    3f90:	d8c02017 	ldw	r3,128(sp)
    3f94:	dc001f17 	ldw	r16,124(sp)
    3f98:	dc800404 	addi	r18,sp,16
    3f9c:	003eb606 	br	3a78 <___vfprintf_internal_r+0x1034>
    3fa0:	b009883a 	mov	r4,r22
    3fa4:	b80b883a 	mov	r5,r23
    3fa8:	d9801e04 	addi	r6,sp,120
    3fac:	00095100 	call	9510 <__sprint_r>
    3fb0:	103b981e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    3fb4:	d8c02017 	ldw	r3,128(sp)
    3fb8:	dc001f17 	ldw	r16,124(sp)
    3fbc:	da000404 	addi	r8,sp,16
    3fc0:	003e8d06 	br	39f8 <___vfprintf_internal_r+0xfb4>
    3fc4:	b009883a 	mov	r4,r22
    3fc8:	b80b883a 	mov	r5,r23
    3fcc:	d9801e04 	addi	r6,sp,120
    3fd0:	00095100 	call	9510 <__sprint_r>
    3fd4:	103b8f1e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    3fd8:	d8c02017 	ldw	r3,128(sp)
    3fdc:	dc001f17 	ldw	r16,124(sp)
    3fe0:	dc800404 	addi	r18,sp,16
    3fe4:	003e8f06 	br	3a24 <___vfprintf_internal_r+0xfe0>
    3fe8:	db001e04 	addi	r12,sp,120
    3fec:	0025883a 	mov	r18,zero
    3ff0:	db003115 	stw	r12,196(sp)
    3ff4:	003be106 	br	2f7c <___vfprintf_internal_r+0x538>
    3ff8:	b009883a 	mov	r4,r22
    3ffc:	b80b883a 	mov	r5,r23
    4000:	d9801e04 	addi	r6,sp,120
    4004:	00095100 	call	9510 <__sprint_r>
    4008:	103b821e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    400c:	d8c02017 	ldw	r3,128(sp)
    4010:	da000404 	addi	r8,sp,16
    4014:	003c3b06 	br	3104 <___vfprintf_internal_r+0x6c0>
    4018:	04e7c83a 	sub	r19,zero,r19
    401c:	9804c03a 	cmpne	r2,r19,zero
    4020:	0739c83a 	sub	fp,zero,fp
    4024:	e0b9c83a 	sub	fp,fp,r2
    4028:	05400b44 	movi	r21,45
    402c:	dd402785 	stb	r21,158(sp)
    4030:	da403215 	stw	r9,200(sp)
    4034:	00800044 	movi	r2,1
    4038:	9f06b03a 	or	r3,r19,fp
    403c:	003bb506 	br	2f14 <___vfprintf_internal_r+0x4d0>
    4040:	da003f15 	stw	r8,252(sp)
    4044:	da403e15 	stw	r9,248(sp)
    4048:	00091c00 	call	91c0 <__fpclassifyd>
    404c:	da003f17 	ldw	r8,252(sp)
    4050:	da403e17 	ldw	r9,248(sp)
    4054:	1000ce26 	beq	r2,zero,4390 <___vfprintf_internal_r+0x194c>
    4058:	057ff7c4 	movi	r21,-33
    405c:	00bfffc4 	movi	r2,-1
    4060:	856a703a 	and	r21,r16,r21
    4064:	4881e826 	beq	r9,r2,4808 <___vfprintf_internal_r+0x1dc4>
    4068:	008011c4 	movi	r2,71
    406c:	a881e326 	beq	r21,r2,47fc <___vfprintf_internal_r+0x1db8>
    4070:	db003917 	ldw	r12,228(sp)
    4074:	8ac04014 	ori	r11,r17,256
    4078:	dac02d15 	stw	r11,180(sp)
    407c:	6001ed16 	blt	r12,zero,4834 <___vfprintf_internal_r+0x1df0>
    4080:	dc803917 	ldw	r18,228(sp)
    4084:	d8002b05 	stb	zero,172(sp)
    4088:	00801984 	movi	r2,102
    408c:	80811826 	beq	r16,r2,44f0 <___vfprintf_internal_r+0x1aac>
    4090:	00801184 	movi	r2,70
    4094:	80811626 	beq	r16,r2,44f0 <___vfprintf_internal_r+0x1aac>
    4098:	00801144 	movi	r2,69
    409c:	a881e926 	beq	r21,r2,4844 <___vfprintf_internal_r+0x1e00>
    40a0:	4839883a 	mov	fp,r9
    40a4:	d8802604 	addi	r2,sp,152
    40a8:	d8800115 	stw	r2,4(sp)
    40ac:	d9403717 	ldw	r5,220(sp)
    40b0:	d8802504 	addi	r2,sp,148
    40b4:	d8800215 	stw	r2,8(sp)
    40b8:	d8802104 	addi	r2,sp,132
    40bc:	df000015 	stw	fp,0(sp)
    40c0:	d8800315 	stw	r2,12(sp)
    40c4:	b009883a 	mov	r4,r22
    40c8:	900d883a 	mov	r6,r18
    40cc:	01c00084 	movi	r7,2
    40d0:	da003f15 	stw	r8,252(sp)
    40d4:	da403e15 	stw	r9,248(sp)
    40d8:	0004dc80 	call	4dc8 <_dtoa_r>
    40dc:	d8803115 	stw	r2,196(sp)
    40e0:	008019c4 	movi	r2,103
    40e4:	da003f17 	ldw	r8,252(sp)
    40e8:	da403e17 	ldw	r9,248(sp)
    40ec:	80800226 	beq	r16,r2,40f8 <___vfprintf_internal_r+0x16b4>
    40f0:	008011c4 	movi	r2,71
    40f4:	8081101e 	bne	r16,r2,4538 <___vfprintf_internal_r+0x1af4>
    40f8:	8880004c 	andi	r2,r17,1
    40fc:	1001dd26 	beq	r2,zero,4874 <___vfprintf_internal_r+0x1e30>
    4100:	db003117 	ldw	r12,196(sp)
    4104:	6715883a 	add	r10,r12,fp
    4108:	d9003717 	ldw	r4,220(sp)
    410c:	900b883a 	mov	r5,r18
    4110:	000d883a 	mov	r6,zero
    4114:	000f883a 	mov	r7,zero
    4118:	da003f15 	stw	r8,252(sp)
    411c:	da403e15 	stw	r9,248(sp)
    4120:	da803d15 	stw	r10,244(sp)
    4124:	000ce880 	call	ce88 <__eqdf2>
    4128:	da003f17 	ldw	r8,252(sp)
    412c:	da403e17 	ldw	r9,248(sp)
    4130:	da803d17 	ldw	r10,244(sp)
    4134:	10016526 	beq	r2,zero,46cc <___vfprintf_internal_r+0x1c88>
    4138:	d8802117 	ldw	r2,132(sp)
    413c:	1280062e 	bgeu	r2,r10,4158 <___vfprintf_internal_r+0x1714>
    4140:	01000c04 	movi	r4,48
    4144:	10c00044 	addi	r3,r2,1
    4148:	d8c02115 	stw	r3,132(sp)
    414c:	11000005 	stb	r4,0(r2)
    4150:	d8802117 	ldw	r2,132(sp)
    4154:	12bffb36 	bltu	r2,r10,4144 <___vfprintf_internal_r+0x1700>
    4158:	db003117 	ldw	r12,196(sp)
    415c:	1305c83a 	sub	r2,r2,r12
    4160:	d8803315 	stw	r2,204(sp)
    4164:	008011c4 	movi	r2,71
    4168:	a8814d26 	beq	r21,r2,46a0 <___vfprintf_internal_r+0x1c5c>
    416c:	00801944 	movi	r2,101
    4170:	1402060e 	bge	r2,r16,498c <___vfprintf_internal_r+0x1f48>
    4174:	00801984 	movi	r2,102
    4178:	8081b426 	beq	r16,r2,484c <___vfprintf_internal_r+0x1e08>
    417c:	db002617 	ldw	r12,152(sp)
    4180:	db003415 	stw	r12,208(sp)
    4184:	db003417 	ldw	r12,208(sp)
    4188:	dac03317 	ldw	r11,204(sp)
    418c:	62c1a016 	blt	r12,r11,4810 <___vfprintf_internal_r+0x1dcc>
    4190:	8c40004c 	andi	r17,r17,1
    4194:	8801bf1e 	bne	r17,zero,4894 <___vfprintf_internal_r+0x1e50>
    4198:	6005883a 	mov	r2,r12
    419c:	6001b316 	blt	r12,zero,486c <___vfprintf_internal_r+0x1e28>
    41a0:	dc803417 	ldw	r18,208(sp)
    41a4:	df002b07 	ldb	fp,172(sp)
    41a8:	e0012e1e 	bne	fp,zero,4664 <___vfprintf_internal_r+0x1c20>
    41ac:	dc402d17 	ldw	r17,180(sp)
    41b0:	dd402783 	ldbu	r21,158(sp)
    41b4:	d8802b15 	stw	r2,172(sp)
    41b8:	dcc02d15 	stw	r19,180(sp)
    41bc:	d8003215 	stw	zero,200(sp)
    41c0:	003b7306 	br	2f90 <___vfprintf_internal_r+0x54c>
    41c4:	00800084 	movi	r2,2
    41c8:	003c4d06 	br	3300 <___vfprintf_internal_r+0x8bc>
    41cc:	8880040c 	andi	r2,r17,16
    41d0:	1000091e 	bne	r2,zero,41f8 <___vfprintf_internal_r+0x17b4>
    41d4:	8c40100c 	andi	r17,r17,64
    41d8:	88000726 	beq	r17,zero,41f8 <___vfprintf_internal_r+0x17b4>
    41dc:	db002d17 	ldw	r12,180(sp)
    41e0:	dac02f17 	ldw	r11,188(sp)
    41e4:	60800017 	ldw	r2,0(r12)
    41e8:	63000104 	addi	r12,r12,4
    41ec:	db002d15 	stw	r12,180(sp)
    41f0:	12c0000d 	sth	r11,0(r2)
    41f4:	003a4e06 	br	2b30 <___vfprintf_internal_r+0xec>
    41f8:	db002d17 	ldw	r12,180(sp)
    41fc:	dac02f17 	ldw	r11,188(sp)
    4200:	60800017 	ldw	r2,0(r12)
    4204:	63000104 	addi	r12,r12,4
    4208:	db002d15 	stw	r12,180(sp)
    420c:	12c00015 	stw	r11,0(r2)
    4210:	003a4706 	br	2b30 <___vfprintf_internal_r+0xec>
    4214:	1c000007 	ldb	r16,0(r3)
    4218:	1805883a 	mov	r2,r3
    421c:	003a6e06 	br	2bd8 <___vfprintf_internal_r+0x194>
    4220:	88c0100c 	andi	r3,r17,64
    4224:	18006b26 	beq	r3,zero,43d4 <___vfprintf_internal_r+0x1990>
    4228:	dac02d17 	ldw	r11,180(sp)
    422c:	14c0000b 	ldhu	r19,0(r2)
    4230:	0039883a 	mov	fp,zero
    4234:	5ac00104 	addi	r11,r11,4
    4238:	dac02d15 	stw	r11,180(sp)
    423c:	003cb206 	br	3508 <___vfprintf_internal_r+0xac4>
    4240:	01000074 	movhi	r4,1
    4244:	21047684 	addi	r4,r4,4570
    4248:	d9002c15 	stw	r4,176(sp)
    424c:	dac02c17 	ldw	r11,176(sp)
    4250:	1c87883a 	add	r3,r3,r18
    4254:	10800044 	addi	r2,r2,1
    4258:	42c00015 	stw	r11,0(r8)
    425c:	44800115 	stw	r18,4(r8)
    4260:	d8c02015 	stw	r3,128(sp)
    4264:	d8801f15 	stw	r2,124(sp)
    4268:	010001c4 	movi	r4,7
    426c:	20bee016 	blt	r4,r2,3df0 <___vfprintf_internal_r+0x13ac>
    4270:	42000204 	addi	r8,r8,8
    4274:	003ee506 	br	3e0c <___vfprintf_internal_r+0x13c8>
    4278:	01000074 	movhi	r4,1
    427c:	21047684 	addi	r4,r4,4570
    4280:	d9002c15 	stw	r4,176(sp)
    4284:	003bbe06 	br	3180 <___vfprintf_internal_r+0x73c>
    4288:	b009883a 	mov	r4,r22
    428c:	b80b883a 	mov	r5,r23
    4290:	d9801e04 	addi	r6,sp,120
    4294:	00095100 	call	9510 <__sprint_r>
    4298:	103ade1e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    429c:	d8c02017 	ldw	r3,128(sp)
    42a0:	da000404 	addi	r8,sp,16
    42a4:	003d6b06 	br	3854 <___vfprintf_internal_r+0xe10>
    42a8:	d8801f17 	ldw	r2,124(sp)
    42ac:	03000074 	movhi	r12,1
    42b0:	01000044 	movi	r4,1
    42b4:	18c00044 	addi	r3,r3,1
    42b8:	10800044 	addi	r2,r2,1
    42bc:	63047604 	addi	r12,r12,4568
    42c0:	41000115 	stw	r4,4(r8)
    42c4:	43000015 	stw	r12,0(r8)
    42c8:	d8c02015 	stw	r3,128(sp)
    42cc:	d8801f15 	stw	r2,124(sp)
    42d0:	010001c4 	movi	r4,7
    42d4:	20804916 	blt	r4,r2,43fc <___vfprintf_internal_r+0x19b8>
    42d8:	42000204 	addi	r8,r8,8
    42dc:	8000041e 	bne	r16,zero,42f0 <___vfprintf_internal_r+0x18ac>
    42e0:	dac03317 	ldw	r11,204(sp)
    42e4:	5800021e 	bne	r11,zero,42f0 <___vfprintf_internal_r+0x18ac>
    42e8:	8880004c 	andi	r2,r17,1
    42ec:	103bbb26 	beq	r2,zero,31dc <___vfprintf_internal_r+0x798>
    42f0:	db003817 	ldw	r12,224(sp)
    42f4:	d8801f17 	ldw	r2,124(sp)
    42f8:	dac03517 	ldw	r11,212(sp)
    42fc:	1b07883a 	add	r3,r3,r12
    4300:	10800044 	addi	r2,r2,1
    4304:	42c00015 	stw	r11,0(r8)
    4308:	43000115 	stw	r12,4(r8)
    430c:	d8c02015 	stw	r3,128(sp)
    4310:	d8801f15 	stw	r2,124(sp)
    4314:	010001c4 	movi	r4,7
    4318:	20812e16 	blt	r4,r2,47d4 <___vfprintf_internal_r+0x1d90>
    431c:	42000204 	addi	r8,r8,8
    4320:	0421c83a 	sub	r16,zero,r16
    4324:	04005c0e 	bge	zero,r16,4498 <___vfprintf_internal_r+0x1a54>
    4328:	04800404 	movi	r18,16
    432c:	94009f0e 	bge	r18,r16,45ac <___vfprintf_internal_r+0x1b68>
    4330:	01000074 	movhi	r4,1
    4334:	21047684 	addi	r4,r4,4570
    4338:	d9002c15 	stw	r4,176(sp)
    433c:	054001c4 	movi	r21,7
    4340:	00000306 	br	4350 <___vfprintf_internal_r+0x190c>
    4344:	42000204 	addi	r8,r8,8
    4348:	843ffc04 	addi	r16,r16,-16
    434c:	94009a0e 	bge	r18,r16,45b8 <___vfprintf_internal_r+0x1b74>
    4350:	18c00404 	addi	r3,r3,16
    4354:	10800044 	addi	r2,r2,1
    4358:	45000015 	stw	r20,0(r8)
    435c:	44800115 	stw	r18,4(r8)
    4360:	d8c02015 	stw	r3,128(sp)
    4364:	d8801f15 	stw	r2,124(sp)
    4368:	a8bff60e 	bge	r21,r2,4344 <___vfprintf_internal_r+0x1900>
    436c:	b009883a 	mov	r4,r22
    4370:	b80b883a 	mov	r5,r23
    4374:	d9801e04 	addi	r6,sp,120
    4378:	00095100 	call	9510 <__sprint_r>
    437c:	103aa51e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    4380:	d8c02017 	ldw	r3,128(sp)
    4384:	d8801f17 	ldw	r2,124(sp)
    4388:	da000404 	addi	r8,sp,16
    438c:	003fee06 	br	4348 <___vfprintf_internal_r+0x1904>
    4390:	008011c4 	movi	r2,71
    4394:	1400be16 	blt	r2,r16,4690 <___vfprintf_internal_r+0x1c4c>
    4398:	03000074 	movhi	r12,1
    439c:	63046804 	addi	r12,r12,4512
    43a0:	db003115 	stw	r12,196(sp)
    43a4:	00c000c4 	movi	r3,3
    43a8:	00bfdfc4 	movi	r2,-129
    43ac:	d8c02b15 	stw	r3,172(sp)
    43b0:	88a2703a 	and	r17,r17,r2
    43b4:	dd402783 	ldbu	r21,158(sp)
    43b8:	dcc02d15 	stw	r19,180(sp)
    43bc:	1825883a 	mov	r18,r3
    43c0:	d8003215 	stw	zero,200(sp)
    43c4:	d8003415 	stw	zero,208(sp)
    43c8:	003af106 	br	2f90 <___vfprintf_internal_r+0x54c>
    43cc:	4825883a 	mov	r18,r9
    43d0:	003c9306 	br	3620 <___vfprintf_internal_r+0xbdc>
    43d4:	db002d17 	ldw	r12,180(sp)
    43d8:	14c00017 	ldw	r19,0(r2)
    43dc:	0039883a 	mov	fp,zero
    43e0:	63000104 	addi	r12,r12,4
    43e4:	db002d15 	stw	r12,180(sp)
    43e8:	003c4706 	br	3508 <___vfprintf_internal_r+0xac4>
    43ec:	00800074 	movhi	r2,1
    43f0:	10846604 	addi	r2,r2,4504
    43f4:	d8803115 	stw	r2,196(sp)
    43f8:	003bf106 	br	33c0 <___vfprintf_internal_r+0x97c>
    43fc:	b009883a 	mov	r4,r22
    4400:	b80b883a 	mov	r5,r23
    4404:	d9801e04 	addi	r6,sp,120
    4408:	00095100 	call	9510 <__sprint_r>
    440c:	103a811e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    4410:	dc002617 	ldw	r16,152(sp)
    4414:	d8c02017 	ldw	r3,128(sp)
    4418:	da000404 	addi	r8,sp,16
    441c:	003faf06 	br	42dc <___vfprintf_internal_r+0x1898>
    4420:	db002e17 	ldw	r12,184(sp)
    4424:	1805883a 	mov	r2,r3
    4428:	dac02d15 	stw	r11,180(sp)
    442c:	0319c83a 	sub	r12,zero,r12
    4430:	db002e15 	stw	r12,184(sp)
    4434:	003a8206 	br	2e40 <___vfprintf_internal_r+0x3fc>
    4438:	18800044 	addi	r2,r3,1
    443c:	8c400814 	ori	r17,r17,32
    4440:	1c000047 	ldb	r16,1(r3)
    4444:	0039e406 	br	2bd8 <___vfprintf_internal_r+0x194>
    4448:	b009883a 	mov	r4,r22
    444c:	b80b883a 	mov	r5,r23
    4450:	d9801e04 	addi	r6,sp,120
    4454:	00095100 	call	9510 <__sprint_r>
    4458:	103a6e1e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    445c:	d8c02017 	ldw	r3,128(sp)
    4460:	da000404 	addi	r8,sp,16
    4464:	003d0c06 	br	3898 <___vfprintf_internal_r+0xe54>
    4468:	db002817 	ldw	r12,160(sp)
    446c:	d8c03117 	ldw	r3,196(sp)
    4470:	60e5c83a 	sub	r18,r12,r3
    4474:	003ac106 	br	2f7c <___vfprintf_internal_r+0x538>
    4478:	b009883a 	mov	r4,r22
    447c:	b80b883a 	mov	r5,r23
    4480:	d9801e04 	addi	r6,sp,120
    4484:	00095100 	call	9510 <__sprint_r>
    4488:	103a621e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    448c:	d8c02017 	ldw	r3,128(sp)
    4490:	d8801f17 	ldw	r2,124(sp)
    4494:	da000404 	addi	r8,sp,16
    4498:	db003317 	ldw	r12,204(sp)
    449c:	dac03117 	ldw	r11,196(sp)
    44a0:	10800044 	addi	r2,r2,1
    44a4:	1b07883a 	add	r3,r3,r12
    44a8:	42c00015 	stw	r11,0(r8)
    44ac:	43000115 	stw	r12,4(r8)
    44b0:	d8c02015 	stw	r3,128(sp)
    44b4:	d8801f15 	stw	r2,124(sp)
    44b8:	010001c4 	movi	r4,7
    44bc:	20bb460e 	bge	r4,r2,31d8 <___vfprintf_internal_r+0x794>
    44c0:	003d8506 	br	3ad8 <___vfprintf_internal_r+0x1094>
    44c4:	da003f15 	stw	r8,252(sp)
    44c8:	00029ac0 	call	29ac <strlen>
    44cc:	1025883a 	mov	r18,r2
    44d0:	da003f17 	ldw	r8,252(sp)
    44d4:	903c540e 	bge	r18,zero,3628 <___vfprintf_internal_r+0xbe4>
    44d8:	0005883a 	mov	r2,zero
    44dc:	003c5206 	br	3628 <___vfprintf_internal_r+0xbe4>
    44e0:	01000074 	movhi	r4,1
    44e4:	21047a84 	addi	r4,r4,4586
    44e8:	d9003615 	stw	r4,216(sp)
    44ec:	003adc06 	br	3060 <___vfprintf_internal_r+0x61c>
    44f0:	d8802604 	addi	r2,sp,152
    44f4:	d8800115 	stw	r2,4(sp)
    44f8:	d9403717 	ldw	r5,220(sp)
    44fc:	d8802504 	addi	r2,sp,148
    4500:	d8800215 	stw	r2,8(sp)
    4504:	d8802104 	addi	r2,sp,132
    4508:	da400015 	stw	r9,0(sp)
    450c:	d8800315 	stw	r2,12(sp)
    4510:	b009883a 	mov	r4,r22
    4514:	900d883a 	mov	r6,r18
    4518:	01c000c4 	movi	r7,3
    451c:	da003f15 	stw	r8,252(sp)
    4520:	da403e15 	stw	r9,248(sp)
    4524:	0004dc80 	call	4dc8 <_dtoa_r>
    4528:	da403e17 	ldw	r9,248(sp)
    452c:	da003f17 	ldw	r8,252(sp)
    4530:	d8803115 	stw	r2,196(sp)
    4534:	4839883a 	mov	fp,r9
    4538:	dac03117 	ldw	r11,196(sp)
    453c:	00801184 	movi	r2,70
    4540:	5f15883a 	add	r10,r11,fp
    4544:	a8bef01e 	bne	r21,r2,4108 <___vfprintf_internal_r+0x16c4>
    4548:	59000007 	ldb	r4,0(r11)
    454c:	00800c04 	movi	r2,48
    4550:	2080d526 	beq	r4,r2,48a8 <___vfprintf_internal_r+0x1e64>
    4554:	d8c02617 	ldw	r3,152(sp)
    4558:	50d5883a 	add	r10,r10,r3
    455c:	003eea06 	br	4108 <___vfprintf_internal_r+0x16c4>
    4560:	0025883a 	mov	r18,zero
    4564:	003db306 	br	3c34 <___vfprintf_internal_r+0x11f0>
    4568:	b009883a 	mov	r4,r22
    456c:	b80b883a 	mov	r5,r23
    4570:	d9801e04 	addi	r6,sp,120
    4574:	00095100 	call	9510 <__sprint_r>
    4578:	103a261e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    457c:	d8c02017 	ldw	r3,128(sp)
    4580:	da000404 	addi	r8,sp,16
    4584:	003daa06 	br	3c30 <___vfprintf_internal_r+0x11ec>
    4588:	b009883a 	mov	r4,r22
    458c:	b80b883a 	mov	r5,r23
    4590:	d9801e04 	addi	r6,sp,120
    4594:	00095100 	call	9510 <__sprint_r>
    4598:	103a1e1e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    459c:	d8802617 	ldw	r2,152(sp)
    45a0:	d8c02017 	ldw	r3,128(sp)
    45a4:	da000404 	addi	r8,sp,16
    45a8:	003e2c06 	br	3e5c <___vfprintf_internal_r+0x1418>
    45ac:	03000074 	movhi	r12,1
    45b0:	63047684 	addi	r12,r12,4570
    45b4:	db002c15 	stw	r12,176(sp)
    45b8:	dac02c17 	ldw	r11,176(sp)
    45bc:	1c07883a 	add	r3,r3,r16
    45c0:	10800044 	addi	r2,r2,1
    45c4:	42c00015 	stw	r11,0(r8)
    45c8:	44000115 	stw	r16,4(r8)
    45cc:	d8c02015 	stw	r3,128(sp)
    45d0:	d8801f15 	stw	r2,124(sp)
    45d4:	010001c4 	movi	r4,7
    45d8:	20bfa716 	blt	r4,r2,4478 <___vfprintf_internal_r+0x1a34>
    45dc:	42000204 	addi	r8,r8,8
    45e0:	003fad06 	br	4498 <___vfprintf_internal_r+0x1a54>
    45e4:	00800184 	movi	r2,6
    45e8:	1240012e 	bgeu	r2,r9,45f0 <___vfprintf_internal_r+0x1bac>
    45ec:	1013883a 	mov	r9,r2
    45f0:	4825883a 	mov	r18,r9
    45f4:	4805883a 	mov	r2,r9
    45f8:	4800c216 	blt	r9,zero,4904 <___vfprintf_internal_r+0x1ec0>
    45fc:	d8802b15 	stw	r2,172(sp)
    4600:	00800074 	movhi	r2,1
    4604:	10847404 	addi	r2,r2,4560
    4608:	d8803115 	stw	r2,196(sp)
    460c:	dcc02d15 	stw	r19,180(sp)
    4610:	d8003215 	stw	zero,200(sp)
    4614:	d8003415 	stw	zero,208(sp)
    4618:	0005883a 	mov	r2,zero
    461c:	003a6306 	br	2fac <___vfprintf_internal_r+0x568>
    4620:	0021883a 	mov	r16,zero
    4624:	003e1f06 	br	3ea4 <___vfprintf_internal_r+0x1460>
    4628:	b009883a 	mov	r4,r22
    462c:	b80b883a 	mov	r5,r23
    4630:	d9801e04 	addi	r6,sp,120
    4634:	00095100 	call	9510 <__sprint_r>
    4638:	1039f61e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    463c:	d8802617 	ldw	r2,152(sp)
    4640:	db003317 	ldw	r12,204(sp)
    4644:	d8c02017 	ldw	r3,128(sp)
    4648:	da000404 	addi	r8,sp,16
    464c:	6085c83a 	sub	r2,r12,r2
    4650:	003e1306 	br	3ea0 <___vfprintf_internal_r+0x145c>
    4654:	03000074 	movhi	r12,1
    4658:	63047a84 	addi	r12,r12,4586
    465c:	db003615 	stw	r12,216(sp)
    4660:	003b0206 	br	326c <___vfprintf_internal_r+0x828>
    4664:	00c00b44 	movi	r3,45
    4668:	d8802b15 	stw	r2,172(sp)
    466c:	dc402d17 	ldw	r17,180(sp)
    4670:	d8c02785 	stb	r3,158(sp)
    4674:	dcc02d15 	stw	r19,180(sp)
    4678:	d8003215 	stw	zero,200(sp)
    467c:	00800b44 	movi	r2,45
    4680:	003a4706 	br	2fa0 <___vfprintf_internal_r+0x55c>
    4684:	05400b44 	movi	r21,45
    4688:	dd402785 	stb	r21,158(sp)
    468c:	003b4706 	br	33ac <___vfprintf_internal_r+0x968>
    4690:	00800074 	movhi	r2,1
    4694:	10846904 	addi	r2,r2,4516
    4698:	d8803115 	stw	r2,196(sp)
    469c:	003f4106 	br	43a4 <___vfprintf_internal_r+0x1960>
    46a0:	d8c02617 	ldw	r3,152(sp)
    46a4:	00bfff44 	movi	r2,-3
    46a8:	18801116 	blt	r3,r2,46f0 <___vfprintf_internal_r+0x1cac>
    46ac:	48c01016 	blt	r9,r3,46f0 <___vfprintf_internal_r+0x1cac>
    46b0:	d8c03415 	stw	r3,208(sp)
    46b4:	040019c4 	movi	r16,103
    46b8:	003eb206 	br	4184 <___vfprintf_internal_r+0x1740>
    46bc:	01000074 	movhi	r4,1
    46c0:	21047684 	addi	r4,r4,4570
    46c4:	d9002c15 	stw	r4,176(sp)
    46c8:	003cb106 	br	3990 <___vfprintf_internal_r+0xf4c>
    46cc:	5005883a 	mov	r2,r10
    46d0:	003ea106 	br	4158 <___vfprintf_internal_r+0x1714>
    46d4:	da402b15 	stw	r9,172(sp)
    46d8:	dd402783 	ldbu	r21,158(sp)
    46dc:	4825883a 	mov	r18,r9
    46e0:	dcc02d15 	stw	r19,180(sp)
    46e4:	d8003215 	stw	zero,200(sp)
    46e8:	d8003415 	stw	zero,208(sp)
    46ec:	003a2806 	br	2f90 <___vfprintf_internal_r+0x54c>
    46f0:	843fff84 	addi	r16,r16,-2
    46f4:	1f3fffc4 	addi	fp,r3,-1
    46f8:	df002615 	stw	fp,152(sp)
    46fc:	dc0022c5 	stb	r16,139(sp)
    4700:	e0009816 	blt	fp,zero,4964 <___vfprintf_internal_r+0x1f20>
    4704:	00800ac4 	movi	r2,43
    4708:	d8802305 	stb	r2,140(sp)
    470c:	00800244 	movi	r2,9
    4710:	1700750e 	bge	r2,fp,48e8 <___vfprintf_internal_r+0x1ea4>
    4714:	dd4022c4 	addi	r21,sp,139
    4718:	dc002c15 	stw	r16,176(sp)
    471c:	4025883a 	mov	r18,r8
    4720:	a821883a 	mov	r16,r21
    4724:	e009883a 	mov	r4,fp
    4728:	01400284 	movi	r5,10
    472c:	0001ff80 	call	1ff8 <__modsi3>
    4730:	10800c04 	addi	r2,r2,48
    4734:	843fffc4 	addi	r16,r16,-1
    4738:	e009883a 	mov	r4,fp
    473c:	01400284 	movi	r5,10
    4740:	80800005 	stb	r2,0(r16)
    4744:	0001fa40 	call	1fa4 <__divsi3>
    4748:	1039883a 	mov	fp,r2
    474c:	00800244 	movi	r2,9
    4750:	173ff416 	blt	r2,fp,4724 <___vfprintf_internal_r+0x1ce0>
    4754:	9011883a 	mov	r8,r18
    4758:	e0800c04 	addi	r2,fp,48
    475c:	8025883a 	mov	r18,r16
    4760:	913fffc4 	addi	r4,r18,-1
    4764:	90bfffc5 	stb	r2,-1(r18)
    4768:	dc002c17 	ldw	r16,176(sp)
    476c:	2540852e 	bgeu	r4,r21,4984 <___vfprintf_internal_r+0x1f40>
    4770:	d9402384 	addi	r5,sp,142
    4774:	2c8bc83a 	sub	r5,r5,r18
    4778:	d8c02344 	addi	r3,sp,141
    477c:	a94b883a 	add	r5,r21,r5
    4780:	00000106 	br	4788 <___vfprintf_internal_r+0x1d44>
    4784:	20800003 	ldbu	r2,0(r4)
    4788:	18800005 	stb	r2,0(r3)
    478c:	18c00044 	addi	r3,r3,1
    4790:	21000044 	addi	r4,r4,1
    4794:	197ffb1e 	bne	r3,r5,4784 <___vfprintf_internal_r+0x1d40>
    4798:	d8802304 	addi	r2,sp,140
    479c:	1485c83a 	sub	r2,r2,r18
    47a0:	d8c02344 	addi	r3,sp,141
    47a4:	1885883a 	add	r2,r3,r2
    47a8:	dac03317 	ldw	r11,204(sp)
    47ac:	156bc83a 	sub	r21,r2,r21
    47b0:	dd403a15 	stw	r21,232(sp)
    47b4:	00800044 	movi	r2,1
    47b8:	5d65883a 	add	r18,r11,r21
    47bc:	12c0660e 	bge	r2,r11,4958 <___vfprintf_internal_r+0x1f14>
    47c0:	94800044 	addi	r18,r18,1
    47c4:	9005883a 	mov	r2,r18
    47c8:	90006116 	blt	r18,zero,4950 <___vfprintf_internal_r+0x1f0c>
    47cc:	d8003415 	stw	zero,208(sp)
    47d0:	003e7406 	br	41a4 <___vfprintf_internal_r+0x1760>
    47d4:	b009883a 	mov	r4,r22
    47d8:	b80b883a 	mov	r5,r23
    47dc:	d9801e04 	addi	r6,sp,120
    47e0:	00095100 	call	9510 <__sprint_r>
    47e4:	10398b1e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0x3d0>
    47e8:	dc002617 	ldw	r16,152(sp)
    47ec:	d8c02017 	ldw	r3,128(sp)
    47f0:	d8801f17 	ldw	r2,124(sp)
    47f4:	da000404 	addi	r8,sp,16
    47f8:	003ec906 	br	4320 <___vfprintf_internal_r+0x18dc>
    47fc:	483e1c1e 	bne	r9,zero,4070 <___vfprintf_internal_r+0x162c>
    4800:	9013883a 	mov	r9,r18
    4804:	003e1a06 	br	4070 <___vfprintf_internal_r+0x162c>
    4808:	02400184 	movi	r9,6
    480c:	003e1806 	br	4070 <___vfprintf_internal_r+0x162c>
    4810:	d8c03417 	ldw	r3,208(sp)
    4814:	00c04b0e 	bge	zero,r3,4944 <___vfprintf_internal_r+0x1f00>
    4818:	04800044 	movi	r18,1
    481c:	dac03317 	ldw	r11,204(sp)
    4820:	92e5883a 	add	r18,r18,r11
    4824:	9005883a 	mov	r2,r18
    4828:	903e5e0e 	bge	r18,zero,41a4 <___vfprintf_internal_r+0x1760>
    482c:	0005883a 	mov	r2,zero
    4830:	003e5c06 	br	41a4 <___vfprintf_internal_r+0x1760>
    4834:	00c00b44 	movi	r3,45
    4838:	64a0003c 	xorhi	r18,r12,32768
    483c:	d8c02b05 	stb	r3,172(sp)
    4840:	003e1106 	br	4088 <___vfprintf_internal_r+0x1644>
    4844:	4f000044 	addi	fp,r9,1
    4848:	003e1606 	br	40a4 <___vfprintf_internal_r+0x1660>
    484c:	d8c02617 	ldw	r3,152(sp)
    4850:	d8c03415 	stw	r3,208(sp)
    4854:	00c0350e 	bge	zero,r3,492c <___vfprintf_internal_r+0x1ee8>
    4858:	4800081e 	bne	r9,zero,487c <___vfprintf_internal_r+0x1e38>
    485c:	8c40004c 	andi	r17,r17,1
    4860:	8800061e 	bne	r17,zero,487c <___vfprintf_internal_r+0x1e38>
    4864:	1805883a 	mov	r2,r3
    4868:	183e4d0e 	bge	r3,zero,41a0 <___vfprintf_internal_r+0x175c>
    486c:	0005883a 	mov	r2,zero
    4870:	003e4b06 	br	41a0 <___vfprintf_internal_r+0x175c>
    4874:	d8802117 	ldw	r2,132(sp)
    4878:	003e3706 	br	4158 <___vfprintf_internal_r+0x1714>
    487c:	dac03417 	ldw	r11,208(sp)
    4880:	4a400044 	addi	r9,r9,1
    4884:	5a65883a 	add	r18,r11,r9
    4888:	9005883a 	mov	r2,r18
    488c:	903e450e 	bge	r18,zero,41a4 <___vfprintf_internal_r+0x1760>
    4890:	003fe606 	br	482c <___vfprintf_internal_r+0x1de8>
    4894:	db003417 	ldw	r12,208(sp)
    4898:	64800044 	addi	r18,r12,1
    489c:	9005883a 	mov	r2,r18
    48a0:	903e400e 	bge	r18,zero,41a4 <___vfprintf_internal_r+0x1760>
    48a4:	003fe106 	br	482c <___vfprintf_internal_r+0x1de8>
    48a8:	d9003717 	ldw	r4,220(sp)
    48ac:	900b883a 	mov	r5,r18
    48b0:	000d883a 	mov	r6,zero
    48b4:	000f883a 	mov	r7,zero
    48b8:	da003f15 	stw	r8,252(sp)
    48bc:	da403e15 	stw	r9,248(sp)
    48c0:	da803d15 	stw	r10,244(sp)
    48c4:	000ce880 	call	ce88 <__eqdf2>
    48c8:	da003f17 	ldw	r8,252(sp)
    48cc:	da403e17 	ldw	r9,248(sp)
    48d0:	da803d17 	ldw	r10,244(sp)
    48d4:	103f1f26 	beq	r2,zero,4554 <___vfprintf_internal_r+0x1b10>
    48d8:	00800044 	movi	r2,1
    48dc:	1707c83a 	sub	r3,r2,fp
    48e0:	d8c02615 	stw	r3,152(sp)
    48e4:	003f1c06 	br	4558 <___vfprintf_internal_r+0x1b14>
    48e8:	00800c04 	movi	r2,48
    48ec:	e0c00c04 	addi	r3,fp,48
    48f0:	d8802345 	stb	r2,141(sp)
    48f4:	d8c02385 	stb	r3,142(sp)
    48f8:	d88023c4 	addi	r2,sp,143
    48fc:	dd4022c4 	addi	r21,sp,139
    4900:	003fa906 	br	47a8 <___vfprintf_internal_r+0x1d64>
    4904:	0005883a 	mov	r2,zero
    4908:	003f3c06 	br	45fc <___vfprintf_internal_r+0x1bb8>
    490c:	dac02d17 	ldw	r11,180(sp)
    4910:	5a400017 	ldw	r9,0(r11)
    4914:	5ac00104 	addi	r11,r11,4
    4918:	dac02d15 	stw	r11,180(sp)
    491c:	483ec80e 	bge	r9,zero,4440 <___vfprintf_internal_r+0x19fc>
    4920:	027fffc4 	movi	r9,-1
    4924:	1c000047 	ldb	r16,1(r3)
    4928:	0038ab06 	br	2bd8 <___vfprintf_internal_r+0x194>
    492c:	4800111e 	bne	r9,zero,4974 <___vfprintf_internal_r+0x1f30>
    4930:	8c40004c 	andi	r17,r17,1
    4934:	88000f1e 	bne	r17,zero,4974 <___vfprintf_internal_r+0x1f30>
    4938:	00800044 	movi	r2,1
    493c:	1025883a 	mov	r18,r2
    4940:	003e1806 	br	41a4 <___vfprintf_internal_r+0x1760>
    4944:	04800084 	movi	r18,2
    4948:	90e5c83a 	sub	r18,r18,r3
    494c:	003fb306 	br	481c <___vfprintf_internal_r+0x1dd8>
    4950:	0005883a 	mov	r2,zero
    4954:	003f9d06 	br	47cc <___vfprintf_internal_r+0x1d88>
    4958:	88a2703a 	and	r17,r17,r2
    495c:	883f9926 	beq	r17,zero,47c4 <___vfprintf_internal_r+0x1d80>
    4960:	003f9706 	br	47c0 <___vfprintf_internal_r+0x1d7c>
    4964:	00800b44 	movi	r2,45
    4968:	0739c83a 	sub	fp,zero,fp
    496c:	d8802305 	stb	r2,140(sp)
    4970:	003f6606 	br	470c <___vfprintf_internal_r+0x1cc8>
    4974:	4c800084 	addi	r18,r9,2
    4978:	9005883a 	mov	r2,r18
    497c:	903e090e 	bge	r18,zero,41a4 <___vfprintf_internal_r+0x1760>
    4980:	003faa06 	br	482c <___vfprintf_internal_r+0x1de8>
    4984:	d8802344 	addi	r2,sp,141
    4988:	003f8706 	br	47a8 <___vfprintf_internal_r+0x1d64>
    498c:	d8c02617 	ldw	r3,152(sp)
    4990:	003f5806 	br	46f4 <___vfprintf_internal_r+0x1cb0>

00004994 <__vfprintf_internal>:
    4994:	2007883a 	mov	r3,r4
    4998:	01000074 	movhi	r4,1
    499c:	210bd104 	addi	r4,r4,12100
    49a0:	21000017 	ldw	r4,0(r4)
    49a4:	2805883a 	mov	r2,r5
    49a8:	300f883a 	mov	r7,r6
    49ac:	180b883a 	mov	r5,r3
    49b0:	100d883a 	mov	r6,r2
    49b4:	0002a441 	jmpi	2a44 <___vfprintf_internal_r>

000049b8 <__sbprintf>:
    49b8:	2880030b 	ldhu	r2,12(r5)
    49bc:	2ac01917 	ldw	r11,100(r5)
    49c0:	2a80038b 	ldhu	r10,14(r5)
    49c4:	2a400717 	ldw	r9,28(r5)
    49c8:	2a000917 	ldw	r8,36(r5)
    49cc:	defee204 	addi	sp,sp,-1144
    49d0:	00c10004 	movi	r3,1024
    49d4:	dc011a15 	stw	r16,1128(sp)
    49d8:	10bfff4c 	andi	r2,r2,65533
    49dc:	2821883a 	mov	r16,r5
    49e0:	d8cb883a 	add	r5,sp,r3
    49e4:	dc811c15 	stw	r18,1136(sp)
    49e8:	dc411b15 	stw	r17,1132(sp)
    49ec:	dfc11d15 	stw	ra,1140(sp)
    49f0:	2025883a 	mov	r18,r4
    49f4:	d881030d 	sth	r2,1036(sp)
    49f8:	dac11915 	stw	r11,1124(sp)
    49fc:	da81038d 	sth	r10,1038(sp)
    4a00:	da410715 	stw	r9,1052(sp)
    4a04:	da010915 	stw	r8,1060(sp)
    4a08:	dec10015 	stw	sp,1024(sp)
    4a0c:	dec10415 	stw	sp,1040(sp)
    4a10:	d8c10215 	stw	r3,1032(sp)
    4a14:	d8c10515 	stw	r3,1044(sp)
    4a18:	d8010615 	stw	zero,1048(sp)
    4a1c:	0002a440 	call	2a44 <___vfprintf_internal_r>
    4a20:	1023883a 	mov	r17,r2
    4a24:	10000416 	blt	r2,zero,4a38 <__sbprintf+0x80>
    4a28:	9009883a 	mov	r4,r18
    4a2c:	d9410004 	addi	r5,sp,1024
    4a30:	00066f80 	call	66f8 <_fflush_r>
    4a34:	10000d1e 	bne	r2,zero,4a6c <__sbprintf+0xb4>
    4a38:	d8c1030b 	ldhu	r3,1036(sp)
    4a3c:	18c0100c 	andi	r3,r3,64
    4a40:	18000326 	beq	r3,zero,4a50 <__sbprintf+0x98>
    4a44:	8080030b 	ldhu	r2,12(r16)
    4a48:	10801014 	ori	r2,r2,64
    4a4c:	8080030d 	sth	r2,12(r16)
    4a50:	8805883a 	mov	r2,r17
    4a54:	dfc11d17 	ldw	ra,1140(sp)
    4a58:	dc811c17 	ldw	r18,1136(sp)
    4a5c:	dc411b17 	ldw	r17,1132(sp)
    4a60:	dc011a17 	ldw	r16,1128(sp)
    4a64:	dec11e04 	addi	sp,sp,1144
    4a68:	f800283a 	ret
    4a6c:	047fffc4 	movi	r17,-1
    4a70:	003ff106 	br	4a38 <__sbprintf+0x80>

00004a74 <__swsetup_r>:
    4a74:	00800074 	movhi	r2,1
    4a78:	defffd04 	addi	sp,sp,-12
    4a7c:	108bd104 	addi	r2,r2,12100
    4a80:	dc400115 	stw	r17,4(sp)
    4a84:	2023883a 	mov	r17,r4
    4a88:	11000017 	ldw	r4,0(r2)
    4a8c:	dc000015 	stw	r16,0(sp)
    4a90:	dfc00215 	stw	ra,8(sp)
    4a94:	2821883a 	mov	r16,r5
    4a98:	20000226 	beq	r4,zero,4aa4 <__swsetup_r+0x30>
    4a9c:	20c00e17 	ldw	r3,56(r4)
    4aa0:	18003126 	beq	r3,zero,4b68 <__swsetup_r+0xf4>
    4aa4:	8080030b 	ldhu	r2,12(r16)
    4aa8:	10c0020c 	andi	r3,r2,8
    4aac:	100d883a 	mov	r6,r2
    4ab0:	18000f26 	beq	r3,zero,4af0 <__swsetup_r+0x7c>
    4ab4:	80c00417 	ldw	r3,16(r16)
    4ab8:	18001526 	beq	r3,zero,4b10 <__swsetup_r+0x9c>
    4abc:	1100004c 	andi	r4,r2,1
    4ac0:	20001c1e 	bne	r4,zero,4b34 <__swsetup_r+0xc0>
    4ac4:	1080008c 	andi	r2,r2,2
    4ac8:	1000291e 	bne	r2,zero,4b70 <__swsetup_r+0xfc>
    4acc:	80800517 	ldw	r2,20(r16)
    4ad0:	80800215 	stw	r2,8(r16)
    4ad4:	18001c26 	beq	r3,zero,4b48 <__swsetup_r+0xd4>
    4ad8:	0005883a 	mov	r2,zero
    4adc:	dfc00217 	ldw	ra,8(sp)
    4ae0:	dc400117 	ldw	r17,4(sp)
    4ae4:	dc000017 	ldw	r16,0(sp)
    4ae8:	dec00304 	addi	sp,sp,12
    4aec:	f800283a 	ret
    4af0:	3080040c 	andi	r2,r6,16
    4af4:	10002e26 	beq	r2,zero,4bb0 <__swsetup_r+0x13c>
    4af8:	3080010c 	andi	r2,r6,4
    4afc:	10001e1e 	bne	r2,zero,4b78 <__swsetup_r+0x104>
    4b00:	80c00417 	ldw	r3,16(r16)
    4b04:	30800214 	ori	r2,r6,8
    4b08:	8080030d 	sth	r2,12(r16)
    4b0c:	183feb1e 	bne	r3,zero,4abc <__swsetup_r+0x48>
    4b10:	1140a00c 	andi	r5,r2,640
    4b14:	01008004 	movi	r4,512
    4b18:	293fe826 	beq	r5,r4,4abc <__swsetup_r+0x48>
    4b1c:	8809883a 	mov	r4,r17
    4b20:	800b883a 	mov	r5,r16
    4b24:	00076600 	call	7660 <__smakebuf_r>
    4b28:	8080030b 	ldhu	r2,12(r16)
    4b2c:	80c00417 	ldw	r3,16(r16)
    4b30:	003fe206 	br	4abc <__swsetup_r+0x48>
    4b34:	80800517 	ldw	r2,20(r16)
    4b38:	80000215 	stw	zero,8(r16)
    4b3c:	0085c83a 	sub	r2,zero,r2
    4b40:	80800615 	stw	r2,24(r16)
    4b44:	183fe41e 	bne	r3,zero,4ad8 <__swsetup_r+0x64>
    4b48:	80c0030b 	ldhu	r3,12(r16)
    4b4c:	0005883a 	mov	r2,zero
    4b50:	1900200c 	andi	r4,r3,128
    4b54:	203fe126 	beq	r4,zero,4adc <__swsetup_r+0x68>
    4b58:	18c01014 	ori	r3,r3,64
    4b5c:	80c0030d 	sth	r3,12(r16)
    4b60:	00bfffc4 	movi	r2,-1
    4b64:	003fdd06 	br	4adc <__swsetup_r+0x68>
    4b68:	0006ad40 	call	6ad4 <__sinit>
    4b6c:	003fcd06 	br	4aa4 <__swsetup_r+0x30>
    4b70:	0005883a 	mov	r2,zero
    4b74:	003fd606 	br	4ad0 <__swsetup_r+0x5c>
    4b78:	81400c17 	ldw	r5,48(r16)
    4b7c:	28000626 	beq	r5,zero,4b98 <__swsetup_r+0x124>
    4b80:	80801004 	addi	r2,r16,64
    4b84:	28800326 	beq	r5,r2,4b94 <__swsetup_r+0x120>
    4b88:	8809883a 	mov	r4,r17
    4b8c:	0006c480 	call	6c48 <_free_r>
    4b90:	8180030b 	ldhu	r6,12(r16)
    4b94:	80000c15 	stw	zero,48(r16)
    4b98:	80c00417 	ldw	r3,16(r16)
    4b9c:	00bff6c4 	movi	r2,-37
    4ba0:	118c703a 	and	r6,r2,r6
    4ba4:	80000115 	stw	zero,4(r16)
    4ba8:	80c00015 	stw	r3,0(r16)
    4bac:	003fd506 	br	4b04 <__swsetup_r+0x90>
    4bb0:	00800244 	movi	r2,9
    4bb4:	88800015 	stw	r2,0(r17)
    4bb8:	30801014 	ori	r2,r6,64
    4bbc:	8080030d 	sth	r2,12(r16)
    4bc0:	00bfffc4 	movi	r2,-1
    4bc4:	003fc506 	br	4adc <__swsetup_r+0x68>

00004bc8 <quorem>:
    4bc8:	defff704 	addi	sp,sp,-36
    4bcc:	dc800215 	stw	r18,8(sp)
    4bd0:	20800417 	ldw	r2,16(r4)
    4bd4:	2c800417 	ldw	r18,16(r5)
    4bd8:	dfc00815 	stw	ra,32(sp)
    4bdc:	ddc00715 	stw	r23,28(sp)
    4be0:	dd800615 	stw	r22,24(sp)
    4be4:	dd400515 	stw	r21,20(sp)
    4be8:	dd000415 	stw	r20,16(sp)
    4bec:	dcc00315 	stw	r19,12(sp)
    4bf0:	dc400115 	stw	r17,4(sp)
    4bf4:	dc000015 	stw	r16,0(sp)
    4bf8:	14807116 	blt	r2,r18,4dc0 <quorem+0x1f8>
    4bfc:	94bfffc4 	addi	r18,r18,-1
    4c00:	94ad883a 	add	r22,r18,r18
    4c04:	b5ad883a 	add	r22,r22,r22
    4c08:	2c400504 	addi	r17,r5,20
    4c0c:	8da9883a 	add	r20,r17,r22
    4c10:	25400504 	addi	r21,r4,20
    4c14:	282f883a 	mov	r23,r5
    4c18:	adad883a 	add	r22,r21,r22
    4c1c:	a1400017 	ldw	r5,0(r20)
    4c20:	2021883a 	mov	r16,r4
    4c24:	b1000017 	ldw	r4,0(r22)
    4c28:	29400044 	addi	r5,r5,1
    4c2c:	00020540 	call	2054 <__udivsi3>
    4c30:	1027883a 	mov	r19,r2
    4c34:	10002c26 	beq	r2,zero,4ce8 <quorem+0x120>
    4c38:	a813883a 	mov	r9,r21
    4c3c:	8811883a 	mov	r8,r17
    4c40:	0009883a 	mov	r4,zero
    4c44:	000d883a 	mov	r6,zero
    4c48:	41c00017 	ldw	r7,0(r8)
    4c4c:	49400017 	ldw	r5,0(r9)
    4c50:	42000104 	addi	r8,r8,4
    4c54:	38bfffcc 	andi	r2,r7,65535
    4c58:	14c5383a 	mul	r2,r2,r19
    4c5c:	380ed43a 	srli	r7,r7,16
    4c60:	28ffffcc 	andi	r3,r5,65535
    4c64:	2085883a 	add	r2,r4,r2
    4c68:	1008d43a 	srli	r4,r2,16
    4c6c:	3ccf383a 	mul	r7,r7,r19
    4c70:	198d883a 	add	r6,r3,r6
    4c74:	10ffffcc 	andi	r3,r2,65535
    4c78:	30c7c83a 	sub	r3,r6,r3
    4c7c:	280ad43a 	srli	r5,r5,16
    4c80:	21c9883a 	add	r4,r4,r7
    4c84:	180dd43a 	srai	r6,r3,16
    4c88:	20bfffcc 	andi	r2,r4,65535
    4c8c:	288bc83a 	sub	r5,r5,r2
    4c90:	298b883a 	add	r5,r5,r6
    4c94:	280e943a 	slli	r7,r5,16
    4c98:	18ffffcc 	andi	r3,r3,65535
    4c9c:	2008d43a 	srli	r4,r4,16
    4ca0:	38ceb03a 	or	r7,r7,r3
    4ca4:	49c00015 	stw	r7,0(r9)
    4ca8:	280dd43a 	srai	r6,r5,16
    4cac:	4a400104 	addi	r9,r9,4
    4cb0:	a23fe52e 	bgeu	r20,r8,4c48 <quorem+0x80>
    4cb4:	b0800017 	ldw	r2,0(r22)
    4cb8:	10000b1e 	bne	r2,zero,4ce8 <quorem+0x120>
    4cbc:	b0bfff04 	addi	r2,r22,-4
    4cc0:	a880082e 	bgeu	r21,r2,4ce4 <quorem+0x11c>
    4cc4:	b0ffff17 	ldw	r3,-4(r22)
    4cc8:	18000326 	beq	r3,zero,4cd8 <quorem+0x110>
    4ccc:	00000506 	br	4ce4 <quorem+0x11c>
    4cd0:	10c00017 	ldw	r3,0(r2)
    4cd4:	1800031e 	bne	r3,zero,4ce4 <quorem+0x11c>
    4cd8:	10bfff04 	addi	r2,r2,-4
    4cdc:	94bfffc4 	addi	r18,r18,-1
    4ce0:	a8bffb36 	bltu	r21,r2,4cd0 <quorem+0x108>
    4ce4:	84800415 	stw	r18,16(r16)
    4ce8:	8009883a 	mov	r4,r16
    4cec:	b80b883a 	mov	r5,r23
    4cf0:	000858c0 	call	858c <__mcmp>
    4cf4:	10002616 	blt	r2,zero,4d90 <quorem+0x1c8>
    4cf8:	9cc00044 	addi	r19,r19,1
    4cfc:	a80d883a 	mov	r6,r21
    4d00:	000b883a 	mov	r5,zero
    4d04:	31000017 	ldw	r4,0(r6)
    4d08:	88800017 	ldw	r2,0(r17)
    4d0c:	31800104 	addi	r6,r6,4
    4d10:	20ffffcc 	andi	r3,r4,65535
    4d14:	194b883a 	add	r5,r3,r5
    4d18:	10ffffcc 	andi	r3,r2,65535
    4d1c:	28c7c83a 	sub	r3,r5,r3
    4d20:	1004d43a 	srli	r2,r2,16
    4d24:	2008d43a 	srli	r4,r4,16
    4d28:	180bd43a 	srai	r5,r3,16
    4d2c:	18ffffcc 	andi	r3,r3,65535
    4d30:	2089c83a 	sub	r4,r4,r2
    4d34:	2149883a 	add	r4,r4,r5
    4d38:	2004943a 	slli	r2,r4,16
    4d3c:	8c400104 	addi	r17,r17,4
    4d40:	200bd43a 	srai	r5,r4,16
    4d44:	10c6b03a 	or	r3,r2,r3
    4d48:	30ffff15 	stw	r3,-4(r6)
    4d4c:	a47fed2e 	bgeu	r20,r17,4d04 <quorem+0x13c>
    4d50:	9485883a 	add	r2,r18,r18
    4d54:	1085883a 	add	r2,r2,r2
    4d58:	a887883a 	add	r3,r21,r2
    4d5c:	18800017 	ldw	r2,0(r3)
    4d60:	10000b1e 	bne	r2,zero,4d90 <quorem+0x1c8>
    4d64:	18bfff04 	addi	r2,r3,-4
    4d68:	a880082e 	bgeu	r21,r2,4d8c <quorem+0x1c4>
    4d6c:	18ffff17 	ldw	r3,-4(r3)
    4d70:	18000326 	beq	r3,zero,4d80 <quorem+0x1b8>
    4d74:	00000506 	br	4d8c <quorem+0x1c4>
    4d78:	10c00017 	ldw	r3,0(r2)
    4d7c:	1800031e 	bne	r3,zero,4d8c <quorem+0x1c4>
    4d80:	10bfff04 	addi	r2,r2,-4
    4d84:	94bfffc4 	addi	r18,r18,-1
    4d88:	a8bffb36 	bltu	r21,r2,4d78 <quorem+0x1b0>
    4d8c:	84800415 	stw	r18,16(r16)
    4d90:	9805883a 	mov	r2,r19
    4d94:	dfc00817 	ldw	ra,32(sp)
    4d98:	ddc00717 	ldw	r23,28(sp)
    4d9c:	dd800617 	ldw	r22,24(sp)
    4da0:	dd400517 	ldw	r21,20(sp)
    4da4:	dd000417 	ldw	r20,16(sp)
    4da8:	dcc00317 	ldw	r19,12(sp)
    4dac:	dc800217 	ldw	r18,8(sp)
    4db0:	dc400117 	ldw	r17,4(sp)
    4db4:	dc000017 	ldw	r16,0(sp)
    4db8:	dec00904 	addi	sp,sp,36
    4dbc:	f800283a 	ret
    4dc0:	0005883a 	mov	r2,zero
    4dc4:	003ff306 	br	4d94 <quorem+0x1cc>

00004dc8 <_dtoa_r>:
    4dc8:	20801017 	ldw	r2,64(r4)
    4dcc:	deffde04 	addi	sp,sp,-136
    4dd0:	dd401d15 	stw	r21,116(sp)
    4dd4:	dcc01b15 	stw	r19,108(sp)
    4dd8:	dc801a15 	stw	r18,104(sp)
    4ddc:	dc401915 	stw	r17,100(sp)
    4de0:	dc001815 	stw	r16,96(sp)
    4de4:	dfc02115 	stw	ra,132(sp)
    4de8:	df002015 	stw	fp,128(sp)
    4dec:	ddc01f15 	stw	r23,124(sp)
    4df0:	dd801e15 	stw	r22,120(sp)
    4df4:	dd001c15 	stw	r20,112(sp)
    4df8:	d9c00315 	stw	r7,12(sp)
    4dfc:	2021883a 	mov	r16,r4
    4e00:	302b883a 	mov	r21,r6
    4e04:	2825883a 	mov	r18,r5
    4e08:	dc402417 	ldw	r17,144(sp)
    4e0c:	3027883a 	mov	r19,r6
    4e10:	10000826 	beq	r2,zero,4e34 <_dtoa_r+0x6c>
    4e14:	21801117 	ldw	r6,68(r4)
    4e18:	00c00044 	movi	r3,1
    4e1c:	100b883a 	mov	r5,r2
    4e20:	1986983a 	sll	r3,r3,r6
    4e24:	11800115 	stw	r6,4(r2)
    4e28:	10c00215 	stw	r3,8(r2)
    4e2c:	0007d600 	call	7d60 <_Bfree>
    4e30:	80001015 	stw	zero,64(r16)
    4e34:	a8002d16 	blt	r21,zero,4eec <_dtoa_r+0x124>
    4e38:	88000015 	stw	zero,0(r17)
    4e3c:	a8dffc2c 	andhi	r3,r21,32752
    4e40:	009ffc34 	movhi	r2,32752
    4e44:	18801b26 	beq	r3,r2,4eb4 <_dtoa_r+0xec>
    4e48:	9009883a 	mov	r4,r18
    4e4c:	980b883a 	mov	r5,r19
    4e50:	000d883a 	mov	r6,zero
    4e54:	000f883a 	mov	r7,zero
    4e58:	000ce880 	call	ce88 <__eqdf2>
    4e5c:	10002a1e 	bne	r2,zero,4f08 <_dtoa_r+0x140>
    4e60:	d8c02317 	ldw	r3,140(sp)
    4e64:	d9002517 	ldw	r4,148(sp)
    4e68:	00800044 	movi	r2,1
    4e6c:	18800015 	stw	r2,0(r3)
    4e70:	2001a226 	beq	r4,zero,54fc <_dtoa_r+0x734>
    4e74:	00800074 	movhi	r2,1
    4e78:	10847644 	addi	r2,r2,4569
    4e7c:	20800015 	stw	r2,0(r4)
    4e80:	10bfffc4 	addi	r2,r2,-1
    4e84:	dfc02117 	ldw	ra,132(sp)
    4e88:	df002017 	ldw	fp,128(sp)
    4e8c:	ddc01f17 	ldw	r23,124(sp)
    4e90:	dd801e17 	ldw	r22,120(sp)
    4e94:	dd401d17 	ldw	r21,116(sp)
    4e98:	dd001c17 	ldw	r20,112(sp)
    4e9c:	dcc01b17 	ldw	r19,108(sp)
    4ea0:	dc801a17 	ldw	r18,104(sp)
    4ea4:	dc401917 	ldw	r17,100(sp)
    4ea8:	dc001817 	ldw	r16,96(sp)
    4eac:	dec02204 	addi	sp,sp,136
    4eb0:	f800283a 	ret
    4eb4:	d8c02317 	ldw	r3,140(sp)
    4eb8:	0089c3c4 	movi	r2,9999
    4ebc:	18800015 	stw	r2,0(r3)
    4ec0:	90017c26 	beq	r18,zero,54b4 <_dtoa_r+0x6ec>
    4ec4:	00800074 	movhi	r2,1
    4ec8:	10848204 	addi	r2,r2,4616
    4ecc:	d9002517 	ldw	r4,148(sp)
    4ed0:	203fec26 	beq	r4,zero,4e84 <_dtoa_r+0xbc>
    4ed4:	10c000c7 	ldb	r3,3(r2)
    4ed8:	18017d1e 	bne	r3,zero,54d0 <_dtoa_r+0x708>
    4edc:	10c000c4 	addi	r3,r2,3
    4ee0:	d9802517 	ldw	r6,148(sp)
    4ee4:	30c00015 	stw	r3,0(r6)
    4ee8:	003fe606 	br	4e84 <_dtoa_r+0xbc>
    4eec:	04e00034 	movhi	r19,32768
    4ef0:	9cffffc4 	addi	r19,r19,-1
    4ef4:	00800044 	movi	r2,1
    4ef8:	ace6703a 	and	r19,r21,r19
    4efc:	88800015 	stw	r2,0(r17)
    4f00:	982b883a 	mov	r21,r19
    4f04:	003fcd06 	br	4e3c <_dtoa_r+0x74>
    4f08:	d8800204 	addi	r2,sp,8
    4f0c:	a822d53a 	srli	r17,r21,20
    4f10:	d8800015 	stw	r2,0(sp)
    4f14:	8009883a 	mov	r4,r16
    4f18:	900b883a 	mov	r5,r18
    4f1c:	980d883a 	mov	r6,r19
    4f20:	d9c00104 	addi	r7,sp,4
    4f24:	00089000 	call	8900 <__d2b>
    4f28:	1039883a 	mov	fp,r2
    4f2c:	88016a1e 	bne	r17,zero,54d8 <_dtoa_r+0x710>
    4f30:	dd000217 	ldw	r20,8(sp)
    4f34:	dc400117 	ldw	r17,4(sp)
    4f38:	00befbc4 	movi	r2,-1041
    4f3c:	a463883a 	add	r17,r20,r17
    4f40:	8882ea16 	blt	r17,r2,5aec <_dtoa_r+0xd24>
    4f44:	00bf0384 	movi	r2,-1010
    4f48:	1445c83a 	sub	r2,r2,r17
    4f4c:	89010484 	addi	r4,r17,1042
    4f50:	a8aa983a 	sll	r21,r21,r2
    4f54:	9108d83a 	srl	r4,r18,r4
    4f58:	a908b03a 	or	r4,r21,r4
    4f5c:	000e2180 	call	e218 <__floatunsidf>
    4f60:	017f8434 	movhi	r5,65040
    4f64:	01800044 	movi	r6,1
    4f68:	1009883a 	mov	r4,r2
    4f6c:	194b883a 	add	r5,r3,r5
    4f70:	8c7fffc4 	addi	r17,r17,-1
    4f74:	d9800f15 	stw	r6,60(sp)
    4f78:	000d883a 	mov	r6,zero
    4f7c:	01cffe34 	movhi	r7,16376
    4f80:	000d7f00 	call	d7f0 <__subdf3>
    4f84:	0198dbf4 	movhi	r6,25455
    4f88:	01cff4f4 	movhi	r7,16339
    4f8c:	1009883a 	mov	r4,r2
    4f90:	180b883a 	mov	r5,r3
    4f94:	3190d844 	addi	r6,r6,17249
    4f98:	39e1e9c4 	addi	r7,r7,-30809
    4f9c:	000d0cc0 	call	d0cc <__muldf3>
    4fa0:	01a2d874 	movhi	r6,35681
    4fa4:	01cff1f4 	movhi	r7,16327
    4fa8:	180b883a 	mov	r5,r3
    4fac:	31b22cc4 	addi	r6,r6,-14157
    4fb0:	39e28a04 	addi	r7,r7,-30168
    4fb4:	1009883a 	mov	r4,r2
    4fb8:	000bd200 	call	bd20 <__adddf3>
    4fbc:	8809883a 	mov	r4,r17
    4fc0:	102d883a 	mov	r22,r2
    4fc4:	182b883a 	mov	r21,r3
    4fc8:	000e1480 	call	e148 <__floatsidf>
    4fcc:	019427f4 	movhi	r6,20639
    4fd0:	01cff4f4 	movhi	r7,16339
    4fd4:	1009883a 	mov	r4,r2
    4fd8:	180b883a 	mov	r5,r3
    4fdc:	319e7ec4 	addi	r6,r6,31227
    4fe0:	39d104c4 	addi	r7,r7,17427
    4fe4:	000d0cc0 	call	d0cc <__muldf3>
    4fe8:	b009883a 	mov	r4,r22
    4fec:	a80b883a 	mov	r5,r21
    4ff0:	100d883a 	mov	r6,r2
    4ff4:	180f883a 	mov	r7,r3
    4ff8:	000bd200 	call	bd20 <__adddf3>
    4ffc:	1009883a 	mov	r4,r2
    5000:	180b883a 	mov	r5,r3
    5004:	102d883a 	mov	r22,r2
    5008:	182b883a 	mov	r21,r3
    500c:	000e0c00 	call	e0c0 <__fixdfsi>
    5010:	b009883a 	mov	r4,r22
    5014:	a80b883a 	mov	r5,r21
    5018:	000d883a 	mov	r6,zero
    501c:	000f883a 	mov	r7,zero
    5020:	d8800515 	stw	r2,20(sp)
    5024:	000cfec0 	call	cfec <__ledf2>
    5028:	10023116 	blt	r2,zero,58f0 <_dtoa_r+0xb28>
    502c:	d8c00517 	ldw	r3,20(sp)
    5030:	00800584 	movi	r2,22
    5034:	10c21f36 	bltu	r2,r3,58b4 <_dtoa_r+0xaec>
    5038:	180490fa 	slli	r2,r3,3
    503c:	00c00074 	movhi	r3,1
    5040:	18c49e04 	addi	r3,r3,4728
    5044:	1885883a 	add	r2,r3,r2
    5048:	11000017 	ldw	r4,0(r2)
    504c:	11400117 	ldw	r5,4(r2)
    5050:	900d883a 	mov	r6,r18
    5054:	980f883a 	mov	r7,r19
    5058:	000cf0c0 	call	cf0c <__gedf2>
    505c:	0082a70e 	bge	zero,r2,5afc <_dtoa_r+0xd34>
    5060:	d9000517 	ldw	r4,20(sp)
    5064:	d8000d15 	stw	zero,52(sp)
    5068:	213fffc4 	addi	r4,r4,-1
    506c:	d9000515 	stw	r4,20(sp)
    5070:	a463c83a 	sub	r17,r20,r17
    5074:	8dbfffc4 	addi	r22,r17,-1
    5078:	b0021916 	blt	r22,zero,58e0 <_dtoa_r+0xb18>
    507c:	d8000815 	stw	zero,32(sp)
    5080:	d8800517 	ldw	r2,20(sp)
    5084:	10020e16 	blt	r2,zero,58c0 <_dtoa_r+0xaf8>
    5088:	b0ad883a 	add	r22,r22,r2
    508c:	d8800a15 	stw	r2,40(sp)
    5090:	d8000915 	stw	zero,36(sp)
    5094:	d8c00317 	ldw	r3,12(sp)
    5098:	00800244 	movi	r2,9
    509c:	10c11a36 	bltu	r2,r3,5508 <_dtoa_r+0x740>
    50a0:	00800144 	movi	r2,5
    50a4:	10c4fc0e 	bge	r2,r3,6498 <_dtoa_r+0x16d0>
    50a8:	18ffff04 	addi	r3,r3,-4
    50ac:	d8c00315 	stw	r3,12(sp)
    50b0:	0029883a 	mov	r20,zero
    50b4:	d9800317 	ldw	r6,12(sp)
    50b8:	008000c4 	movi	r2,3
    50bc:	3083bd26 	beq	r6,r2,5fb4 <_dtoa_r+0x11ec>
    50c0:	1183670e 	bge	r2,r6,5e60 <_dtoa_r+0x1098>
    50c4:	d8c00317 	ldw	r3,12(sp)
    50c8:	00800104 	movi	r2,4
    50cc:	1882e726 	beq	r3,r2,5c6c <_dtoa_r+0xea4>
    50d0:	00800144 	movi	r2,5
    50d4:	1884f21e 	bne	r3,r2,64a0 <_dtoa_r+0x16d8>
    50d8:	00800044 	movi	r2,1
    50dc:	d8800b15 	stw	r2,44(sp)
    50e0:	d8c02217 	ldw	r3,136(sp)
    50e4:	d9000517 	ldw	r4,20(sp)
    50e8:	1907883a 	add	r3,r3,r4
    50ec:	19800044 	addi	r6,r3,1
    50f0:	d8c00c15 	stw	r3,48(sp)
    50f4:	d9800615 	stw	r6,24(sp)
    50f8:	0183c30e 	bge	zero,r6,6008 <_dtoa_r+0x1240>
    50fc:	d9800617 	ldw	r6,24(sp)
    5100:	3023883a 	mov	r17,r6
    5104:	80001115 	stw	zero,68(r16)
    5108:	008005c4 	movi	r2,23
    510c:	1184f62e 	bgeu	r2,r6,64e8 <_dtoa_r+0x1720>
    5110:	00c00044 	movi	r3,1
    5114:	00800104 	movi	r2,4
    5118:	1085883a 	add	r2,r2,r2
    511c:	11000504 	addi	r4,r2,20
    5120:	180b883a 	mov	r5,r3
    5124:	18c00044 	addi	r3,r3,1
    5128:	313ffb2e 	bgeu	r6,r4,5118 <_dtoa_r+0x350>
    512c:	81401115 	stw	r5,68(r16)
    5130:	8009883a 	mov	r4,r16
    5134:	0007cb80 	call	7cb8 <_Balloc>
    5138:	d8800715 	stw	r2,28(sp)
    513c:	80801015 	stw	r2,64(r16)
    5140:	00800384 	movi	r2,14
    5144:	1440fd36 	bltu	r2,r17,553c <_dtoa_r+0x774>
    5148:	a000fc26 	beq	r20,zero,553c <_dtoa_r+0x774>
    514c:	d8800517 	ldw	r2,20(sp)
    5150:	0083b90e 	bge	zero,r2,6038 <_dtoa_r+0x1270>
    5154:	d8c00517 	ldw	r3,20(sp)
    5158:	108003cc 	andi	r2,r2,15
    515c:	100490fa 	slli	r2,r2,3
    5160:	182fd13a 	srai	r23,r3,4
    5164:	00c00074 	movhi	r3,1
    5168:	18c49e04 	addi	r3,r3,4728
    516c:	1885883a 	add	r2,r3,r2
    5170:	b8c0040c 	andi	r3,r23,16
    5174:	12c00017 	ldw	r11,0(r2)
    5178:	12800117 	ldw	r10,4(r2)
    517c:	18039726 	beq	r3,zero,5fdc <_dtoa_r+0x1214>
    5180:	00800074 	movhi	r2,1
    5184:	10849404 	addi	r2,r2,4688
    5188:	11800817 	ldw	r6,32(r2)
    518c:	11c00917 	ldw	r7,36(r2)
    5190:	9009883a 	mov	r4,r18
    5194:	980b883a 	mov	r5,r19
    5198:	da801615 	stw	r10,88(sp)
    519c:	dac01515 	stw	r11,84(sp)
    51a0:	000c5bc0 	call	c5bc <__divdf3>
    51a4:	da801617 	ldw	r10,88(sp)
    51a8:	dac01517 	ldw	r11,84(sp)
    51ac:	bdc003cc 	andi	r23,r23,15
    51b0:	044000c4 	movi	r17,3
    51b4:	d8800e15 	stw	r2,56(sp)
    51b8:	182b883a 	mov	r21,r3
    51bc:	b8001126 	beq	r23,zero,5204 <_dtoa_r+0x43c>
    51c0:	05000074 	movhi	r20,1
    51c4:	a5049404 	addi	r20,r20,4688
    51c8:	5805883a 	mov	r2,r11
    51cc:	5007883a 	mov	r3,r10
    51d0:	b980004c 	andi	r6,r23,1
    51d4:	1009883a 	mov	r4,r2
    51d8:	b82fd07a 	srai	r23,r23,1
    51dc:	180b883a 	mov	r5,r3
    51e0:	30000426 	beq	r6,zero,51f4 <_dtoa_r+0x42c>
    51e4:	a1800017 	ldw	r6,0(r20)
    51e8:	a1c00117 	ldw	r7,4(r20)
    51ec:	8c400044 	addi	r17,r17,1
    51f0:	000d0cc0 	call	d0cc <__muldf3>
    51f4:	a5000204 	addi	r20,r20,8
    51f8:	b83ff51e 	bne	r23,zero,51d0 <_dtoa_r+0x408>
    51fc:	1017883a 	mov	r11,r2
    5200:	1815883a 	mov	r10,r3
    5204:	d9000e17 	ldw	r4,56(sp)
    5208:	a80b883a 	mov	r5,r21
    520c:	580d883a 	mov	r6,r11
    5210:	500f883a 	mov	r7,r10
    5214:	000c5bc0 	call	c5bc <__divdf3>
    5218:	1029883a 	mov	r20,r2
    521c:	182b883a 	mov	r21,r3
    5220:	d9800d17 	ldw	r6,52(sp)
    5224:	30000626 	beq	r6,zero,5240 <_dtoa_r+0x478>
    5228:	a009883a 	mov	r4,r20
    522c:	a80b883a 	mov	r5,r21
    5230:	000d883a 	mov	r6,zero
    5234:	01cffc34 	movhi	r7,16368
    5238:	000cfec0 	call	cfec <__ledf2>
    523c:	10043216 	blt	r2,zero,6308 <_dtoa_r+0x1540>
    5240:	8809883a 	mov	r4,r17
    5244:	000e1480 	call	e148 <__floatsidf>
    5248:	1009883a 	mov	r4,r2
    524c:	180b883a 	mov	r5,r3
    5250:	a00d883a 	mov	r6,r20
    5254:	a80f883a 	mov	r7,r21
    5258:	000d0cc0 	call	d0cc <__muldf3>
    525c:	000d883a 	mov	r6,zero
    5260:	1009883a 	mov	r4,r2
    5264:	180b883a 	mov	r5,r3
    5268:	01d00734 	movhi	r7,16412
    526c:	000bd200 	call	bd20 <__adddf3>
    5270:	1023883a 	mov	r17,r2
    5274:	d9800617 	ldw	r6,24(sp)
    5278:	00bf3034 	movhi	r2,64704
    527c:	1885883a 	add	r2,r3,r2
    5280:	d8800e15 	stw	r2,56(sp)
    5284:	30032e26 	beq	r6,zero,5f40 <_dtoa_r+0x1178>
    5288:	d8c00517 	ldw	r3,20(sp)
    528c:	da800617 	ldw	r10,24(sp)
    5290:	d8c01215 	stw	r3,72(sp)
    5294:	d9000b17 	ldw	r4,44(sp)
    5298:	2003b026 	beq	r4,zero,615c <_dtoa_r+0x1394>
    529c:	50bfffc4 	addi	r2,r10,-1
    52a0:	100490fa 	slli	r2,r2,3
    52a4:	00c00074 	movhi	r3,1
    52a8:	18c49e04 	addi	r3,r3,4728
    52ac:	1885883a 	add	r2,r3,r2
    52b0:	11800017 	ldw	r6,0(r2)
    52b4:	11c00117 	ldw	r7,4(r2)
    52b8:	d8800717 	ldw	r2,28(sp)
    52bc:	0009883a 	mov	r4,zero
    52c0:	014ff834 	movhi	r5,16352
    52c4:	da801615 	stw	r10,88(sp)
    52c8:	15c00044 	addi	r23,r2,1
    52cc:	000c5bc0 	call	c5bc <__divdf3>
    52d0:	d9c00e17 	ldw	r7,56(sp)
    52d4:	880d883a 	mov	r6,r17
    52d8:	1009883a 	mov	r4,r2
    52dc:	180b883a 	mov	r5,r3
    52e0:	000d7f00 	call	d7f0 <__subdf3>
    52e4:	a80b883a 	mov	r5,r21
    52e8:	a009883a 	mov	r4,r20
    52ec:	d8c01015 	stw	r3,64(sp)
    52f0:	d8800e15 	stw	r2,56(sp)
    52f4:	000e0c00 	call	e0c0 <__fixdfsi>
    52f8:	1009883a 	mov	r4,r2
    52fc:	d8801715 	stw	r2,92(sp)
    5300:	000e1480 	call	e148 <__floatsidf>
    5304:	a009883a 	mov	r4,r20
    5308:	a80b883a 	mov	r5,r21
    530c:	100d883a 	mov	r6,r2
    5310:	180f883a 	mov	r7,r3
    5314:	000d7f00 	call	d7f0 <__subdf3>
    5318:	da001717 	ldw	r8,92(sp)
    531c:	1829883a 	mov	r20,r3
    5320:	d8c00717 	ldw	r3,28(sp)
    5324:	d9000e17 	ldw	r4,56(sp)
    5328:	d9401017 	ldw	r5,64(sp)
    532c:	42000c04 	addi	r8,r8,48
    5330:	1023883a 	mov	r17,r2
    5334:	1a000005 	stb	r8,0(r3)
    5338:	880d883a 	mov	r6,r17
    533c:	a00f883a 	mov	r7,r20
    5340:	402b883a 	mov	r21,r8
    5344:	000cf0c0 	call	cf0c <__gedf2>
    5348:	00844516 	blt	zero,r2,6460 <_dtoa_r+0x1698>
    534c:	0009883a 	mov	r4,zero
    5350:	014ffc34 	movhi	r5,16368
    5354:	880d883a 	mov	r6,r17
    5358:	a00f883a 	mov	r7,r20
    535c:	000d7f00 	call	d7f0 <__subdf3>
    5360:	d9000e17 	ldw	r4,56(sp)
    5364:	d9401017 	ldw	r5,64(sp)
    5368:	100d883a 	mov	r6,r2
    536c:	180f883a 	mov	r7,r3
    5370:	000cf0c0 	call	cf0c <__gedf2>
    5374:	da801617 	ldw	r10,88(sp)
    5378:	00843616 	blt	zero,r2,6454 <_dtoa_r+0x168c>
    537c:	00800044 	movi	r2,1
    5380:	12806e0e 	bge	r2,r10,553c <_dtoa_r+0x774>
    5384:	d9000717 	ldw	r4,28(sp)
    5388:	dd801315 	stw	r22,76(sp)
    538c:	dc001115 	stw	r16,68(sp)
    5390:	2295883a 	add	r10,r4,r10
    5394:	dcc01415 	stw	r19,80(sp)
    5398:	502d883a 	mov	r22,r10
    539c:	dcc01017 	ldw	r19,64(sp)
    53a0:	b821883a 	mov	r16,r23
    53a4:	dc801015 	stw	r18,64(sp)
    53a8:	dc800e17 	ldw	r18,56(sp)
    53ac:	00000906 	br	53d4 <_dtoa_r+0x60c>
    53b0:	000d7f00 	call	d7f0 <__subdf3>
    53b4:	1009883a 	mov	r4,r2
    53b8:	180b883a 	mov	r5,r3
    53bc:	900d883a 	mov	r6,r18
    53c0:	980f883a 	mov	r7,r19
    53c4:	000cfec0 	call	cfec <__ledf2>
    53c8:	10040e16 	blt	r2,zero,6404 <_dtoa_r+0x163c>
    53cc:	b821883a 	mov	r16,r23
    53d0:	bd841026 	beq	r23,r22,6414 <_dtoa_r+0x164c>
    53d4:	9009883a 	mov	r4,r18
    53d8:	980b883a 	mov	r5,r19
    53dc:	000d883a 	mov	r6,zero
    53e0:	01d00934 	movhi	r7,16420
    53e4:	000d0cc0 	call	d0cc <__muldf3>
    53e8:	000d883a 	mov	r6,zero
    53ec:	01d00934 	movhi	r7,16420
    53f0:	8809883a 	mov	r4,r17
    53f4:	a00b883a 	mov	r5,r20
    53f8:	1025883a 	mov	r18,r2
    53fc:	1827883a 	mov	r19,r3
    5400:	000d0cc0 	call	d0cc <__muldf3>
    5404:	180b883a 	mov	r5,r3
    5408:	1009883a 	mov	r4,r2
    540c:	1823883a 	mov	r17,r3
    5410:	1029883a 	mov	r20,r2
    5414:	000e0c00 	call	e0c0 <__fixdfsi>
    5418:	1009883a 	mov	r4,r2
    541c:	102b883a 	mov	r21,r2
    5420:	000e1480 	call	e148 <__floatsidf>
    5424:	a009883a 	mov	r4,r20
    5428:	880b883a 	mov	r5,r17
    542c:	100d883a 	mov	r6,r2
    5430:	180f883a 	mov	r7,r3
    5434:	000d7f00 	call	d7f0 <__subdf3>
    5438:	ad400c04 	addi	r21,r21,48
    543c:	1009883a 	mov	r4,r2
    5440:	180b883a 	mov	r5,r3
    5444:	900d883a 	mov	r6,r18
    5448:	980f883a 	mov	r7,r19
    544c:	85400005 	stb	r21,0(r16)
    5450:	1023883a 	mov	r17,r2
    5454:	1829883a 	mov	r20,r3
    5458:	000cfec0 	call	cfec <__ledf2>
    545c:	bdc00044 	addi	r23,r23,1
    5460:	0009883a 	mov	r4,zero
    5464:	014ffc34 	movhi	r5,16368
    5468:	880d883a 	mov	r6,r17
    546c:	a00f883a 	mov	r7,r20
    5470:	103fcf0e 	bge	r2,zero,53b0 <_dtoa_r+0x5e8>
    5474:	d9801217 	ldw	r6,72(sp)
    5478:	dc001117 	ldw	r16,68(sp)
    547c:	d9800515 	stw	r6,20(sp)
    5480:	8009883a 	mov	r4,r16
    5484:	e00b883a 	mov	r5,fp
    5488:	0007d600 	call	7d60 <_Bfree>
    548c:	d8c00517 	ldw	r3,20(sp)
    5490:	d9002317 	ldw	r4,140(sp)
    5494:	d9802517 	ldw	r6,148(sp)
    5498:	b8000005 	stb	zero,0(r23)
    549c:	18800044 	addi	r2,r3,1
    54a0:	20800015 	stw	r2,0(r4)
    54a4:	30027226 	beq	r6,zero,5e70 <_dtoa_r+0x10a8>
    54a8:	35c00015 	stw	r23,0(r6)
    54ac:	d8800717 	ldw	r2,28(sp)
    54b0:	003e7406 	br	4e84 <_dtoa_r+0xbc>
    54b4:	00800434 	movhi	r2,16
    54b8:	10bfffc4 	addi	r2,r2,-1
    54bc:	a8aa703a 	and	r21,r21,r2
    54c0:	a83e801e 	bne	r21,zero,4ec4 <_dtoa_r+0xfc>
    54c4:	00800074 	movhi	r2,1
    54c8:	10847f04 	addi	r2,r2,4604
    54cc:	003e7f06 	br	4ecc <_dtoa_r+0x104>
    54d0:	10c00204 	addi	r3,r2,8
    54d4:	003e8206 	br	4ee0 <_dtoa_r+0x118>
    54d8:	01400434 	movhi	r5,16
    54dc:	297fffc4 	addi	r5,r5,-1
    54e0:	994a703a 	and	r5,r19,r5
    54e4:	9009883a 	mov	r4,r18
    54e8:	8c7f0044 	addi	r17,r17,-1023
    54ec:	294ffc34 	orhi	r5,r5,16368
    54f0:	dd000217 	ldw	r20,8(sp)
    54f4:	d8000f15 	stw	zero,60(sp)
    54f8:	003e9f06 	br	4f78 <_dtoa_r+0x1b0>
    54fc:	00800074 	movhi	r2,1
    5500:	10847604 	addi	r2,r2,4568
    5504:	003e5f06 	br	4e84 <_dtoa_r+0xbc>
    5508:	80001115 	stw	zero,68(r16)
    550c:	8009883a 	mov	r4,r16
    5510:	000b883a 	mov	r5,zero
    5514:	0007cb80 	call	7cb8 <_Balloc>
    5518:	01bfffc4 	movi	r6,-1
    551c:	d8800715 	stw	r2,28(sp)
    5520:	80801015 	stw	r2,64(r16)
    5524:	00800044 	movi	r2,1
    5528:	d9800c15 	stw	r6,48(sp)
    552c:	d8800b15 	stw	r2,44(sp)
    5530:	d9800615 	stw	r6,24(sp)
    5534:	d8002215 	stw	zero,136(sp)
    5538:	d8000315 	stw	zero,12(sp)
    553c:	d8800117 	ldw	r2,4(sp)
    5540:	10008e16 	blt	r2,zero,577c <_dtoa_r+0x9b4>
    5544:	d9000517 	ldw	r4,20(sp)
    5548:	00c00384 	movi	r3,14
    554c:	19008b16 	blt	r3,r4,577c <_dtoa_r+0x9b4>
    5550:	200490fa 	slli	r2,r4,3
    5554:	00c00074 	movhi	r3,1
    5558:	d9802217 	ldw	r6,136(sp)
    555c:	18c49e04 	addi	r3,r3,4728
    5560:	1885883a 	add	r2,r3,r2
    5564:	14400017 	ldw	r17,0(r2)
    5568:	15000117 	ldw	r20,4(r2)
    556c:	3001c716 	blt	r6,zero,5c8c <_dtoa_r+0xec4>
    5570:	880d883a 	mov	r6,r17
    5574:	a00f883a 	mov	r7,r20
    5578:	9009883a 	mov	r4,r18
    557c:	980b883a 	mov	r5,r19
    5580:	000c5bc0 	call	c5bc <__divdf3>
    5584:	180b883a 	mov	r5,r3
    5588:	1009883a 	mov	r4,r2
    558c:	000e0c00 	call	e0c0 <__fixdfsi>
    5590:	1009883a 	mov	r4,r2
    5594:	102d883a 	mov	r22,r2
    5598:	000e1480 	call	e148 <__floatsidf>
    559c:	1009883a 	mov	r4,r2
    55a0:	180b883a 	mov	r5,r3
    55a4:	880d883a 	mov	r6,r17
    55a8:	a00f883a 	mov	r7,r20
    55ac:	000d0cc0 	call	d0cc <__muldf3>
    55b0:	9009883a 	mov	r4,r18
    55b4:	980b883a 	mov	r5,r19
    55b8:	100d883a 	mov	r6,r2
    55bc:	180f883a 	mov	r7,r3
    55c0:	000d7f00 	call	d7f0 <__subdf3>
    55c4:	d9000717 	ldw	r4,28(sp)
    55c8:	d9800617 	ldw	r6,24(sp)
    55cc:	180b883a 	mov	r5,r3
    55d0:	b0c00c04 	addi	r3,r22,48
    55d4:	20c00005 	stb	r3,0(r4)
    55d8:	25c00044 	addi	r23,r4,1
    55dc:	01000044 	movi	r4,1
    55e0:	1011883a 	mov	r8,r2
    55e4:	2807883a 	mov	r3,r5
    55e8:	31003d26 	beq	r6,r4,56e0 <_dtoa_r+0x918>
    55ec:	000d883a 	mov	r6,zero
    55f0:	01d00934 	movhi	r7,16420
    55f4:	1009883a 	mov	r4,r2
    55f8:	000d0cc0 	call	d0cc <__muldf3>
    55fc:	1009883a 	mov	r4,r2
    5600:	180b883a 	mov	r5,r3
    5604:	000d883a 	mov	r6,zero
    5608:	000f883a 	mov	r7,zero
    560c:	1027883a 	mov	r19,r2
    5610:	182b883a 	mov	r21,r3
    5614:	000ce880 	call	ce88 <__eqdf2>
    5618:	103f9926 	beq	r2,zero,5480 <_dtoa_r+0x6b8>
    561c:	d8c00617 	ldw	r3,24(sp)
    5620:	d9000717 	ldw	r4,28(sp)
    5624:	b825883a 	mov	r18,r23
    5628:	18bfffc4 	addi	r2,r3,-1
    562c:	20ad883a 	add	r22,r4,r2
    5630:	dc000315 	stw	r16,12(sp)
    5634:	00000a06 	br	5660 <_dtoa_r+0x898>
    5638:	000d0cc0 	call	d0cc <__muldf3>
    563c:	1009883a 	mov	r4,r2
    5640:	180b883a 	mov	r5,r3
    5644:	000d883a 	mov	r6,zero
    5648:	000f883a 	mov	r7,zero
    564c:	1027883a 	mov	r19,r2
    5650:	182b883a 	mov	r21,r3
    5654:	b825883a 	mov	r18,r23
    5658:	000ce880 	call	ce88 <__eqdf2>
    565c:	10022626 	beq	r2,zero,5ef8 <_dtoa_r+0x1130>
    5660:	880d883a 	mov	r6,r17
    5664:	a00f883a 	mov	r7,r20
    5668:	9809883a 	mov	r4,r19
    566c:	a80b883a 	mov	r5,r21
    5670:	000c5bc0 	call	c5bc <__divdf3>
    5674:	180b883a 	mov	r5,r3
    5678:	1009883a 	mov	r4,r2
    567c:	000e0c00 	call	e0c0 <__fixdfsi>
    5680:	1009883a 	mov	r4,r2
    5684:	1021883a 	mov	r16,r2
    5688:	000e1480 	call	e148 <__floatsidf>
    568c:	1009883a 	mov	r4,r2
    5690:	180b883a 	mov	r5,r3
    5694:	880d883a 	mov	r6,r17
    5698:	a00f883a 	mov	r7,r20
    569c:	000d0cc0 	call	d0cc <__muldf3>
    56a0:	9809883a 	mov	r4,r19
    56a4:	a80b883a 	mov	r5,r21
    56a8:	100d883a 	mov	r6,r2
    56ac:	180f883a 	mov	r7,r3
    56b0:	000d7f00 	call	d7f0 <__subdf3>
    56b4:	82000c04 	addi	r8,r16,48
    56b8:	92000005 	stb	r8,0(r18)
    56bc:	1009883a 	mov	r4,r2
    56c0:	180b883a 	mov	r5,r3
    56c4:	000d883a 	mov	r6,zero
    56c8:	01d00934 	movhi	r7,16420
    56cc:	1011883a 	mov	r8,r2
    56d0:	bdc00044 	addi	r23,r23,1
    56d4:	95bfd81e 	bne	r18,r22,5638 <_dtoa_r+0x870>
    56d8:	802d883a 	mov	r22,r16
    56dc:	dc000317 	ldw	r16,12(sp)
    56e0:	4009883a 	mov	r4,r8
    56e4:	180b883a 	mov	r5,r3
    56e8:	400d883a 	mov	r6,r8
    56ec:	180f883a 	mov	r7,r3
    56f0:	000bd200 	call	bd20 <__adddf3>
    56f4:	8809883a 	mov	r4,r17
    56f8:	a00b883a 	mov	r5,r20
    56fc:	100d883a 	mov	r6,r2
    5700:	180f883a 	mov	r7,r3
    5704:	1027883a 	mov	r19,r2
    5708:	1825883a 	mov	r18,r3
    570c:	000cfec0 	call	cfec <__ledf2>
    5710:	10000816 	blt	r2,zero,5734 <_dtoa_r+0x96c>
    5714:	8809883a 	mov	r4,r17
    5718:	a00b883a 	mov	r5,r20
    571c:	980d883a 	mov	r6,r19
    5720:	900f883a 	mov	r7,r18
    5724:	000ce880 	call	ce88 <__eqdf2>
    5728:	103f551e 	bne	r2,zero,5480 <_dtoa_r+0x6b8>
    572c:	b580004c 	andi	r22,r22,1
    5730:	b03f5326 	beq	r22,zero,5480 <_dtoa_r+0x6b8>
    5734:	bd7fffc3 	ldbu	r21,-1(r23)
    5738:	b8bfffc4 	addi	r2,r23,-1
    573c:	1007883a 	mov	r3,r2
    5740:	01400e44 	movi	r5,57
    5744:	d9800717 	ldw	r6,28(sp)
    5748:	00000506 	br	5760 <_dtoa_r+0x998>
    574c:	18ffffc4 	addi	r3,r3,-1
    5750:	30825e26 	beq	r6,r2,60cc <_dtoa_r+0x1304>
    5754:	1d400003 	ldbu	r21,0(r3)
    5758:	102f883a 	mov	r23,r2
    575c:	10bfffc4 	addi	r2,r2,-1
    5760:	a9003fcc 	andi	r4,r21,255
    5764:	2100201c 	xori	r4,r4,128
    5768:	213fe004 	addi	r4,r4,-128
    576c:	217ff726 	beq	r4,r5,574c <_dtoa_r+0x984>
    5770:	aa000044 	addi	r8,r21,1
    5774:	12000005 	stb	r8,0(r2)
    5778:	003f4106 	br	5480 <_dtoa_r+0x6b8>
    577c:	d8c00b17 	ldw	r3,44(sp)
    5780:	18006726 	beq	r3,zero,5920 <_dtoa_r+0xb58>
    5784:	d9000317 	ldw	r4,12(sp)
    5788:	00c00044 	movi	r3,1
    578c:	19016a0e 	bge	r3,r4,5d38 <_dtoa_r+0xf70>
    5790:	d8800617 	ldw	r2,24(sp)
    5794:	d8c00917 	ldw	r3,36(sp)
    5798:	157fffc4 	addi	r21,r2,-1
    579c:	1d420716 	blt	r3,r21,5fbc <_dtoa_r+0x11f4>
    57a0:	1d6bc83a 	sub	r21,r3,r21
    57a4:	d8800617 	ldw	r2,24(sp)
    57a8:	1002c716 	blt	r2,zero,62c8 <_dtoa_r+0x1500>
    57ac:	dd000817 	ldw	r20,32(sp)
    57b0:	d8800617 	ldw	r2,24(sp)
    57b4:	d9800817 	ldw	r6,32(sp)
    57b8:	8009883a 	mov	r4,r16
    57bc:	01400044 	movi	r5,1
    57c0:	308d883a 	add	r6,r6,r2
    57c4:	d9800815 	stw	r6,32(sp)
    57c8:	b0ad883a 	add	r22,r22,r2
    57cc:	00080c40 	call	80c4 <__i2b>
    57d0:	1023883a 	mov	r17,r2
    57d4:	a0000826 	beq	r20,zero,57f8 <_dtoa_r+0xa30>
    57d8:	0580070e 	bge	zero,r22,57f8 <_dtoa_r+0xa30>
    57dc:	b005883a 	mov	r2,r22
    57e0:	a5812016 	blt	r20,r22,5c64 <_dtoa_r+0xe9c>
    57e4:	d8c00817 	ldw	r3,32(sp)
    57e8:	a0a9c83a 	sub	r20,r20,r2
    57ec:	b0adc83a 	sub	r22,r22,r2
    57f0:	1887c83a 	sub	r3,r3,r2
    57f4:	d8c00815 	stw	r3,32(sp)
    57f8:	d9000917 	ldw	r4,36(sp)
    57fc:	0100140e 	bge	zero,r4,5850 <_dtoa_r+0xa88>
    5800:	d9800b17 	ldw	r6,44(sp)
    5804:	3001e526 	beq	r6,zero,5f9c <_dtoa_r+0x11d4>
    5808:	05400e0e 	bge	zero,r21,5844 <_dtoa_r+0xa7c>
    580c:	880b883a 	mov	r5,r17
    5810:	8009883a 	mov	r4,r16
    5814:	a80d883a 	mov	r6,r21
    5818:	00082fc0 	call	82fc <__pow5mult>
    581c:	e00d883a 	mov	r6,fp
    5820:	8009883a 	mov	r4,r16
    5824:	100b883a 	mov	r5,r2
    5828:	1023883a 	mov	r17,r2
    582c:	00081000 	call	8100 <__multiply>
    5830:	102f883a 	mov	r23,r2
    5834:	e00b883a 	mov	r5,fp
    5838:	8009883a 	mov	r4,r16
    583c:	0007d600 	call	7d60 <_Bfree>
    5840:	b839883a 	mov	fp,r23
    5844:	d8800917 	ldw	r2,36(sp)
    5848:	154dc83a 	sub	r6,r2,r21
    584c:	3001281e 	bne	r6,zero,5cf0 <_dtoa_r+0xf28>
    5850:	05c00044 	movi	r23,1
    5854:	8009883a 	mov	r4,r16
    5858:	b80b883a 	mov	r5,r23
    585c:	00080c40 	call	80c4 <__i2b>
    5860:	d8c00a17 	ldw	r3,40(sp)
    5864:	102b883a 	mov	r21,r2
    5868:	00c0310e 	bge	zero,r3,5930 <_dtoa_r+0xb68>
    586c:	8009883a 	mov	r4,r16
    5870:	100b883a 	mov	r5,r2
    5874:	180d883a 	mov	r6,r3
    5878:	00082fc0 	call	82fc <__pow5mult>
    587c:	d9000317 	ldw	r4,12(sp)
    5880:	102b883a 	mov	r21,r2
    5884:	b9011f0e 	bge	r23,r4,5d04 <_dtoa_r+0xf3c>
    5888:	0027883a 	mov	r19,zero
    588c:	a8800417 	ldw	r2,16(r21)
    5890:	10800104 	addi	r2,r2,4
    5894:	1085883a 	add	r2,r2,r2
    5898:	1085883a 	add	r2,r2,r2
    589c:	a885883a 	add	r2,r21,r2
    58a0:	11000017 	ldw	r4,0(r2)
    58a4:	0007fac0 	call	7fac <__hi0bits>
    58a8:	00c00804 	movi	r3,32
    58ac:	1885c83a 	sub	r2,r3,r2
    58b0:	00002506 	br	5948 <_dtoa_r+0xb80>
    58b4:	01800044 	movi	r6,1
    58b8:	d9800d15 	stw	r6,52(sp)
    58bc:	003dec06 	br	5070 <_dtoa_r+0x2a8>
    58c0:	d8c00817 	ldw	r3,32(sp)
    58c4:	d9000517 	ldw	r4,20(sp)
    58c8:	d8000a15 	stw	zero,40(sp)
    58cc:	1907c83a 	sub	r3,r3,r4
    58d0:	010dc83a 	sub	r6,zero,r4
    58d4:	d8c00815 	stw	r3,32(sp)
    58d8:	d9800915 	stw	r6,36(sp)
    58dc:	003ded06 	br	5094 <_dtoa_r+0x2cc>
    58e0:	05adc83a 	sub	r22,zero,r22
    58e4:	dd800815 	stw	r22,32(sp)
    58e8:	002d883a 	mov	r22,zero
    58ec:	003de406 	br	5080 <_dtoa_r+0x2b8>
    58f0:	d9000517 	ldw	r4,20(sp)
    58f4:	000e1480 	call	e148 <__floatsidf>
    58f8:	1009883a 	mov	r4,r2
    58fc:	180b883a 	mov	r5,r3
    5900:	b00d883a 	mov	r6,r22
    5904:	a80f883a 	mov	r7,r21
    5908:	000ce880 	call	ce88 <__eqdf2>
    590c:	103dc726 	beq	r2,zero,502c <_dtoa_r+0x264>
    5910:	d8800517 	ldw	r2,20(sp)
    5914:	10bfffc4 	addi	r2,r2,-1
    5918:	d8800515 	stw	r2,20(sp)
    591c:	003dc306 	br	502c <_dtoa_r+0x264>
    5920:	dd400917 	ldw	r21,36(sp)
    5924:	dd000817 	ldw	r20,32(sp)
    5928:	0023883a 	mov	r17,zero
    592c:	003fa906 	br	57d4 <_dtoa_r+0xa0c>
    5930:	d9800317 	ldw	r6,12(sp)
    5934:	b981670e 	bge	r23,r6,5ed4 <_dtoa_r+0x110c>
    5938:	0027883a 	mov	r19,zero
    593c:	d8c00a17 	ldw	r3,40(sp)
    5940:	183fd21e 	bne	r3,zero,588c <_dtoa_r+0xac4>
    5944:	00800044 	movi	r2,1
    5948:	1585883a 	add	r2,r2,r22
    594c:	108007cc 	andi	r2,r2,31
    5950:	10005f26 	beq	r2,zero,5ad0 <_dtoa_r+0xd08>
    5954:	00c00804 	movi	r3,32
    5958:	1887c83a 	sub	r3,r3,r2
    595c:	01000104 	movi	r4,4
    5960:	20c2dd0e 	bge	r4,r3,64d8 <_dtoa_r+0x1710>
    5964:	d9000817 	ldw	r4,32(sp)
    5968:	00c00704 	movi	r3,28
    596c:	1885c83a 	sub	r2,r3,r2
    5970:	2089883a 	add	r4,r4,r2
    5974:	d9000815 	stw	r4,32(sp)
    5978:	a0a9883a 	add	r20,r20,r2
    597c:	b0ad883a 	add	r22,r22,r2
    5980:	d8800817 	ldw	r2,32(sp)
    5984:	0080050e 	bge	zero,r2,599c <_dtoa_r+0xbd4>
    5988:	e00b883a 	mov	r5,fp
    598c:	8009883a 	mov	r4,r16
    5990:	100d883a 	mov	r6,r2
    5994:	000843c0 	call	843c <__lshift>
    5998:	1039883a 	mov	fp,r2
    599c:	0580050e 	bge	zero,r22,59b4 <_dtoa_r+0xbec>
    59a0:	a80b883a 	mov	r5,r21
    59a4:	8009883a 	mov	r4,r16
    59a8:	b00d883a 	mov	r6,r22
    59ac:	000843c0 	call	843c <__lshift>
    59b0:	102b883a 	mov	r21,r2
    59b4:	d8c00d17 	ldw	r3,52(sp)
    59b8:	1801161e 	bne	r3,zero,5e14 <_dtoa_r+0x104c>
    59bc:	d8c00617 	ldw	r3,24(sp)
    59c0:	00c12d0e 	bge	zero,r3,5e78 <_dtoa_r+0x10b0>
    59c4:	d8c00b17 	ldw	r3,44(sp)
    59c8:	1800571e 	bne	r3,zero,5b28 <_dtoa_r+0xd60>
    59cc:	dc800717 	ldw	r18,28(sp)
    59d0:	dcc00617 	ldw	r19,24(sp)
    59d4:	9029883a 	mov	r20,r18
    59d8:	00000206 	br	59e4 <_dtoa_r+0xc1c>
    59dc:	0007d880 	call	7d88 <__multadd>
    59e0:	1039883a 	mov	fp,r2
    59e4:	e009883a 	mov	r4,fp
    59e8:	a80b883a 	mov	r5,r21
    59ec:	0004bc80 	call	4bc8 <quorem>
    59f0:	10800c04 	addi	r2,r2,48
    59f4:	90800005 	stb	r2,0(r18)
    59f8:	94800044 	addi	r18,r18,1
    59fc:	9507c83a 	sub	r3,r18,r20
    5a00:	8009883a 	mov	r4,r16
    5a04:	e00b883a 	mov	r5,fp
    5a08:	01800284 	movi	r6,10
    5a0c:	000f883a 	mov	r7,zero
    5a10:	1cfff216 	blt	r3,r19,59dc <_dtoa_r+0xc14>
    5a14:	1011883a 	mov	r8,r2
    5a18:	d8800617 	ldw	r2,24(sp)
    5a1c:	00822e0e 	bge	zero,r2,62d8 <_dtoa_r+0x1510>
    5a20:	d9000717 	ldw	r4,28(sp)
    5a24:	0025883a 	mov	r18,zero
    5a28:	20af883a 	add	r23,r4,r2
    5a2c:	e00b883a 	mov	r5,fp
    5a30:	01800044 	movi	r6,1
    5a34:	8009883a 	mov	r4,r16
    5a38:	da001715 	stw	r8,92(sp)
    5a3c:	000843c0 	call	843c <__lshift>
    5a40:	1009883a 	mov	r4,r2
    5a44:	a80b883a 	mov	r5,r21
    5a48:	1039883a 	mov	fp,r2
    5a4c:	000858c0 	call	858c <__mcmp>
    5a50:	da001717 	ldw	r8,92(sp)
    5a54:	00816e0e 	bge	zero,r2,6010 <_dtoa_r+0x1248>
    5a58:	b93fffc3 	ldbu	r4,-1(r23)
    5a5c:	b8bfffc4 	addi	r2,r23,-1
    5a60:	1007883a 	mov	r3,r2
    5a64:	01800e44 	movi	r6,57
    5a68:	d9c00717 	ldw	r7,28(sp)
    5a6c:	00000506 	br	5a84 <_dtoa_r+0xcbc>
    5a70:	18ffffc4 	addi	r3,r3,-1
    5a74:	38811926 	beq	r7,r2,5edc <_dtoa_r+0x1114>
    5a78:	19000003 	ldbu	r4,0(r3)
    5a7c:	102f883a 	mov	r23,r2
    5a80:	10bfffc4 	addi	r2,r2,-1
    5a84:	21403fcc 	andi	r5,r4,255
    5a88:	2940201c 	xori	r5,r5,128
    5a8c:	297fe004 	addi	r5,r5,-128
    5a90:	29bff726 	beq	r5,r6,5a70 <_dtoa_r+0xca8>
    5a94:	21000044 	addi	r4,r4,1
    5a98:	11000005 	stb	r4,0(r2)
    5a9c:	8009883a 	mov	r4,r16
    5aa0:	a80b883a 	mov	r5,r21
    5aa4:	0007d600 	call	7d60 <_Bfree>
    5aa8:	883e7526 	beq	r17,zero,5480 <_dtoa_r+0x6b8>
    5aac:	90000426 	beq	r18,zero,5ac0 <_dtoa_r+0xcf8>
    5ab0:	94400326 	beq	r18,r17,5ac0 <_dtoa_r+0xcf8>
    5ab4:	8009883a 	mov	r4,r16
    5ab8:	900b883a 	mov	r5,r18
    5abc:	0007d600 	call	7d60 <_Bfree>
    5ac0:	8009883a 	mov	r4,r16
    5ac4:	880b883a 	mov	r5,r17
    5ac8:	0007d600 	call	7d60 <_Bfree>
    5acc:	003e6c06 	br	5480 <_dtoa_r+0x6b8>
    5ad0:	00800704 	movi	r2,28
    5ad4:	d9800817 	ldw	r6,32(sp)
    5ad8:	a0a9883a 	add	r20,r20,r2
    5adc:	b0ad883a 	add	r22,r22,r2
    5ae0:	308d883a 	add	r6,r6,r2
    5ae4:	d9800815 	stw	r6,32(sp)
    5ae8:	003fa506 	br	5980 <_dtoa_r+0xbb8>
    5aec:	013efb84 	movi	r4,-1042
    5af0:	246bc83a 	sub	r21,r4,r17
    5af4:	9548983a 	sll	r4,r18,r21
    5af8:	003d1806 	br	4f5c <_dtoa_r+0x194>
    5afc:	d8000d15 	stw	zero,52(sp)
    5b00:	003d5b06 	br	5070 <_dtoa_r+0x2a8>
    5b04:	880b883a 	mov	r5,r17
    5b08:	8009883a 	mov	r4,r16
    5b0c:	01800284 	movi	r6,10
    5b10:	000f883a 	mov	r7,zero
    5b14:	0007d880 	call	7d88 <__multadd>
    5b18:	1023883a 	mov	r17,r2
    5b1c:	d8800c17 	ldw	r2,48(sp)
    5b20:	0082550e 	bge	zero,r2,6478 <_dtoa_r+0x16b0>
    5b24:	d8800615 	stw	r2,24(sp)
    5b28:	0500050e 	bge	zero,r20,5b40 <_dtoa_r+0xd78>
    5b2c:	880b883a 	mov	r5,r17
    5b30:	8009883a 	mov	r4,r16
    5b34:	a00d883a 	mov	r6,r20
    5b38:	000843c0 	call	843c <__lshift>
    5b3c:	1023883a 	mov	r17,r2
    5b40:	98016a1e 	bne	r19,zero,60ec <_dtoa_r+0x1324>
    5b44:	8829883a 	mov	r20,r17
    5b48:	d9000617 	ldw	r4,24(sp)
    5b4c:	dcc00717 	ldw	r19,28(sp)
    5b50:	9480004c 	andi	r18,r18,1
    5b54:	20bfffc4 	addi	r2,r4,-1
    5b58:	9885883a 	add	r2,r19,r2
    5b5c:	d8800415 	stw	r2,16(sp)
    5b60:	dc800615 	stw	r18,24(sp)
    5b64:	e009883a 	mov	r4,fp
    5b68:	a80b883a 	mov	r5,r21
    5b6c:	0004bc80 	call	4bc8 <quorem>
    5b70:	e009883a 	mov	r4,fp
    5b74:	880b883a 	mov	r5,r17
    5b78:	102f883a 	mov	r23,r2
    5b7c:	000858c0 	call	858c <__mcmp>
    5b80:	8009883a 	mov	r4,r16
    5b84:	a80b883a 	mov	r5,r21
    5b88:	a00d883a 	mov	r6,r20
    5b8c:	102d883a 	mov	r22,r2
    5b90:	00085ec0 	call	85ec <__mdiff>
    5b94:	1007883a 	mov	r3,r2
    5b98:	10800317 	ldw	r2,12(r2)
    5b9c:	bc800c04 	addi	r18,r23,48
    5ba0:	1000971e 	bne	r2,zero,5e00 <_dtoa_r+0x1038>
    5ba4:	180b883a 	mov	r5,r3
    5ba8:	e009883a 	mov	r4,fp
    5bac:	d8c01515 	stw	r3,84(sp)
    5bb0:	000858c0 	call	858c <__mcmp>
    5bb4:	d8c01517 	ldw	r3,84(sp)
    5bb8:	8009883a 	mov	r4,r16
    5bbc:	d8801515 	stw	r2,84(sp)
    5bc0:	180b883a 	mov	r5,r3
    5bc4:	0007d600 	call	7d60 <_Bfree>
    5bc8:	d8801517 	ldw	r2,84(sp)
    5bcc:	1000041e 	bne	r2,zero,5be0 <_dtoa_r+0xe18>
    5bd0:	d9800317 	ldw	r6,12(sp)
    5bd4:	3000021e 	bne	r6,zero,5be0 <_dtoa_r+0xe18>
    5bd8:	d8c00617 	ldw	r3,24(sp)
    5bdc:	18007626 	beq	r3,zero,5db8 <_dtoa_r+0xff0>
    5be0:	b0005b16 	blt	r22,zero,5d50 <_dtoa_r+0xf88>
    5be4:	b000041e 	bne	r22,zero,5bf8 <_dtoa_r+0xe30>
    5be8:	d9000317 	ldw	r4,12(sp)
    5bec:	2000021e 	bne	r4,zero,5bf8 <_dtoa_r+0xe30>
    5bf0:	d8c00617 	ldw	r3,24(sp)
    5bf4:	18005626 	beq	r3,zero,5d50 <_dtoa_r+0xf88>
    5bf8:	00814d16 	blt	zero,r2,6130 <_dtoa_r+0x1368>
    5bfc:	d8c00417 	ldw	r3,16(sp)
    5c00:	9d800044 	addi	r22,r19,1
    5c04:	9c800005 	stb	r18,0(r19)
    5c08:	b02f883a 	mov	r23,r22
    5c0c:	98c14c26 	beq	r19,r3,6140 <_dtoa_r+0x1378>
    5c10:	e00b883a 	mov	r5,fp
    5c14:	8009883a 	mov	r4,r16
    5c18:	01800284 	movi	r6,10
    5c1c:	000f883a 	mov	r7,zero
    5c20:	0007d880 	call	7d88 <__multadd>
    5c24:	1039883a 	mov	fp,r2
    5c28:	8d006d26 	beq	r17,r20,5de0 <_dtoa_r+0x1018>
    5c2c:	880b883a 	mov	r5,r17
    5c30:	01800284 	movi	r6,10
    5c34:	000f883a 	mov	r7,zero
    5c38:	8009883a 	mov	r4,r16
    5c3c:	0007d880 	call	7d88 <__multadd>
    5c40:	a00b883a 	mov	r5,r20
    5c44:	8009883a 	mov	r4,r16
    5c48:	01800284 	movi	r6,10
    5c4c:	000f883a 	mov	r7,zero
    5c50:	1023883a 	mov	r17,r2
    5c54:	0007d880 	call	7d88 <__multadd>
    5c58:	1029883a 	mov	r20,r2
    5c5c:	b027883a 	mov	r19,r22
    5c60:	003fc006 	br	5b64 <_dtoa_r+0xd9c>
    5c64:	a005883a 	mov	r2,r20
    5c68:	003ede06 	br	57e4 <_dtoa_r+0xa1c>
    5c6c:	01000044 	movi	r4,1
    5c70:	d9000b15 	stw	r4,44(sp)
    5c74:	d9802217 	ldw	r6,136(sp)
    5c78:	0180dc0e 	bge	zero,r6,5fec <_dtoa_r+0x1224>
    5c7c:	3023883a 	mov	r17,r6
    5c80:	d9800c15 	stw	r6,48(sp)
    5c84:	d9800615 	stw	r6,24(sp)
    5c88:	003d1e06 	br	5104 <_dtoa_r+0x33c>
    5c8c:	d8800617 	ldw	r2,24(sp)
    5c90:	00be3716 	blt	zero,r2,5570 <_dtoa_r+0x7a8>
    5c94:	1000be1e 	bne	r2,zero,5f90 <_dtoa_r+0x11c8>
    5c98:	8809883a 	mov	r4,r17
    5c9c:	a00b883a 	mov	r5,r20
    5ca0:	000d883a 	mov	r6,zero
    5ca4:	01d00534 	movhi	r7,16404
    5ca8:	000d0cc0 	call	d0cc <__muldf3>
    5cac:	1009883a 	mov	r4,r2
    5cb0:	180b883a 	mov	r5,r3
    5cb4:	900d883a 	mov	r6,r18
    5cb8:	980f883a 	mov	r7,r19
    5cbc:	000cf0c0 	call	cf0c <__gedf2>
    5cc0:	002b883a 	mov	r21,zero
    5cc4:	0023883a 	mov	r17,zero
    5cc8:	10007a16 	blt	r2,zero,5eb4 <_dtoa_r+0x10ec>
    5ccc:	d9002217 	ldw	r4,136(sp)
    5cd0:	ddc00717 	ldw	r23,28(sp)
    5cd4:	0108303a 	nor	r4,zero,r4
    5cd8:	d9000515 	stw	r4,20(sp)
    5cdc:	8009883a 	mov	r4,r16
    5ce0:	a80b883a 	mov	r5,r21
    5ce4:	0007d600 	call	7d60 <_Bfree>
    5ce8:	883f751e 	bne	r17,zero,5ac0 <_dtoa_r+0xcf8>
    5cec:	003de406 	br	5480 <_dtoa_r+0x6b8>
    5cf0:	e00b883a 	mov	r5,fp
    5cf4:	8009883a 	mov	r4,r16
    5cf8:	00082fc0 	call	82fc <__pow5mult>
    5cfc:	1039883a 	mov	fp,r2
    5d00:	003ed306 	br	5850 <_dtoa_r+0xa88>
    5d04:	903ee01e 	bne	r18,zero,5888 <_dtoa_r+0xac0>
    5d08:	00800434 	movhi	r2,16
    5d0c:	10bfffc4 	addi	r2,r2,-1
    5d10:	9884703a 	and	r2,r19,r2
    5d14:	103f081e 	bne	r2,zero,5938 <_dtoa_r+0xb70>
    5d18:	9cdffc2c 	andhi	r19,r19,32752
    5d1c:	983f0626 	beq	r19,zero,5938 <_dtoa_r+0xb70>
    5d20:	d8800817 	ldw	r2,32(sp)
    5d24:	b5800044 	addi	r22,r22,1
    5d28:	04c00044 	movi	r19,1
    5d2c:	10800044 	addi	r2,r2,1
    5d30:	d8800815 	stw	r2,32(sp)
    5d34:	003f0106 	br	593c <_dtoa_r+0xb74>
    5d38:	d9800f17 	ldw	r6,60(sp)
    5d3c:	30016826 	beq	r6,zero,62e0 <_dtoa_r+0x1518>
    5d40:	10810cc4 	addi	r2,r2,1075
    5d44:	dd400917 	ldw	r21,36(sp)
    5d48:	dd000817 	ldw	r20,32(sp)
    5d4c:	003e9906 	br	57b4 <_dtoa_r+0x9ec>
    5d50:	9011883a 	mov	r8,r18
    5d54:	4007883a 	mov	r3,r8
    5d58:	e02d883a 	mov	r22,fp
    5d5c:	0080100e 	bge	zero,r2,5da0 <_dtoa_r+0xfd8>
    5d60:	01800044 	movi	r6,1
    5d64:	8009883a 	mov	r4,r16
    5d68:	e00b883a 	mov	r5,fp
    5d6c:	da001515 	stw	r8,84(sp)
    5d70:	da001715 	stw	r8,92(sp)
    5d74:	000843c0 	call	843c <__lshift>
    5d78:	1009883a 	mov	r4,r2
    5d7c:	a80b883a 	mov	r5,r21
    5d80:	102d883a 	mov	r22,r2
    5d84:	000858c0 	call	858c <__mcmp>
    5d88:	d8c01517 	ldw	r3,84(sp)
    5d8c:	da001717 	ldw	r8,92(sp)
    5d90:	0081a50e 	bge	zero,r2,6428 <_dtoa_r+0x1660>
    5d94:	00800e44 	movi	r2,57
    5d98:	40817b26 	beq	r8,r2,6388 <_dtoa_r+0x15c0>
    5d9c:	40c00044 	addi	r3,r8,1
    5da0:	8825883a 	mov	r18,r17
    5da4:	9dc00044 	addi	r23,r19,1
    5da8:	98c00005 	stb	r3,0(r19)
    5dac:	a023883a 	mov	r17,r20
    5db0:	b039883a 	mov	fp,r22
    5db4:	003f3906 	br	5a9c <_dtoa_r+0xcd4>
    5db8:	00800e44 	movi	r2,57
    5dbc:	9011883a 	mov	r8,r18
    5dc0:	90817226 	beq	r18,r2,638c <_dtoa_r+0x15c4>
    5dc4:	0580010e 	bge	zero,r22,5dcc <_dtoa_r+0x1004>
    5dc8:	ba000c44 	addi	r8,r23,49
    5dcc:	8825883a 	mov	r18,r17
    5dd0:	9dc00044 	addi	r23,r19,1
    5dd4:	9a000005 	stb	r8,0(r19)
    5dd8:	a023883a 	mov	r17,r20
    5ddc:	003f2f06 	br	5a9c <_dtoa_r+0xcd4>
    5de0:	880b883a 	mov	r5,r17
    5de4:	8009883a 	mov	r4,r16
    5de8:	01800284 	movi	r6,10
    5dec:	000f883a 	mov	r7,zero
    5df0:	0007d880 	call	7d88 <__multadd>
    5df4:	1023883a 	mov	r17,r2
    5df8:	1029883a 	mov	r20,r2
    5dfc:	003f9706 	br	5c5c <_dtoa_r+0xe94>
    5e00:	8009883a 	mov	r4,r16
    5e04:	180b883a 	mov	r5,r3
    5e08:	0007d600 	call	7d60 <_Bfree>
    5e0c:	00800044 	movi	r2,1
    5e10:	003f7306 	br	5be0 <_dtoa_r+0xe18>
    5e14:	e009883a 	mov	r4,fp
    5e18:	a80b883a 	mov	r5,r21
    5e1c:	000858c0 	call	858c <__mcmp>
    5e20:	103ee60e 	bge	r2,zero,59bc <_dtoa_r+0xbf4>
    5e24:	8009883a 	mov	r4,r16
    5e28:	e00b883a 	mov	r5,fp
    5e2c:	01800284 	movi	r6,10
    5e30:	000f883a 	mov	r7,zero
    5e34:	0007d880 	call	7d88 <__multadd>
    5e38:	d9000517 	ldw	r4,20(sp)
    5e3c:	d9800b17 	ldw	r6,44(sp)
    5e40:	1039883a 	mov	fp,r2
    5e44:	213fffc4 	addi	r4,r4,-1
    5e48:	d9000515 	stw	r4,20(sp)
    5e4c:	303f2d1e 	bne	r6,zero,5b04 <_dtoa_r+0xd3c>
    5e50:	d9000c17 	ldw	r4,48(sp)
    5e54:	0101780e 	bge	zero,r4,6438 <_dtoa_r+0x1670>
    5e58:	d9000615 	stw	r4,24(sp)
    5e5c:	003edb06 	br	59cc <_dtoa_r+0xc04>
    5e60:	00800084 	movi	r2,2
    5e64:	30818e1e 	bne	r6,r2,64a0 <_dtoa_r+0x16d8>
    5e68:	d8000b15 	stw	zero,44(sp)
    5e6c:	003f8106 	br	5c74 <_dtoa_r+0xeac>
    5e70:	d8800717 	ldw	r2,28(sp)
    5e74:	003c0306 	br	4e84 <_dtoa_r+0xbc>
    5e78:	d9000317 	ldw	r4,12(sp)
    5e7c:	00800084 	movi	r2,2
    5e80:	113ed00e 	bge	r2,r4,59c4 <_dtoa_r+0xbfc>
    5e84:	d8c00617 	ldw	r3,24(sp)
    5e88:	183f901e 	bne	r3,zero,5ccc <_dtoa_r+0xf04>
    5e8c:	a80b883a 	mov	r5,r21
    5e90:	8009883a 	mov	r4,r16
    5e94:	01800144 	movi	r6,5
    5e98:	000f883a 	mov	r7,zero
    5e9c:	0007d880 	call	7d88 <__multadd>
    5ea0:	e009883a 	mov	r4,fp
    5ea4:	100b883a 	mov	r5,r2
    5ea8:	102b883a 	mov	r21,r2
    5eac:	000858c0 	call	858c <__mcmp>
    5eb0:	00bf860e 	bge	zero,r2,5ccc <_dtoa_r+0xf04>
    5eb4:	d9800717 	ldw	r6,28(sp)
    5eb8:	00800c44 	movi	r2,49
    5ebc:	30800005 	stb	r2,0(r6)
    5ec0:	d8800517 	ldw	r2,20(sp)
    5ec4:	35c00044 	addi	r23,r6,1
    5ec8:	10800044 	addi	r2,r2,1
    5ecc:	d8800515 	stw	r2,20(sp)
    5ed0:	003f8206 	br	5cdc <_dtoa_r+0xf14>
    5ed4:	903e981e 	bne	r18,zero,5938 <_dtoa_r+0xb70>
    5ed8:	003f8b06 	br	5d08 <_dtoa_r+0xf40>
    5edc:	d9800517 	ldw	r6,20(sp)
    5ee0:	d8c00717 	ldw	r3,28(sp)
    5ee4:	00800c44 	movi	r2,49
    5ee8:	31800044 	addi	r6,r6,1
    5eec:	d9800515 	stw	r6,20(sp)
    5ef0:	18800005 	stb	r2,0(r3)
    5ef4:	003ee906 	br	5a9c <_dtoa_r+0xcd4>
    5ef8:	dc000317 	ldw	r16,12(sp)
    5efc:	003d6006 	br	5480 <_dtoa_r+0x6b8>
    5f00:	8809883a 	mov	r4,r17
    5f04:	000e1480 	call	e148 <__floatsidf>
    5f08:	a009883a 	mov	r4,r20
    5f0c:	a80b883a 	mov	r5,r21
    5f10:	100d883a 	mov	r6,r2
    5f14:	180f883a 	mov	r7,r3
    5f18:	000d0cc0 	call	d0cc <__muldf3>
    5f1c:	1009883a 	mov	r4,r2
    5f20:	180b883a 	mov	r5,r3
    5f24:	000d883a 	mov	r6,zero
    5f28:	01d00734 	movhi	r7,16412
    5f2c:	000bd200 	call	bd20 <__adddf3>
    5f30:	1023883a 	mov	r17,r2
    5f34:	00bf3034 	movhi	r2,64704
    5f38:	1885883a 	add	r2,r3,r2
    5f3c:	d8800e15 	stw	r2,56(sp)
    5f40:	a009883a 	mov	r4,r20
    5f44:	a80b883a 	mov	r5,r21
    5f48:	000d883a 	mov	r6,zero
    5f4c:	01d00534 	movhi	r7,16404
    5f50:	000d7f00 	call	d7f0 <__subdf3>
    5f54:	d9c00e17 	ldw	r7,56(sp)
    5f58:	1009883a 	mov	r4,r2
    5f5c:	180b883a 	mov	r5,r3
    5f60:	880d883a 	mov	r6,r17
    5f64:	102b883a 	mov	r21,r2
    5f68:	1829883a 	mov	r20,r3
    5f6c:	000cf0c0 	call	cf0c <__gedf2>
    5f70:	00807716 	blt	zero,r2,6150 <_dtoa_r+0x1388>
    5f74:	d8800e17 	ldw	r2,56(sp)
    5f78:	a809883a 	mov	r4,r21
    5f7c:	a00b883a 	mov	r5,r20
    5f80:	11e0003c 	xorhi	r7,r2,32768
    5f84:	880d883a 	mov	r6,r17
    5f88:	000cfec0 	call	cfec <__ledf2>
    5f8c:	103d6b0e 	bge	r2,zero,553c <_dtoa_r+0x774>
    5f90:	002b883a 	mov	r21,zero
    5f94:	0023883a 	mov	r17,zero
    5f98:	003f4c06 	br	5ccc <_dtoa_r+0xf04>
    5f9c:	d9800917 	ldw	r6,36(sp)
    5fa0:	e00b883a 	mov	r5,fp
    5fa4:	8009883a 	mov	r4,r16
    5fa8:	00082fc0 	call	82fc <__pow5mult>
    5fac:	1039883a 	mov	fp,r2
    5fb0:	003e2706 	br	5850 <_dtoa_r+0xa88>
    5fb4:	d8000b15 	stw	zero,44(sp)
    5fb8:	003c4906 	br	50e0 <_dtoa_r+0x318>
    5fbc:	d9000917 	ldw	r4,36(sp)
    5fc0:	d9800a17 	ldw	r6,40(sp)
    5fc4:	dd400915 	stw	r21,36(sp)
    5fc8:	a905c83a 	sub	r2,r21,r4
    5fcc:	308d883a 	add	r6,r6,r2
    5fd0:	d9800a15 	stw	r6,40(sp)
    5fd4:	002b883a 	mov	r21,zero
    5fd8:	003df206 	br	57a4 <_dtoa_r+0x9dc>
    5fdc:	dc800e15 	stw	r18,56(sp)
    5fe0:	982b883a 	mov	r21,r19
    5fe4:	04400084 	movi	r17,2
    5fe8:	003c7406 	br	51bc <_dtoa_r+0x3f4>
    5fec:	04400044 	movi	r17,1
    5ff0:	dc400c15 	stw	r17,48(sp)
    5ff4:	dc400615 	stw	r17,24(sp)
    5ff8:	dc402215 	stw	r17,136(sp)
    5ffc:	80001115 	stw	zero,68(r16)
    6000:	000b883a 	mov	r5,zero
    6004:	003c4a06 	br	5130 <_dtoa_r+0x368>
    6008:	3023883a 	mov	r17,r6
    600c:	003ffb06 	br	5ffc <_dtoa_r+0x1234>
    6010:	1000021e 	bne	r2,zero,601c <_dtoa_r+0x1254>
    6014:	4200004c 	andi	r8,r8,1
    6018:	403e8f1e 	bne	r8,zero,5a58 <_dtoa_r+0xc90>
    601c:	01000c04 	movi	r4,48
    6020:	00000106 	br	6028 <_dtoa_r+0x1260>
    6024:	102f883a 	mov	r23,r2
    6028:	b8bfffc4 	addi	r2,r23,-1
    602c:	10c00007 	ldb	r3,0(r2)
    6030:	193ffc26 	beq	r3,r4,6024 <_dtoa_r+0x125c>
    6034:	003e9906 	br	5a9c <_dtoa_r+0xcd4>
    6038:	d9000517 	ldw	r4,20(sp)
    603c:	012fc83a 	sub	r23,zero,r4
    6040:	b800ad26 	beq	r23,zero,62f8 <_dtoa_r+0x1530>
    6044:	b88003cc 	andi	r2,r23,15
    6048:	100490fa 	slli	r2,r2,3
    604c:	00c00074 	movhi	r3,1
    6050:	18c49e04 	addi	r3,r3,4728
    6054:	1885883a 	add	r2,r3,r2
    6058:	11800017 	ldw	r6,0(r2)
    605c:	11c00117 	ldw	r7,4(r2)
    6060:	b82fd13a 	srai	r23,r23,4
    6064:	9009883a 	mov	r4,r18
    6068:	980b883a 	mov	r5,r19
    606c:	000d0cc0 	call	d0cc <__muldf3>
    6070:	1029883a 	mov	r20,r2
    6074:	182b883a 	mov	r21,r3
    6078:	b800f426 	beq	r23,zero,644c <_dtoa_r+0x1684>
    607c:	02000074 	movhi	r8,1
    6080:	42049404 	addi	r8,r8,4688
    6084:	8029883a 	mov	r20,r16
    6088:	04400084 	movi	r17,2
    608c:	4021883a 	mov	r16,r8
    6090:	b980004c 	andi	r6,r23,1
    6094:	1009883a 	mov	r4,r2
    6098:	b82fd07a 	srai	r23,r23,1
    609c:	180b883a 	mov	r5,r3
    60a0:	30000426 	beq	r6,zero,60b4 <_dtoa_r+0x12ec>
    60a4:	81800017 	ldw	r6,0(r16)
    60a8:	81c00117 	ldw	r7,4(r16)
    60ac:	8c400044 	addi	r17,r17,1
    60b0:	000d0cc0 	call	d0cc <__muldf3>
    60b4:	84000204 	addi	r16,r16,8
    60b8:	b83ff51e 	bne	r23,zero,6090 <_dtoa_r+0x12c8>
    60bc:	a021883a 	mov	r16,r20
    60c0:	182b883a 	mov	r21,r3
    60c4:	1029883a 	mov	r20,r2
    60c8:	003c5506 	br	5220 <_dtoa_r+0x458>
    60cc:	d9800517 	ldw	r6,20(sp)
    60d0:	d9000717 	ldw	r4,28(sp)
    60d4:	00c00c04 	movi	r3,48
    60d8:	31800044 	addi	r6,r6,1
    60dc:	d9800515 	stw	r6,20(sp)
    60e0:	20c00005 	stb	r3,0(r4)
    60e4:	02000c44 	movi	r8,49
    60e8:	003da206 	br	5774 <_dtoa_r+0x9ac>
    60ec:	89400117 	ldw	r5,4(r17)
    60f0:	8009883a 	mov	r4,r16
    60f4:	0007cb80 	call	7cb8 <_Balloc>
    60f8:	89800417 	ldw	r6,16(r17)
    60fc:	11000304 	addi	r4,r2,12
    6100:	89400304 	addi	r5,r17,12
    6104:	31800084 	addi	r6,r6,2
    6108:	318d883a 	add	r6,r6,r6
    610c:	318d883a 	add	r6,r6,r6
    6110:	1027883a 	mov	r19,r2
    6114:	00079000 	call	7900 <memcpy>
    6118:	8009883a 	mov	r4,r16
    611c:	980b883a 	mov	r5,r19
    6120:	01800044 	movi	r6,1
    6124:	000843c0 	call	843c <__lshift>
    6128:	1029883a 	mov	r20,r2
    612c:	003e8606 	br	5b48 <_dtoa_r+0xd80>
    6130:	00800e44 	movi	r2,57
    6134:	90809526 	beq	r18,r2,638c <_dtoa_r+0x15c4>
    6138:	92000044 	addi	r8,r18,1
    613c:	003f2306 	br	5dcc <_dtoa_r+0x1004>
    6140:	9011883a 	mov	r8,r18
    6144:	8825883a 	mov	r18,r17
    6148:	a023883a 	mov	r17,r20
    614c:	003e3706 	br	5a2c <_dtoa_r+0xc64>
    6150:	002b883a 	mov	r21,zero
    6154:	0023883a 	mov	r17,zero
    6158:	003f5606 	br	5eb4 <_dtoa_r+0x10ec>
    615c:	51bfffc4 	addi	r6,r10,-1
    6160:	300490fa 	slli	r2,r6,3
    6164:	00c00074 	movhi	r3,1
    6168:	18c49e04 	addi	r3,r3,4728
    616c:	1885883a 	add	r2,r3,r2
    6170:	d9c00e17 	ldw	r7,56(sp)
    6174:	11000017 	ldw	r4,0(r2)
    6178:	11400117 	ldw	r5,4(r2)
    617c:	d8800717 	ldw	r2,28(sp)
    6180:	d9801015 	stw	r6,64(sp)
    6184:	880d883a 	mov	r6,r17
    6188:	da801615 	stw	r10,88(sp)
    618c:	15c00044 	addi	r23,r2,1
    6190:	000d0cc0 	call	d0cc <__muldf3>
    6194:	a80b883a 	mov	r5,r21
    6198:	a009883a 	mov	r4,r20
    619c:	d8c01115 	stw	r3,68(sp)
    61a0:	d8800e15 	stw	r2,56(sp)
    61a4:	000e0c00 	call	e0c0 <__fixdfsi>
    61a8:	1009883a 	mov	r4,r2
    61ac:	1023883a 	mov	r17,r2
    61b0:	000e1480 	call	e148 <__floatsidf>
    61b4:	a009883a 	mov	r4,r20
    61b8:	a80b883a 	mov	r5,r21
    61bc:	100d883a 	mov	r6,r2
    61c0:	180f883a 	mov	r7,r3
    61c4:	000d7f00 	call	d7f0 <__subdf3>
    61c8:	1813883a 	mov	r9,r3
    61cc:	d8c00717 	ldw	r3,28(sp)
    61d0:	8c400c04 	addi	r17,r17,48
    61d4:	1011883a 	mov	r8,r2
    61d8:	1c400005 	stb	r17,0(r3)
    61dc:	da801617 	ldw	r10,88(sp)
    61e0:	00800044 	movi	r2,1
    61e4:	50802326 	beq	r10,r2,6274 <_dtoa_r+0x14ac>
    61e8:	d8800717 	ldw	r2,28(sp)
    61ec:	b82b883a 	mov	r21,r23
    61f0:	dc001315 	stw	r16,76(sp)
    61f4:	12a9883a 	add	r20,r2,r10
    61f8:	4807883a 	mov	r3,r9
    61fc:	4005883a 	mov	r2,r8
    6200:	dc801415 	stw	r18,80(sp)
    6204:	000d883a 	mov	r6,zero
    6208:	01d00934 	movhi	r7,16420
    620c:	1009883a 	mov	r4,r2
    6210:	180b883a 	mov	r5,r3
    6214:	000d0cc0 	call	d0cc <__muldf3>
    6218:	180b883a 	mov	r5,r3
    621c:	1009883a 	mov	r4,r2
    6220:	1821883a 	mov	r16,r3
    6224:	1025883a 	mov	r18,r2
    6228:	000e0c00 	call	e0c0 <__fixdfsi>
    622c:	1009883a 	mov	r4,r2
    6230:	1023883a 	mov	r17,r2
    6234:	000e1480 	call	e148 <__floatsidf>
    6238:	9009883a 	mov	r4,r18
    623c:	800b883a 	mov	r5,r16
    6240:	100d883a 	mov	r6,r2
    6244:	180f883a 	mov	r7,r3
    6248:	8c400c04 	addi	r17,r17,48
    624c:	000d7f00 	call	d7f0 <__subdf3>
    6250:	ad400044 	addi	r21,r21,1
    6254:	ac7fffc5 	stb	r17,-1(r21)
    6258:	ad3fea1e 	bne	r21,r20,6204 <_dtoa_r+0x143c>
    625c:	1813883a 	mov	r9,r3
    6260:	d8c01017 	ldw	r3,64(sp)
    6264:	dc001317 	ldw	r16,76(sp)
    6268:	dc801417 	ldw	r18,80(sp)
    626c:	1011883a 	mov	r8,r2
    6270:	b8ef883a 	add	r23,r23,r3
    6274:	d9000e17 	ldw	r4,56(sp)
    6278:	d9401117 	ldw	r5,68(sp)
    627c:	000d883a 	mov	r6,zero
    6280:	01cff834 	movhi	r7,16352
    6284:	da001715 	stw	r8,92(sp)
    6288:	da401515 	stw	r9,84(sp)
    628c:	000bd200 	call	bd20 <__adddf3>
    6290:	da001717 	ldw	r8,92(sp)
    6294:	da401517 	ldw	r9,84(sp)
    6298:	1009883a 	mov	r4,r2
    629c:	400d883a 	mov	r6,r8
    62a0:	480f883a 	mov	r7,r9
    62a4:	180b883a 	mov	r5,r3
    62a8:	000cfec0 	call	cfec <__ledf2>
    62ac:	da001717 	ldw	r8,92(sp)
    62b0:	da401517 	ldw	r9,84(sp)
    62b4:	10003b0e 	bge	r2,zero,63a4 <_dtoa_r+0x15dc>
    62b8:	d9001217 	ldw	r4,72(sp)
    62bc:	bd7fffc3 	ldbu	r21,-1(r23)
    62c0:	d9000515 	stw	r4,20(sp)
    62c4:	003d1c06 	br	5738 <_dtoa_r+0x970>
    62c8:	d8c00817 	ldw	r3,32(sp)
    62cc:	18a9c83a 	sub	r20,r3,r2
    62d0:	0005883a 	mov	r2,zero
    62d4:	003d3706 	br	57b4 <_dtoa_r+0x9ec>
    62d8:	00800044 	movi	r2,1
    62dc:	003dd006 	br	5a20 <_dtoa_r+0xc58>
    62e0:	d8c00217 	ldw	r3,8(sp)
    62e4:	00800d84 	movi	r2,54
    62e8:	dd400917 	ldw	r21,36(sp)
    62ec:	10c5c83a 	sub	r2,r2,r3
    62f0:	dd000817 	ldw	r20,32(sp)
    62f4:	003d2f06 	br	57b4 <_dtoa_r+0x9ec>
    62f8:	9029883a 	mov	r20,r18
    62fc:	982b883a 	mov	r21,r19
    6300:	04400084 	movi	r17,2
    6304:	003bc606 	br	5220 <_dtoa_r+0x458>
    6308:	d8800617 	ldw	r2,24(sp)
    630c:	103efc26 	beq	r2,zero,5f00 <_dtoa_r+0x1138>
    6310:	d8c00c17 	ldw	r3,48(sp)
    6314:	00fc890e 	bge	zero,r3,553c <_dtoa_r+0x774>
    6318:	a80b883a 	mov	r5,r21
    631c:	a009883a 	mov	r4,r20
    6320:	000d883a 	mov	r6,zero
    6324:	01d00934 	movhi	r7,16420
    6328:	000d0cc0 	call	d0cc <__muldf3>
    632c:	89000044 	addi	r4,r17,1
    6330:	1029883a 	mov	r20,r2
    6334:	182b883a 	mov	r21,r3
    6338:	000e1480 	call	e148 <__floatsidf>
    633c:	a009883a 	mov	r4,r20
    6340:	a80b883a 	mov	r5,r21
    6344:	100d883a 	mov	r6,r2
    6348:	180f883a 	mov	r7,r3
    634c:	000d0cc0 	call	d0cc <__muldf3>
    6350:	1009883a 	mov	r4,r2
    6354:	180b883a 	mov	r5,r3
    6358:	000d883a 	mov	r6,zero
    635c:	01d00734 	movhi	r7,16412
    6360:	000bd200 	call	bd20 <__adddf3>
    6364:	d9000517 	ldw	r4,20(sp)
    6368:	1023883a 	mov	r17,r2
    636c:	00bf3034 	movhi	r2,64704
    6370:	213fffc4 	addi	r4,r4,-1
    6374:	1885883a 	add	r2,r3,r2
    6378:	d9001215 	stw	r4,72(sp)
    637c:	d8800e15 	stw	r2,56(sp)
    6380:	da800c17 	ldw	r10,48(sp)
    6384:	003bc306 	br	5294 <_dtoa_r+0x4cc>
    6388:	b039883a 	mov	fp,r22
    638c:	01000e44 	movi	r4,57
    6390:	8825883a 	mov	r18,r17
    6394:	9dc00044 	addi	r23,r19,1
    6398:	99000005 	stb	r4,0(r19)
    639c:	a023883a 	mov	r17,r20
    63a0:	003dae06 	br	5a5c <_dtoa_r+0xc94>
    63a4:	d9800e17 	ldw	r6,56(sp)
    63a8:	d9c01117 	ldw	r7,68(sp)
    63ac:	0009883a 	mov	r4,zero
    63b0:	014ff834 	movhi	r5,16352
    63b4:	da001715 	stw	r8,92(sp)
    63b8:	da401515 	stw	r9,84(sp)
    63bc:	000d7f00 	call	d7f0 <__subdf3>
    63c0:	da001717 	ldw	r8,92(sp)
    63c4:	da401517 	ldw	r9,84(sp)
    63c8:	1009883a 	mov	r4,r2
    63cc:	180b883a 	mov	r5,r3
    63d0:	400d883a 	mov	r6,r8
    63d4:	480f883a 	mov	r7,r9
    63d8:	000cf0c0 	call	cf0c <__gedf2>
    63dc:	00bc570e 	bge	zero,r2,553c <_dtoa_r+0x774>
    63e0:	01000c04 	movi	r4,48
    63e4:	00000106 	br	63ec <_dtoa_r+0x1624>
    63e8:	102f883a 	mov	r23,r2
    63ec:	b8bfffc4 	addi	r2,r23,-1
    63f0:	10c00007 	ldb	r3,0(r2)
    63f4:	193ffc26 	beq	r3,r4,63e8 <_dtoa_r+0x1620>
    63f8:	d9801217 	ldw	r6,72(sp)
    63fc:	d9800515 	stw	r6,20(sp)
    6400:	003c1f06 	br	5480 <_dtoa_r+0x6b8>
    6404:	d8801217 	ldw	r2,72(sp)
    6408:	dc001117 	ldw	r16,68(sp)
    640c:	d8800515 	stw	r2,20(sp)
    6410:	003cc906 	br	5738 <_dtoa_r+0x970>
    6414:	dd801317 	ldw	r22,76(sp)
    6418:	dc001117 	ldw	r16,68(sp)
    641c:	dcc01417 	ldw	r19,80(sp)
    6420:	dc801017 	ldw	r18,64(sp)
    6424:	003c4506 	br	553c <_dtoa_r+0x774>
    6428:	103e5d1e 	bne	r2,zero,5da0 <_dtoa_r+0xfd8>
    642c:	4080004c 	andi	r2,r8,1
    6430:	103e5b26 	beq	r2,zero,5da0 <_dtoa_r+0xfd8>
    6434:	003e5706 	br	5d94 <_dtoa_r+0xfcc>
    6438:	d8c00317 	ldw	r3,12(sp)
    643c:	00800084 	movi	r2,2
    6440:	10c00a16 	blt	r2,r3,646c <_dtoa_r+0x16a4>
    6444:	d9000c17 	ldw	r4,48(sp)
    6448:	003e8306 	br	5e58 <_dtoa_r+0x1090>
    644c:	04400084 	movi	r17,2
    6450:	003b7306 	br	5220 <_dtoa_r+0x458>
    6454:	d9801217 	ldw	r6,72(sp)
    6458:	d9800515 	stw	r6,20(sp)
    645c:	003cb606 	br	5738 <_dtoa_r+0x970>
    6460:	d9001217 	ldw	r4,72(sp)
    6464:	d9000515 	stw	r4,20(sp)
    6468:	003c0506 	br	5480 <_dtoa_r+0x6b8>
    646c:	d9800c17 	ldw	r6,48(sp)
    6470:	d9800615 	stw	r6,24(sp)
    6474:	003e8306 	br	5e84 <_dtoa_r+0x10bc>
    6478:	d9800317 	ldw	r6,12(sp)
    647c:	00800084 	movi	r2,2
    6480:	11800216 	blt	r2,r6,648c <_dtoa_r+0x16c4>
    6484:	d8800c17 	ldw	r2,48(sp)
    6488:	003da606 	br	5b24 <_dtoa_r+0xd5c>
    648c:	d8800c17 	ldw	r2,48(sp)
    6490:	d8800615 	stw	r2,24(sp)
    6494:	003e7b06 	br	5e84 <_dtoa_r+0x10bc>
    6498:	05000044 	movi	r20,1
    649c:	003b0506 	br	50b4 <_dtoa_r+0x2ec>
    64a0:	8009883a 	mov	r4,r16
    64a4:	80001115 	stw	zero,68(r16)
    64a8:	000b883a 	mov	r5,zero
    64ac:	0007cb80 	call	7cb8 <_Balloc>
    64b0:	d8800715 	stw	r2,28(sp)
    64b4:	d8c00717 	ldw	r3,28(sp)
    64b8:	00bfffc4 	movi	r2,-1
    64bc:	01000044 	movi	r4,1
    64c0:	d8800c15 	stw	r2,48(sp)
    64c4:	80c01015 	stw	r3,64(r16)
    64c8:	d9000b15 	stw	r4,44(sp)
    64cc:	d8800615 	stw	r2,24(sp)
    64d0:	d8002215 	stw	zero,136(sp)
    64d4:	003c1906 	br	553c <_dtoa_r+0x774>
    64d8:	193d2926 	beq	r3,r4,5980 <_dtoa_r+0xbb8>
    64dc:	00c00f04 	movi	r3,60
    64e0:	1885c83a 	sub	r2,r3,r2
    64e4:	003d7b06 	br	5ad4 <_dtoa_r+0xd0c>
    64e8:	000b883a 	mov	r5,zero
    64ec:	003b1006 	br	5130 <_dtoa_r+0x368>

000064f0 <__sflush_r>:
    64f0:	2880030b 	ldhu	r2,12(r5)
    64f4:	defffb04 	addi	sp,sp,-20
    64f8:	dcc00315 	stw	r19,12(sp)
    64fc:	dc400115 	stw	r17,4(sp)
    6500:	dfc00415 	stw	ra,16(sp)
    6504:	dc800215 	stw	r18,8(sp)
    6508:	dc000015 	stw	r16,0(sp)
    650c:	10c0020c 	andi	r3,r2,8
    6510:	2823883a 	mov	r17,r5
    6514:	2027883a 	mov	r19,r4
    6518:	1800311e 	bne	r3,zero,65e0 <__sflush_r+0xf0>
    651c:	28c00117 	ldw	r3,4(r5)
    6520:	10820014 	ori	r2,r2,2048
    6524:	2880030d 	sth	r2,12(r5)
    6528:	00c04b0e 	bge	zero,r3,6658 <__sflush_r+0x168>
    652c:	8a000a17 	ldw	r8,40(r17)
    6530:	40002326 	beq	r8,zero,65c0 <__sflush_r+0xd0>
    6534:	9c000017 	ldw	r16,0(r19)
    6538:	10c4000c 	andi	r3,r2,4096
    653c:	98000015 	stw	zero,0(r19)
    6540:	18004826 	beq	r3,zero,6664 <__sflush_r+0x174>
    6544:	89801417 	ldw	r6,80(r17)
    6548:	10c0010c 	andi	r3,r2,4
    654c:	18000626 	beq	r3,zero,6568 <__sflush_r+0x78>
    6550:	88c00117 	ldw	r3,4(r17)
    6554:	88800c17 	ldw	r2,48(r17)
    6558:	30cdc83a 	sub	r6,r6,r3
    655c:	10000226 	beq	r2,zero,6568 <__sflush_r+0x78>
    6560:	88800f17 	ldw	r2,60(r17)
    6564:	308dc83a 	sub	r6,r6,r2
    6568:	89400717 	ldw	r5,28(r17)
    656c:	9809883a 	mov	r4,r19
    6570:	000f883a 	mov	r7,zero
    6574:	403ee83a 	callr	r8
    6578:	00ffffc4 	movi	r3,-1
    657c:	10c04426 	beq	r2,r3,6690 <__sflush_r+0x1a0>
    6580:	88c0030b 	ldhu	r3,12(r17)
    6584:	89000417 	ldw	r4,16(r17)
    6588:	88000115 	stw	zero,4(r17)
    658c:	197dffcc 	andi	r5,r3,63487
    6590:	8940030d 	sth	r5,12(r17)
    6594:	89000015 	stw	r4,0(r17)
    6598:	18c4000c 	andi	r3,r3,4096
    659c:	18002c1e 	bne	r3,zero,6650 <__sflush_r+0x160>
    65a0:	89400c17 	ldw	r5,48(r17)
    65a4:	9c000015 	stw	r16,0(r19)
    65a8:	28000526 	beq	r5,zero,65c0 <__sflush_r+0xd0>
    65ac:	88801004 	addi	r2,r17,64
    65b0:	28800226 	beq	r5,r2,65bc <__sflush_r+0xcc>
    65b4:	9809883a 	mov	r4,r19
    65b8:	0006c480 	call	6c48 <_free_r>
    65bc:	88000c15 	stw	zero,48(r17)
    65c0:	0005883a 	mov	r2,zero
    65c4:	dfc00417 	ldw	ra,16(sp)
    65c8:	dcc00317 	ldw	r19,12(sp)
    65cc:	dc800217 	ldw	r18,8(sp)
    65d0:	dc400117 	ldw	r17,4(sp)
    65d4:	dc000017 	ldw	r16,0(sp)
    65d8:	dec00504 	addi	sp,sp,20
    65dc:	f800283a 	ret
    65e0:	2c800417 	ldw	r18,16(r5)
    65e4:	903ff626 	beq	r18,zero,65c0 <__sflush_r+0xd0>
    65e8:	2c000017 	ldw	r16,0(r5)
    65ec:	108000cc 	andi	r2,r2,3
    65f0:	2c800015 	stw	r18,0(r5)
    65f4:	84a1c83a 	sub	r16,r16,r18
    65f8:	1000131e 	bne	r2,zero,6648 <__sflush_r+0x158>
    65fc:	28800517 	ldw	r2,20(r5)
    6600:	88800215 	stw	r2,8(r17)
    6604:	04000316 	blt	zero,r16,6614 <__sflush_r+0x124>
    6608:	003fed06 	br	65c0 <__sflush_r+0xd0>
    660c:	90a5883a 	add	r18,r18,r2
    6610:	043feb0e 	bge	zero,r16,65c0 <__sflush_r+0xd0>
    6614:	88800917 	ldw	r2,36(r17)
    6618:	89400717 	ldw	r5,28(r17)
    661c:	800f883a 	mov	r7,r16
    6620:	900d883a 	mov	r6,r18
    6624:	9809883a 	mov	r4,r19
    6628:	103ee83a 	callr	r2
    662c:	80a1c83a 	sub	r16,r16,r2
    6630:	00bff616 	blt	zero,r2,660c <__sflush_r+0x11c>
    6634:	88c0030b 	ldhu	r3,12(r17)
    6638:	00bfffc4 	movi	r2,-1
    663c:	18c01014 	ori	r3,r3,64
    6640:	88c0030d 	sth	r3,12(r17)
    6644:	003fdf06 	br	65c4 <__sflush_r+0xd4>
    6648:	0005883a 	mov	r2,zero
    664c:	003fec06 	br	6600 <__sflush_r+0x110>
    6650:	88801415 	stw	r2,80(r17)
    6654:	003fd206 	br	65a0 <__sflush_r+0xb0>
    6658:	28c00f17 	ldw	r3,60(r5)
    665c:	00ffb316 	blt	zero,r3,652c <__sflush_r+0x3c>
    6660:	003fd706 	br	65c0 <__sflush_r+0xd0>
    6664:	89400717 	ldw	r5,28(r17)
    6668:	000d883a 	mov	r6,zero
    666c:	9809883a 	mov	r4,r19
    6670:	01c00044 	movi	r7,1
    6674:	403ee83a 	callr	r8
    6678:	100d883a 	mov	r6,r2
    667c:	00bfffc4 	movi	r2,-1
    6680:	30801426 	beq	r6,r2,66d4 <__sflush_r+0x1e4>
    6684:	8880030b 	ldhu	r2,12(r17)
    6688:	8a000a17 	ldw	r8,40(r17)
    668c:	003fae06 	br	6548 <__sflush_r+0x58>
    6690:	98c00017 	ldw	r3,0(r19)
    6694:	183fba26 	beq	r3,zero,6580 <__sflush_r+0x90>
    6698:	01000744 	movi	r4,29
    669c:	19000626 	beq	r3,r4,66b8 <__sflush_r+0x1c8>
    66a0:	01000584 	movi	r4,22
    66a4:	19000426 	beq	r3,r4,66b8 <__sflush_r+0x1c8>
    66a8:	88c0030b 	ldhu	r3,12(r17)
    66ac:	18c01014 	ori	r3,r3,64
    66b0:	88c0030d 	sth	r3,12(r17)
    66b4:	003fc306 	br	65c4 <__sflush_r+0xd4>
    66b8:	8880030b 	ldhu	r2,12(r17)
    66bc:	88c00417 	ldw	r3,16(r17)
    66c0:	88000115 	stw	zero,4(r17)
    66c4:	10bdffcc 	andi	r2,r2,63487
    66c8:	8880030d 	sth	r2,12(r17)
    66cc:	88c00015 	stw	r3,0(r17)
    66d0:	003fb306 	br	65a0 <__sflush_r+0xb0>
    66d4:	98800017 	ldw	r2,0(r19)
    66d8:	103fea26 	beq	r2,zero,6684 <__sflush_r+0x194>
    66dc:	00c00744 	movi	r3,29
    66e0:	10c00226 	beq	r2,r3,66ec <__sflush_r+0x1fc>
    66e4:	00c00584 	movi	r3,22
    66e8:	10ffd21e 	bne	r2,r3,6634 <__sflush_r+0x144>
    66ec:	9c000015 	stw	r16,0(r19)
    66f0:	0005883a 	mov	r2,zero
    66f4:	003fb306 	br	65c4 <__sflush_r+0xd4>

000066f8 <_fflush_r>:
    66f8:	defffd04 	addi	sp,sp,-12
    66fc:	dc000115 	stw	r16,4(sp)
    6700:	dfc00215 	stw	ra,8(sp)
    6704:	2021883a 	mov	r16,r4
    6708:	20000226 	beq	r4,zero,6714 <_fflush_r+0x1c>
    670c:	20800e17 	ldw	r2,56(r4)
    6710:	10000c26 	beq	r2,zero,6744 <_fflush_r+0x4c>
    6714:	2880030f 	ldh	r2,12(r5)
    6718:	1000051e 	bne	r2,zero,6730 <_fflush_r+0x38>
    671c:	0005883a 	mov	r2,zero
    6720:	dfc00217 	ldw	ra,8(sp)
    6724:	dc000117 	ldw	r16,4(sp)
    6728:	dec00304 	addi	sp,sp,12
    672c:	f800283a 	ret
    6730:	8009883a 	mov	r4,r16
    6734:	dfc00217 	ldw	ra,8(sp)
    6738:	dc000117 	ldw	r16,4(sp)
    673c:	dec00304 	addi	sp,sp,12
    6740:	00064f01 	jmpi	64f0 <__sflush_r>
    6744:	d9400015 	stw	r5,0(sp)
    6748:	0006ad40 	call	6ad4 <__sinit>
    674c:	d9400017 	ldw	r5,0(sp)
    6750:	003ff006 	br	6714 <_fflush_r+0x1c>

00006754 <fflush>:
    6754:	20000526 	beq	r4,zero,676c <fflush+0x18>
    6758:	00800074 	movhi	r2,1
    675c:	108bd104 	addi	r2,r2,12100
    6760:	200b883a 	mov	r5,r4
    6764:	11000017 	ldw	r4,0(r2)
    6768:	00066f81 	jmpi	66f8 <_fflush_r>
    676c:	00800074 	movhi	r2,1
    6770:	108bd004 	addi	r2,r2,12096
    6774:	11000017 	ldw	r4,0(r2)
    6778:	01400034 	movhi	r5,0
    677c:	2959be04 	addi	r5,r5,26360
    6780:	00074bc1 	jmpi	74bc <_fwalk_reent>

00006784 <__fp_lock>:
    6784:	0005883a 	mov	r2,zero
    6788:	f800283a 	ret

0000678c <__fp_unlock>:
    678c:	0005883a 	mov	r2,zero
    6790:	f800283a 	ret

00006794 <_cleanup_r>:
    6794:	01400074 	movhi	r5,1
    6798:	296a9304 	addi	r5,r5,-21940
    679c:	00074bc1 	jmpi	74bc <_fwalk_reent>

000067a0 <__sinit.part.1>:
    67a0:	defff704 	addi	sp,sp,-36
    67a4:	00c00034 	movhi	r3,0
    67a8:	dfc00815 	stw	ra,32(sp)
    67ac:	ddc00715 	stw	r23,28(sp)
    67b0:	dd800615 	stw	r22,24(sp)
    67b4:	dd400515 	stw	r21,20(sp)
    67b8:	dd000415 	stw	r20,16(sp)
    67bc:	dcc00315 	stw	r19,12(sp)
    67c0:	dc800215 	stw	r18,8(sp)
    67c4:	dc400115 	stw	r17,4(sp)
    67c8:	dc000015 	stw	r16,0(sp)
    67cc:	18d9e504 	addi	r3,r3,26516
    67d0:	24000117 	ldw	r16,4(r4)
    67d4:	20c00f15 	stw	r3,60(r4)
    67d8:	2080bb04 	addi	r2,r4,748
    67dc:	00c000c4 	movi	r3,3
    67e0:	20c0b915 	stw	r3,740(r4)
    67e4:	2080ba15 	stw	r2,744(r4)
    67e8:	2000b815 	stw	zero,736(r4)
    67ec:	05c00204 	movi	r23,8
    67f0:	00800104 	movi	r2,4
    67f4:	2025883a 	mov	r18,r4
    67f8:	b80d883a 	mov	r6,r23
    67fc:	81001704 	addi	r4,r16,92
    6800:	000b883a 	mov	r5,zero
    6804:	80000015 	stw	zero,0(r16)
    6808:	80000115 	stw	zero,4(r16)
    680c:	80000215 	stw	zero,8(r16)
    6810:	8080030d 	sth	r2,12(r16)
    6814:	80001915 	stw	zero,100(r16)
    6818:	8000038d 	sth	zero,14(r16)
    681c:	80000415 	stw	zero,16(r16)
    6820:	80000515 	stw	zero,20(r16)
    6824:	80000615 	stw	zero,24(r16)
    6828:	0007b940 	call	7b94 <memset>
    682c:	05800074 	movhi	r22,1
    6830:	94400217 	ldw	r17,8(r18)
    6834:	05400074 	movhi	r21,1
    6838:	05000074 	movhi	r20,1
    683c:	04c00074 	movhi	r19,1
    6840:	b5a48d04 	addi	r22,r22,-28108
    6844:	ad64a404 	addi	r21,r21,-28016
    6848:	a524c304 	addi	r20,r20,-27892
    684c:	9ce4da04 	addi	r19,r19,-27800
    6850:	85800815 	stw	r22,32(r16)
    6854:	85400915 	stw	r21,36(r16)
    6858:	85000a15 	stw	r20,40(r16)
    685c:	84c00b15 	stw	r19,44(r16)
    6860:	84000715 	stw	r16,28(r16)
    6864:	00800284 	movi	r2,10
    6868:	8880030d 	sth	r2,12(r17)
    686c:	00800044 	movi	r2,1
    6870:	89001704 	addi	r4,r17,92
    6874:	b80d883a 	mov	r6,r23
    6878:	000b883a 	mov	r5,zero
    687c:	88000015 	stw	zero,0(r17)
    6880:	88000115 	stw	zero,4(r17)
    6884:	88000215 	stw	zero,8(r17)
    6888:	88001915 	stw	zero,100(r17)
    688c:	8880038d 	sth	r2,14(r17)
    6890:	88000415 	stw	zero,16(r17)
    6894:	88000515 	stw	zero,20(r17)
    6898:	88000615 	stw	zero,24(r17)
    689c:	0007b940 	call	7b94 <memset>
    68a0:	94000317 	ldw	r16,12(r18)
    68a4:	00800484 	movi	r2,18
    68a8:	8c400715 	stw	r17,28(r17)
    68ac:	8d800815 	stw	r22,32(r17)
    68b0:	8d400915 	stw	r21,36(r17)
    68b4:	8d000a15 	stw	r20,40(r17)
    68b8:	8cc00b15 	stw	r19,44(r17)
    68bc:	8080030d 	sth	r2,12(r16)
    68c0:	00800084 	movi	r2,2
    68c4:	80000015 	stw	zero,0(r16)
    68c8:	80000115 	stw	zero,4(r16)
    68cc:	80000215 	stw	zero,8(r16)
    68d0:	80001915 	stw	zero,100(r16)
    68d4:	8080038d 	sth	r2,14(r16)
    68d8:	80000415 	stw	zero,16(r16)
    68dc:	80000515 	stw	zero,20(r16)
    68e0:	80000615 	stw	zero,24(r16)
    68e4:	81001704 	addi	r4,r16,92
    68e8:	000b883a 	mov	r5,zero
    68ec:	b80d883a 	mov	r6,r23
    68f0:	0007b940 	call	7b94 <memset>
    68f4:	00800044 	movi	r2,1
    68f8:	84000715 	stw	r16,28(r16)
    68fc:	85800815 	stw	r22,32(r16)
    6900:	85400915 	stw	r21,36(r16)
    6904:	85000a15 	stw	r20,40(r16)
    6908:	84c00b15 	stw	r19,44(r16)
    690c:	90800e15 	stw	r2,56(r18)
    6910:	dfc00817 	ldw	ra,32(sp)
    6914:	ddc00717 	ldw	r23,28(sp)
    6918:	dd800617 	ldw	r22,24(sp)
    691c:	dd400517 	ldw	r21,20(sp)
    6920:	dd000417 	ldw	r20,16(sp)
    6924:	dcc00317 	ldw	r19,12(sp)
    6928:	dc800217 	ldw	r18,8(sp)
    692c:	dc400117 	ldw	r17,4(sp)
    6930:	dc000017 	ldw	r16,0(sp)
    6934:	dec00904 	addi	sp,sp,36
    6938:	f800283a 	ret

0000693c <__sfmoreglue>:
    693c:	defffc04 	addi	sp,sp,-16
    6940:	dc400115 	stw	r17,4(sp)
    6944:	2c7fffc4 	addi	r17,r5,-1
    6948:	8c401a24 	muli	r17,r17,104
    694c:	dc800215 	stw	r18,8(sp)
    6950:	2825883a 	mov	r18,r5
    6954:	89401d04 	addi	r5,r17,116
    6958:	dc000015 	stw	r16,0(sp)
    695c:	dfc00315 	stw	ra,12(sp)
    6960:	000208c0 	call	208c <_malloc_r>
    6964:	1021883a 	mov	r16,r2
    6968:	10000726 	beq	r2,zero,6988 <__sfmoreglue+0x4c>
    696c:	11000304 	addi	r4,r2,12
    6970:	10000015 	stw	zero,0(r2)
    6974:	14800115 	stw	r18,4(r2)
    6978:	11000215 	stw	r4,8(r2)
    697c:	000b883a 	mov	r5,zero
    6980:	89801a04 	addi	r6,r17,104
    6984:	0007b940 	call	7b94 <memset>
    6988:	8005883a 	mov	r2,r16
    698c:	dfc00317 	ldw	ra,12(sp)
    6990:	dc800217 	ldw	r18,8(sp)
    6994:	dc400117 	ldw	r17,4(sp)
    6998:	dc000017 	ldw	r16,0(sp)
    699c:	dec00404 	addi	sp,sp,16
    69a0:	f800283a 	ret

000069a4 <__sfp>:
    69a4:	00800074 	movhi	r2,1
    69a8:	defffb04 	addi	sp,sp,-20
    69ac:	108bd004 	addi	r2,r2,12096
    69b0:	dc800215 	stw	r18,8(sp)
    69b4:	14800017 	ldw	r18,0(r2)
    69b8:	dcc00315 	stw	r19,12(sp)
    69bc:	dfc00415 	stw	ra,16(sp)
    69c0:	90800e17 	ldw	r2,56(r18)
    69c4:	dc400115 	stw	r17,4(sp)
    69c8:	dc000015 	stw	r16,0(sp)
    69cc:	2027883a 	mov	r19,r4
    69d0:	1000021e 	bne	r2,zero,69dc <__sfp+0x38>
    69d4:	9009883a 	mov	r4,r18
    69d8:	00067a00 	call	67a0 <__sinit.part.1>
    69dc:	9480b804 	addi	r18,r18,736
    69e0:	047fffc4 	movi	r17,-1
    69e4:	91400117 	ldw	r5,4(r18)
    69e8:	94000217 	ldw	r16,8(r18)
    69ec:	297fffc4 	addi	r5,r5,-1
    69f0:	28000a16 	blt	r5,zero,6a1c <__sfp+0x78>
    69f4:	8080030f 	ldh	r2,12(r16)
    69f8:	10000c26 	beq	r2,zero,6a2c <__sfp+0x88>
    69fc:	80c01d04 	addi	r3,r16,116
    6a00:	00000206 	br	6a0c <__sfp+0x68>
    6a04:	18bfe60f 	ldh	r2,-104(r3)
    6a08:	10000826 	beq	r2,zero,6a2c <__sfp+0x88>
    6a0c:	297fffc4 	addi	r5,r5,-1
    6a10:	1c3ffd04 	addi	r16,r3,-12
    6a14:	18c01a04 	addi	r3,r3,104
    6a18:	2c7ffa1e 	bne	r5,r17,6a04 <__sfp+0x60>
    6a1c:	90800017 	ldw	r2,0(r18)
    6a20:	10001d26 	beq	r2,zero,6a98 <__sfp+0xf4>
    6a24:	1025883a 	mov	r18,r2
    6a28:	003fee06 	br	69e4 <__sfp+0x40>
    6a2c:	00bfffc4 	movi	r2,-1
    6a30:	8080038d 	sth	r2,14(r16)
    6a34:	00800044 	movi	r2,1
    6a38:	8080030d 	sth	r2,12(r16)
    6a3c:	80001915 	stw	zero,100(r16)
    6a40:	80000015 	stw	zero,0(r16)
    6a44:	80000215 	stw	zero,8(r16)
    6a48:	80000115 	stw	zero,4(r16)
    6a4c:	80000415 	stw	zero,16(r16)
    6a50:	80000515 	stw	zero,20(r16)
    6a54:	80000615 	stw	zero,24(r16)
    6a58:	81001704 	addi	r4,r16,92
    6a5c:	000b883a 	mov	r5,zero
    6a60:	01800204 	movi	r6,8
    6a64:	0007b940 	call	7b94 <memset>
    6a68:	8005883a 	mov	r2,r16
    6a6c:	80000c15 	stw	zero,48(r16)
    6a70:	80000d15 	stw	zero,52(r16)
    6a74:	80001115 	stw	zero,68(r16)
    6a78:	80001215 	stw	zero,72(r16)
    6a7c:	dfc00417 	ldw	ra,16(sp)
    6a80:	dcc00317 	ldw	r19,12(sp)
    6a84:	dc800217 	ldw	r18,8(sp)
    6a88:	dc400117 	ldw	r17,4(sp)
    6a8c:	dc000017 	ldw	r16,0(sp)
    6a90:	dec00504 	addi	sp,sp,20
    6a94:	f800283a 	ret
    6a98:	9809883a 	mov	r4,r19
    6a9c:	01400104 	movi	r5,4
    6aa0:	000693c0 	call	693c <__sfmoreglue>
    6aa4:	90800015 	stw	r2,0(r18)
    6aa8:	103fde1e 	bne	r2,zero,6a24 <__sfp+0x80>
    6aac:	00800304 	movi	r2,12
    6ab0:	98800015 	stw	r2,0(r19)
    6ab4:	0005883a 	mov	r2,zero
    6ab8:	003ff006 	br	6a7c <__sfp+0xd8>

00006abc <_cleanup>:
    6abc:	00800074 	movhi	r2,1
    6ac0:	108bd004 	addi	r2,r2,12096
    6ac4:	11000017 	ldw	r4,0(r2)
    6ac8:	01400074 	movhi	r5,1
    6acc:	296a9304 	addi	r5,r5,-21940
    6ad0:	00074bc1 	jmpi	74bc <_fwalk_reent>

00006ad4 <__sinit>:
    6ad4:	20800e17 	ldw	r2,56(r4)
    6ad8:	10000126 	beq	r2,zero,6ae0 <__sinit+0xc>
    6adc:	f800283a 	ret
    6ae0:	00067a01 	jmpi	67a0 <__sinit.part.1>

00006ae4 <__sfp_lock_acquire>:
    6ae4:	f800283a 	ret

00006ae8 <__sfp_lock_release>:
    6ae8:	f800283a 	ret

00006aec <__sinit_lock_acquire>:
    6aec:	f800283a 	ret

00006af0 <__sinit_lock_release>:
    6af0:	f800283a 	ret

00006af4 <__fp_lock_all>:
    6af4:	00800074 	movhi	r2,1
    6af8:	108bd104 	addi	r2,r2,12100
    6afc:	11000017 	ldw	r4,0(r2)
    6b00:	01400034 	movhi	r5,0
    6b04:	2959e104 	addi	r5,r5,26500
    6b08:	00073f81 	jmpi	73f8 <_fwalk>

00006b0c <__fp_unlock_all>:
    6b0c:	00800074 	movhi	r2,1
    6b10:	108bd104 	addi	r2,r2,12100
    6b14:	11000017 	ldw	r4,0(r2)
    6b18:	01400034 	movhi	r5,0
    6b1c:	2959e304 	addi	r5,r5,26508
    6b20:	00073f81 	jmpi	73f8 <_fwalk>

00006b24 <_malloc_trim_r>:
    6b24:	defffb04 	addi	sp,sp,-20
    6b28:	dcc00315 	stw	r19,12(sp)
    6b2c:	04c00074 	movhi	r19,1
    6b30:	dc800215 	stw	r18,8(sp)
    6b34:	dc400115 	stw	r17,4(sp)
    6b38:	dc000015 	stw	r16,0(sp)
    6b3c:	dfc00415 	stw	ra,16(sp)
    6b40:	2821883a 	mov	r16,r5
    6b44:	9cc52304 	addi	r19,r19,5260
    6b48:	2025883a 	mov	r18,r4
    6b4c:	000e8e00 	call	e8e0 <__malloc_lock>
    6b50:	98800217 	ldw	r2,8(r19)
    6b54:	14400117 	ldw	r17,4(r2)
    6b58:	00bfff04 	movi	r2,-4
    6b5c:	88a2703a 	and	r17,r17,r2
    6b60:	8c21c83a 	sub	r16,r17,r16
    6b64:	8403fbc4 	addi	r16,r16,4079
    6b68:	8020d33a 	srli	r16,r16,12
    6b6c:	0083ffc4 	movi	r2,4095
    6b70:	843fffc4 	addi	r16,r16,-1
    6b74:	8020933a 	slli	r16,r16,12
    6b78:	1400060e 	bge	r2,r16,6b94 <_malloc_trim_r+0x70>
    6b7c:	9009883a 	mov	r4,r18
    6b80:	000b883a 	mov	r5,zero
    6b84:	00029580 	call	2958 <_sbrk_r>
    6b88:	98c00217 	ldw	r3,8(r19)
    6b8c:	1c47883a 	add	r3,r3,r17
    6b90:	10c00a26 	beq	r2,r3,6bbc <_malloc_trim_r+0x98>
    6b94:	9009883a 	mov	r4,r18
    6b98:	000e9000 	call	e900 <__malloc_unlock>
    6b9c:	0005883a 	mov	r2,zero
    6ba0:	dfc00417 	ldw	ra,16(sp)
    6ba4:	dcc00317 	ldw	r19,12(sp)
    6ba8:	dc800217 	ldw	r18,8(sp)
    6bac:	dc400117 	ldw	r17,4(sp)
    6bb0:	dc000017 	ldw	r16,0(sp)
    6bb4:	dec00504 	addi	sp,sp,20
    6bb8:	f800283a 	ret
    6bbc:	9009883a 	mov	r4,r18
    6bc0:	040bc83a 	sub	r5,zero,r16
    6bc4:	00029580 	call	2958 <_sbrk_r>
    6bc8:	00ffffc4 	movi	r3,-1
    6bcc:	10c00d26 	beq	r2,r3,6c04 <_malloc_trim_r+0xe0>
    6bd0:	00c00074 	movhi	r3,1
    6bd4:	18d2b304 	addi	r3,r3,19148
    6bd8:	18800017 	ldw	r2,0(r3)
    6bdc:	99000217 	ldw	r4,8(r19)
    6be0:	8c23c83a 	sub	r17,r17,r16
    6be4:	8c400054 	ori	r17,r17,1
    6be8:	1421c83a 	sub	r16,r2,r16
    6bec:	24400115 	stw	r17,4(r4)
    6bf0:	9009883a 	mov	r4,r18
    6bf4:	1c000015 	stw	r16,0(r3)
    6bf8:	000e9000 	call	e900 <__malloc_unlock>
    6bfc:	00800044 	movi	r2,1
    6c00:	003fe706 	br	6ba0 <_malloc_trim_r+0x7c>
    6c04:	9009883a 	mov	r4,r18
    6c08:	000b883a 	mov	r5,zero
    6c0c:	00029580 	call	2958 <_sbrk_r>
    6c10:	99000217 	ldw	r4,8(r19)
    6c14:	014003c4 	movi	r5,15
    6c18:	1107c83a 	sub	r3,r2,r4
    6c1c:	28ffdd0e 	bge	r5,r3,6b94 <_malloc_trim_r+0x70>
    6c20:	01400074 	movhi	r5,1
    6c24:	294bce04 	addi	r5,r5,12088
    6c28:	29400017 	ldw	r5,0(r5)
    6c2c:	18c00054 	ori	r3,r3,1
    6c30:	20c00115 	stw	r3,4(r4)
    6c34:	00c00074 	movhi	r3,1
    6c38:	1145c83a 	sub	r2,r2,r5
    6c3c:	18d2b304 	addi	r3,r3,19148
    6c40:	18800015 	stw	r2,0(r3)
    6c44:	003fd306 	br	6b94 <_malloc_trim_r+0x70>

00006c48 <_free_r>:
    6c48:	28004c26 	beq	r5,zero,6d7c <_free_r+0x134>
    6c4c:	defffd04 	addi	sp,sp,-12
    6c50:	dc400115 	stw	r17,4(sp)
    6c54:	dc000015 	stw	r16,0(sp)
    6c58:	2023883a 	mov	r17,r4
    6c5c:	2821883a 	mov	r16,r5
    6c60:	dfc00215 	stw	ra,8(sp)
    6c64:	000e8e00 	call	e8e0 <__malloc_lock>
    6c68:	813fff17 	ldw	r4,-4(r16)
    6c6c:	00bfff84 	movi	r2,-2
    6c70:	02400074 	movhi	r9,1
    6c74:	81bffe04 	addi	r6,r16,-8
    6c78:	2084703a 	and	r2,r4,r2
    6c7c:	4a452304 	addi	r9,r9,5260
    6c80:	308b883a 	add	r5,r6,r2
    6c84:	2a000117 	ldw	r8,4(r5)
    6c88:	49c00217 	ldw	r7,8(r9)
    6c8c:	00ffff04 	movi	r3,-4
    6c90:	40c6703a 	and	r3,r8,r3
    6c94:	39405326 	beq	r7,r5,6de4 <_free_r+0x19c>
    6c98:	28c00115 	stw	r3,4(r5)
    6c9c:	2100004c 	andi	r4,r4,1
    6ca0:	2000091e 	bne	r4,zero,6cc8 <_free_r+0x80>
    6ca4:	81fffe17 	ldw	r7,-8(r16)
    6ca8:	4a000204 	addi	r8,r9,8
    6cac:	31cdc83a 	sub	r6,r6,r7
    6cb0:	31000217 	ldw	r4,8(r6)
    6cb4:	11c5883a 	add	r2,r2,r7
    6cb8:	22006126 	beq	r4,r8,6e40 <_free_r+0x1f8>
    6cbc:	31c00317 	ldw	r7,12(r6)
    6cc0:	21c00315 	stw	r7,12(r4)
    6cc4:	39000215 	stw	r4,8(r7)
    6cc8:	28c9883a 	add	r4,r5,r3
    6ccc:	21c00117 	ldw	r7,4(r4)
    6cd0:	39c0004c 	andi	r7,r7,1
    6cd4:	38000d1e 	bne	r7,zero,6d0c <_free_r+0xc4>
    6cd8:	29000217 	ldw	r4,8(r5)
    6cdc:	10c5883a 	add	r2,r2,r3
    6ce0:	00c00074 	movhi	r3,1
    6ce4:	18c52504 	addi	r3,r3,5268
    6ce8:	20c07526 	beq	r4,r3,6ec0 <_free_r+0x278>
    6cec:	29c00317 	ldw	r7,12(r5)
    6cf0:	11400054 	ori	r5,r2,1
    6cf4:	3087883a 	add	r3,r6,r2
    6cf8:	21c00315 	stw	r7,12(r4)
    6cfc:	39000215 	stw	r4,8(r7)
    6d00:	31400115 	stw	r5,4(r6)
    6d04:	18800015 	stw	r2,0(r3)
    6d08:	00000406 	br	6d1c <_free_r+0xd4>
    6d0c:	10c00054 	ori	r3,r2,1
    6d10:	30c00115 	stw	r3,4(r6)
    6d14:	3087883a 	add	r3,r6,r2
    6d18:	18800015 	stw	r2,0(r3)
    6d1c:	00c07fc4 	movi	r3,511
    6d20:	18801736 	bltu	r3,r2,6d80 <_free_r+0x138>
    6d24:	1004d0fa 	srli	r2,r2,3
    6d28:	01400044 	movi	r5,1
    6d2c:	49000117 	ldw	r4,4(r9)
    6d30:	1087883a 	add	r3,r2,r2
    6d34:	18c7883a 	add	r3,r3,r3
    6d38:	1005d0ba 	srai	r2,r2,2
    6d3c:	18c7883a 	add	r3,r3,r3
    6d40:	1a47883a 	add	r3,r3,r9
    6d44:	19c00217 	ldw	r7,8(r3)
    6d48:	2884983a 	sll	r2,r5,r2
    6d4c:	30c00315 	stw	r3,12(r6)
    6d50:	31c00215 	stw	r7,8(r6)
    6d54:	1104b03a 	or	r2,r2,r4
    6d58:	19800215 	stw	r6,8(r3)
    6d5c:	48800115 	stw	r2,4(r9)
    6d60:	39800315 	stw	r6,12(r7)
    6d64:	8809883a 	mov	r4,r17
    6d68:	dfc00217 	ldw	ra,8(sp)
    6d6c:	dc400117 	ldw	r17,4(sp)
    6d70:	dc000017 	ldw	r16,0(sp)
    6d74:	dec00304 	addi	sp,sp,12
    6d78:	000e9001 	jmpi	e900 <__malloc_unlock>
    6d7c:	f800283a 	ret
    6d80:	1006d27a 	srli	r3,r2,9
    6d84:	01000104 	movi	r4,4
    6d88:	20c04036 	bltu	r4,r3,6e8c <_free_r+0x244>
    6d8c:	1006d1ba 	srli	r3,r2,6
    6d90:	19400e04 	addi	r5,r3,56
    6d94:	2947883a 	add	r3,r5,r5
    6d98:	18c7883a 	add	r3,r3,r3
    6d9c:	18c7883a 	add	r3,r3,r3
    6da0:	1a49883a 	add	r4,r3,r9
    6da4:	20c00217 	ldw	r3,8(r4)
    6da8:	01c00074 	movhi	r7,1
    6dac:	39c52304 	addi	r7,r7,5260
    6db0:	19003b26 	beq	r3,r4,6ea0 <_free_r+0x258>
    6db4:	01ffff04 	movi	r7,-4
    6db8:	19400117 	ldw	r5,4(r3)
    6dbc:	29ca703a 	and	r5,r5,r7
    6dc0:	1140022e 	bgeu	r2,r5,6dcc <_free_r+0x184>
    6dc4:	18c00217 	ldw	r3,8(r3)
    6dc8:	20fffb1e 	bne	r4,r3,6db8 <_free_r+0x170>
    6dcc:	18800317 	ldw	r2,12(r3)
    6dd0:	30800315 	stw	r2,12(r6)
    6dd4:	30c00215 	stw	r3,8(r6)
    6dd8:	11800215 	stw	r6,8(r2)
    6ddc:	19800315 	stw	r6,12(r3)
    6de0:	003fe006 	br	6d64 <_free_r+0x11c>
    6de4:	2100004c 	andi	r4,r4,1
    6de8:	1885883a 	add	r2,r3,r2
    6dec:	2000071e 	bne	r4,zero,6e0c <_free_r+0x1c4>
    6df0:	817ffe17 	ldw	r5,-8(r16)
    6df4:	314dc83a 	sub	r6,r6,r5
    6df8:	30c00317 	ldw	r3,12(r6)
    6dfc:	31000217 	ldw	r4,8(r6)
    6e00:	1145883a 	add	r2,r2,r5
    6e04:	20c00315 	stw	r3,12(r4)
    6e08:	19000215 	stw	r4,8(r3)
    6e0c:	10c00054 	ori	r3,r2,1
    6e10:	30c00115 	stw	r3,4(r6)
    6e14:	00c00074 	movhi	r3,1
    6e18:	18cbcf04 	addi	r3,r3,12092
    6e1c:	18c00017 	ldw	r3,0(r3)
    6e20:	49800215 	stw	r6,8(r9)
    6e24:	10ffcf36 	bltu	r2,r3,6d64 <_free_r+0x11c>
    6e28:	00800074 	movhi	r2,1
    6e2c:	1092a504 	addi	r2,r2,19092
    6e30:	11400017 	ldw	r5,0(r2)
    6e34:	8809883a 	mov	r4,r17
    6e38:	0006b240 	call	6b24 <_malloc_trim_r>
    6e3c:	003fc906 	br	6d64 <_free_r+0x11c>
    6e40:	28c9883a 	add	r4,r5,r3
    6e44:	21000117 	ldw	r4,4(r4)
    6e48:	2100004c 	andi	r4,r4,1
    6e4c:	20000a1e 	bne	r4,zero,6e78 <_free_r+0x230>
    6e50:	29000317 	ldw	r4,12(r5)
    6e54:	29400217 	ldw	r5,8(r5)
    6e58:	10c5883a 	add	r2,r2,r3
    6e5c:	10c00054 	ori	r3,r2,1
    6e60:	29000315 	stw	r4,12(r5)
    6e64:	21400215 	stw	r5,8(r4)
    6e68:	30c00115 	stw	r3,4(r6)
    6e6c:	308d883a 	add	r6,r6,r2
    6e70:	30800015 	stw	r2,0(r6)
    6e74:	003fbb06 	br	6d64 <_free_r+0x11c>
    6e78:	10c00054 	ori	r3,r2,1
    6e7c:	30c00115 	stw	r3,4(r6)
    6e80:	308d883a 	add	r6,r6,r2
    6e84:	30800015 	stw	r2,0(r6)
    6e88:	003fb606 	br	6d64 <_free_r+0x11c>
    6e8c:	01000504 	movi	r4,20
    6e90:	20c01436 	bltu	r4,r3,6ee4 <_free_r+0x29c>
    6e94:	194016c4 	addi	r5,r3,91
    6e98:	2947883a 	add	r3,r5,r5
    6e9c:	003fbe06 	br	6d98 <_free_r+0x150>
    6ea0:	280bd0ba 	srai	r5,r5,2
    6ea4:	00800044 	movi	r2,1
    6ea8:	39000117 	ldw	r4,4(r7)
    6eac:	114a983a 	sll	r5,r2,r5
    6eb0:	1805883a 	mov	r2,r3
    6eb4:	2908b03a 	or	r4,r5,r4
    6eb8:	39000115 	stw	r4,4(r7)
    6ebc:	003fc406 	br	6dd0 <_free_r+0x188>
    6ec0:	49800515 	stw	r6,20(r9)
    6ec4:	49800415 	stw	r6,16(r9)
    6ec8:	10c00054 	ori	r3,r2,1
    6ecc:	31000315 	stw	r4,12(r6)
    6ed0:	31000215 	stw	r4,8(r6)
    6ed4:	30c00115 	stw	r3,4(r6)
    6ed8:	308d883a 	add	r6,r6,r2
    6edc:	30800015 	stw	r2,0(r6)
    6ee0:	003fa006 	br	6d64 <_free_r+0x11c>
    6ee4:	01001504 	movi	r4,84
    6ee8:	20c00436 	bltu	r4,r3,6efc <_free_r+0x2b4>
    6eec:	1006d33a 	srli	r3,r2,12
    6ef0:	19401b84 	addi	r5,r3,110
    6ef4:	2947883a 	add	r3,r5,r5
    6ef8:	003fa706 	br	6d98 <_free_r+0x150>
    6efc:	01005504 	movi	r4,340
    6f00:	20c00436 	bltu	r4,r3,6f14 <_free_r+0x2cc>
    6f04:	1006d3fa 	srli	r3,r2,15
    6f08:	19401dc4 	addi	r5,r3,119
    6f0c:	2947883a 	add	r3,r5,r5
    6f10:	003fa106 	br	6d98 <_free_r+0x150>
    6f14:	01015504 	movi	r4,1364
    6f18:	20c00436 	bltu	r4,r3,6f2c <_free_r+0x2e4>
    6f1c:	1006d4ba 	srli	r3,r2,18
    6f20:	19401f04 	addi	r5,r3,124
    6f24:	2947883a 	add	r3,r5,r5
    6f28:	003f9b06 	br	6d98 <_free_r+0x150>
    6f2c:	00c03f04 	movi	r3,252
    6f30:	01401f84 	movi	r5,126
    6f34:	003f9806 	br	6d98 <_free_r+0x150>

00006f38 <__sfvwrite_r>:
    6f38:	30800217 	ldw	r2,8(r6)
    6f3c:	10006726 	beq	r2,zero,70dc <__sfvwrite_r+0x1a4>
    6f40:	defff404 	addi	sp,sp,-48
    6f44:	dd000615 	stw	r20,24(sp)
    6f48:	2029883a 	mov	r20,r4
    6f4c:	2900030b 	ldhu	r4,12(r5)
    6f50:	ddc00915 	stw	r23,36(sp)
    6f54:	dc000215 	stw	r16,8(sp)
    6f58:	dfc00b15 	stw	ra,44(sp)
    6f5c:	df000a15 	stw	fp,40(sp)
    6f60:	dd800815 	stw	r22,32(sp)
    6f64:	dd400715 	stw	r21,28(sp)
    6f68:	dcc00515 	stw	r19,20(sp)
    6f6c:	dc800415 	stw	r18,16(sp)
    6f70:	dc400315 	stw	r17,12(sp)
    6f74:	2080020c 	andi	r2,r4,8
    6f78:	2821883a 	mov	r16,r5
    6f7c:	302f883a 	mov	r23,r6
    6f80:	10002726 	beq	r2,zero,7020 <__sfvwrite_r+0xe8>
    6f84:	28800417 	ldw	r2,16(r5)
    6f88:	10002526 	beq	r2,zero,7020 <__sfvwrite_r+0xe8>
    6f8c:	2080008c 	andi	r2,r4,2
    6f90:	bc400017 	ldw	r17,0(r23)
    6f94:	10002a26 	beq	r2,zero,7040 <__sfvwrite_r+0x108>
    6f98:	05600034 	movhi	r21,32768
    6f9c:	0027883a 	mov	r19,zero
    6fa0:	0025883a 	mov	r18,zero
    6fa4:	ad7f0004 	addi	r21,r21,-1024
    6fa8:	980d883a 	mov	r6,r19
    6fac:	a009883a 	mov	r4,r20
    6fb0:	90004626 	beq	r18,zero,70cc <__sfvwrite_r+0x194>
    6fb4:	900f883a 	mov	r7,r18
    6fb8:	81400717 	ldw	r5,28(r16)
    6fbc:	ac80022e 	bgeu	r21,r18,6fc8 <__sfvwrite_r+0x90>
    6fc0:	01e00034 	movhi	r7,32768
    6fc4:	39ff0004 	addi	r7,r7,-1024
    6fc8:	80800917 	ldw	r2,36(r16)
    6fcc:	103ee83a 	callr	r2
    6fd0:	0080520e 	bge	zero,r2,711c <__sfvwrite_r+0x1e4>
    6fd4:	b8c00217 	ldw	r3,8(r23)
    6fd8:	98a7883a 	add	r19,r19,r2
    6fdc:	90a5c83a 	sub	r18,r18,r2
    6fe0:	1885c83a 	sub	r2,r3,r2
    6fe4:	b8800215 	stw	r2,8(r23)
    6fe8:	103fef1e 	bne	r2,zero,6fa8 <__sfvwrite_r+0x70>
    6fec:	0005883a 	mov	r2,zero
    6ff0:	dfc00b17 	ldw	ra,44(sp)
    6ff4:	df000a17 	ldw	fp,40(sp)
    6ff8:	ddc00917 	ldw	r23,36(sp)
    6ffc:	dd800817 	ldw	r22,32(sp)
    7000:	dd400717 	ldw	r21,28(sp)
    7004:	dd000617 	ldw	r20,24(sp)
    7008:	dcc00517 	ldw	r19,20(sp)
    700c:	dc800417 	ldw	r18,16(sp)
    7010:	dc400317 	ldw	r17,12(sp)
    7014:	dc000217 	ldw	r16,8(sp)
    7018:	dec00c04 	addi	sp,sp,48
    701c:	f800283a 	ret
    7020:	a009883a 	mov	r4,r20
    7024:	800b883a 	mov	r5,r16
    7028:	0004a740 	call	4a74 <__swsetup_r>
    702c:	1000ec1e 	bne	r2,zero,73e0 <__sfvwrite_r+0x4a8>
    7030:	8100030b 	ldhu	r4,12(r16)
    7034:	bc400017 	ldw	r17,0(r23)
    7038:	2080008c 	andi	r2,r4,2
    703c:	103fd61e 	bne	r2,zero,6f98 <__sfvwrite_r+0x60>
    7040:	2080004c 	andi	r2,r4,1
    7044:	10003a1e 	bne	r2,zero,7130 <__sfvwrite_r+0x1f8>
    7048:	0039883a 	mov	fp,zero
    704c:	0025883a 	mov	r18,zero
    7050:	90001a26 	beq	r18,zero,70bc <__sfvwrite_r+0x184>
    7054:	2080800c 	andi	r2,r4,512
    7058:	85800217 	ldw	r22,8(r16)
    705c:	10007626 	beq	r2,zero,7238 <__sfvwrite_r+0x300>
    7060:	b027883a 	mov	r19,r22
    7064:	95809436 	bltu	r18,r22,72b8 <__sfvwrite_r+0x380>
    7068:	2081200c 	andi	r2,r4,1152
    706c:	10009f1e 	bne	r2,zero,72ec <__sfvwrite_r+0x3b4>
    7070:	81000017 	ldw	r4,0(r16)
    7074:	e00b883a 	mov	r5,fp
    7078:	980d883a 	mov	r6,r19
    707c:	0007a380 	call	7a38 <memmove>
    7080:	81000217 	ldw	r4,8(r16)
    7084:	81400017 	ldw	r5,0(r16)
    7088:	9005883a 	mov	r2,r18
    708c:	2587c83a 	sub	r3,r4,r22
    7090:	2ce7883a 	add	r19,r5,r19
    7094:	80c00215 	stw	r3,8(r16)
    7098:	84c00015 	stw	r19,0(r16)
    709c:	b8c00217 	ldw	r3,8(r23)
    70a0:	e0b9883a 	add	fp,fp,r2
    70a4:	90a5c83a 	sub	r18,r18,r2
    70a8:	1885c83a 	sub	r2,r3,r2
    70ac:	b8800215 	stw	r2,8(r23)
    70b0:	103fce26 	beq	r2,zero,6fec <__sfvwrite_r+0xb4>
    70b4:	8100030b 	ldhu	r4,12(r16)
    70b8:	903fe61e 	bne	r18,zero,7054 <__sfvwrite_r+0x11c>
    70bc:	8f000017 	ldw	fp,0(r17)
    70c0:	8c800117 	ldw	r18,4(r17)
    70c4:	8c400204 	addi	r17,r17,8
    70c8:	003fe106 	br	7050 <__sfvwrite_r+0x118>
    70cc:	8cc00017 	ldw	r19,0(r17)
    70d0:	8c800117 	ldw	r18,4(r17)
    70d4:	8c400204 	addi	r17,r17,8
    70d8:	003fb306 	br	6fa8 <__sfvwrite_r+0x70>
    70dc:	0005883a 	mov	r2,zero
    70e0:	f800283a 	ret
    70e4:	00a00034 	movhi	r2,32768
    70e8:	10bfffc4 	addi	r2,r2,-1
    70ec:	9009883a 	mov	r4,r18
    70f0:	1480012e 	bgeu	r2,r18,70f8 <__sfvwrite_r+0x1c0>
    70f4:	1009883a 	mov	r4,r2
    70f8:	980b883a 	mov	r5,r19
    70fc:	0001fa40 	call	1fa4 <__divsi3>
    7100:	81400717 	ldw	r5,28(r16)
    7104:	80c00917 	ldw	r3,36(r16)
    7108:	988f383a 	mul	r7,r19,r2
    710c:	a009883a 	mov	r4,r20
    7110:	e00d883a 	mov	r6,fp
    7114:	183ee83a 	callr	r3
    7118:	00bfe016 	blt	zero,r2,709c <__sfvwrite_r+0x164>
    711c:	8080030b 	ldhu	r2,12(r16)
    7120:	10801014 	ori	r2,r2,64
    7124:	8080030d 	sth	r2,12(r16)
    7128:	00bfffc4 	movi	r2,-1
    712c:	003fb006 	br	6ff0 <__sfvwrite_r+0xb8>
    7130:	0027883a 	mov	r19,zero
    7134:	0011883a 	mov	r8,zero
    7138:	0039883a 	mov	fp,zero
    713c:	0025883a 	mov	r18,zero
    7140:	90001f26 	beq	r18,zero,71c0 <__sfvwrite_r+0x288>
    7144:	40006026 	beq	r8,zero,72c8 <__sfvwrite_r+0x390>
    7148:	982b883a 	mov	r21,r19
    714c:	94c0012e 	bgeu	r18,r19,7154 <__sfvwrite_r+0x21c>
    7150:	902b883a 	mov	r21,r18
    7154:	81000017 	ldw	r4,0(r16)
    7158:	80800417 	ldw	r2,16(r16)
    715c:	a82d883a 	mov	r22,r21
    7160:	81800217 	ldw	r6,8(r16)
    7164:	81c00517 	ldw	r7,20(r16)
    7168:	1100022e 	bgeu	r2,r4,7174 <__sfvwrite_r+0x23c>
    716c:	31c7883a 	add	r3,r6,r7
    7170:	1d401816 	blt	r3,r21,71d4 <__sfvwrite_r+0x29c>
    7174:	a9c04416 	blt	r21,r7,7288 <__sfvwrite_r+0x350>
    7178:	80800917 	ldw	r2,36(r16)
    717c:	81400717 	ldw	r5,28(r16)
    7180:	a009883a 	mov	r4,r20
    7184:	da000115 	stw	r8,4(sp)
    7188:	e00d883a 	mov	r6,fp
    718c:	103ee83a 	callr	r2
    7190:	102d883a 	mov	r22,r2
    7194:	da000117 	ldw	r8,4(sp)
    7198:	00bfe00e 	bge	zero,r2,711c <__sfvwrite_r+0x1e4>
    719c:	9da7c83a 	sub	r19,r19,r22
    71a0:	98001f26 	beq	r19,zero,7220 <__sfvwrite_r+0x2e8>
    71a4:	b8800217 	ldw	r2,8(r23)
    71a8:	e5b9883a 	add	fp,fp,r22
    71ac:	95a5c83a 	sub	r18,r18,r22
    71b0:	15adc83a 	sub	r22,r2,r22
    71b4:	bd800215 	stw	r22,8(r23)
    71b8:	b03f8c26 	beq	r22,zero,6fec <__sfvwrite_r+0xb4>
    71bc:	903fe11e 	bne	r18,zero,7144 <__sfvwrite_r+0x20c>
    71c0:	8f000017 	ldw	fp,0(r17)
    71c4:	8c800117 	ldw	r18,4(r17)
    71c8:	0011883a 	mov	r8,zero
    71cc:	8c400204 	addi	r17,r17,8
    71d0:	003fdb06 	br	7140 <__sfvwrite_r+0x208>
    71d4:	180d883a 	mov	r6,r3
    71d8:	e00b883a 	mov	r5,fp
    71dc:	da000115 	stw	r8,4(sp)
    71e0:	d8c00015 	stw	r3,0(sp)
    71e4:	0007a380 	call	7a38 <memmove>
    71e8:	d8c00017 	ldw	r3,0(sp)
    71ec:	80800017 	ldw	r2,0(r16)
    71f0:	a009883a 	mov	r4,r20
    71f4:	800b883a 	mov	r5,r16
    71f8:	10c5883a 	add	r2,r2,r3
    71fc:	80800015 	stw	r2,0(r16)
    7200:	d8c00015 	stw	r3,0(sp)
    7204:	00066f80 	call	66f8 <_fflush_r>
    7208:	d8c00017 	ldw	r3,0(sp)
    720c:	da000117 	ldw	r8,4(sp)
    7210:	103fc21e 	bne	r2,zero,711c <__sfvwrite_r+0x1e4>
    7214:	182d883a 	mov	r22,r3
    7218:	9da7c83a 	sub	r19,r19,r22
    721c:	983fe11e 	bne	r19,zero,71a4 <__sfvwrite_r+0x26c>
    7220:	a009883a 	mov	r4,r20
    7224:	800b883a 	mov	r5,r16
    7228:	00066f80 	call	66f8 <_fflush_r>
    722c:	103fbb1e 	bne	r2,zero,711c <__sfvwrite_r+0x1e4>
    7230:	0011883a 	mov	r8,zero
    7234:	003fdb06 	br	71a4 <__sfvwrite_r+0x26c>
    7238:	81000017 	ldw	r4,0(r16)
    723c:	80800417 	ldw	r2,16(r16)
    7240:	11000236 	bltu	r2,r4,724c <__sfvwrite_r+0x314>
    7244:	84c00517 	ldw	r19,20(r16)
    7248:	94ffa62e 	bgeu	r18,r19,70e4 <__sfvwrite_r+0x1ac>
    724c:	9027883a 	mov	r19,r18
    7250:	b480012e 	bgeu	r22,r18,7258 <__sfvwrite_r+0x320>
    7254:	b027883a 	mov	r19,r22
    7258:	e00b883a 	mov	r5,fp
    725c:	980d883a 	mov	r6,r19
    7260:	0007a380 	call	7a38 <memmove>
    7264:	80800217 	ldw	r2,8(r16)
    7268:	80c00017 	ldw	r3,0(r16)
    726c:	14c5c83a 	sub	r2,r2,r19
    7270:	1cc7883a 	add	r3,r3,r19
    7274:	80800215 	stw	r2,8(r16)
    7278:	80c00015 	stw	r3,0(r16)
    727c:	10004326 	beq	r2,zero,738c <__sfvwrite_r+0x454>
    7280:	9805883a 	mov	r2,r19
    7284:	003f8506 	br	709c <__sfvwrite_r+0x164>
    7288:	a80d883a 	mov	r6,r21
    728c:	e00b883a 	mov	r5,fp
    7290:	da000115 	stw	r8,4(sp)
    7294:	0007a380 	call	7a38 <memmove>
    7298:	80800217 	ldw	r2,8(r16)
    729c:	80c00017 	ldw	r3,0(r16)
    72a0:	da000117 	ldw	r8,4(sp)
    72a4:	1545c83a 	sub	r2,r2,r21
    72a8:	1d6b883a 	add	r21,r3,r21
    72ac:	80800215 	stw	r2,8(r16)
    72b0:	85400015 	stw	r21,0(r16)
    72b4:	003fb906 	br	719c <__sfvwrite_r+0x264>
    72b8:	81000017 	ldw	r4,0(r16)
    72bc:	902d883a 	mov	r22,r18
    72c0:	9027883a 	mov	r19,r18
    72c4:	003f6b06 	br	7074 <__sfvwrite_r+0x13c>
    72c8:	e009883a 	mov	r4,fp
    72cc:	01400284 	movi	r5,10
    72d0:	900d883a 	mov	r6,r18
    72d4:	00078180 	call	7818 <memchr>
    72d8:	10003e26 	beq	r2,zero,73d4 <__sfvwrite_r+0x49c>
    72dc:	10800044 	addi	r2,r2,1
    72e0:	1727c83a 	sub	r19,r2,fp
    72e4:	02000044 	movi	r8,1
    72e8:	003f9706 	br	7148 <__sfvwrite_r+0x210>
    72ec:	80800517 	ldw	r2,20(r16)
    72f0:	81400417 	ldw	r5,16(r16)
    72f4:	80c00017 	ldw	r3,0(r16)
    72f8:	10a7883a 	add	r19,r2,r2
    72fc:	9885883a 	add	r2,r19,r2
    7300:	1026d7fa 	srli	r19,r2,31
    7304:	196bc83a 	sub	r21,r3,r5
    7308:	a9800044 	addi	r6,r21,1
    730c:	9885883a 	add	r2,r19,r2
    7310:	1027d07a 	srai	r19,r2,1
    7314:	3485883a 	add	r2,r6,r18
    7318:	980d883a 	mov	r6,r19
    731c:	9880022e 	bgeu	r19,r2,7328 <__sfvwrite_r+0x3f0>
    7320:	1027883a 	mov	r19,r2
    7324:	100d883a 	mov	r6,r2
    7328:	2101000c 	andi	r4,r4,1024
    732c:	20001c26 	beq	r4,zero,73a0 <__sfvwrite_r+0x468>
    7330:	a009883a 	mov	r4,r20
    7334:	300b883a 	mov	r5,r6
    7338:	000208c0 	call	208c <_malloc_r>
    733c:	102d883a 	mov	r22,r2
    7340:	10002926 	beq	r2,zero,73e8 <__sfvwrite_r+0x4b0>
    7344:	81400417 	ldw	r5,16(r16)
    7348:	1009883a 	mov	r4,r2
    734c:	a80d883a 	mov	r6,r21
    7350:	00079000 	call	7900 <memcpy>
    7354:	8080030b 	ldhu	r2,12(r16)
    7358:	00fedfc4 	movi	r3,-1153
    735c:	10c4703a 	and	r2,r2,r3
    7360:	10802014 	ori	r2,r2,128
    7364:	8080030d 	sth	r2,12(r16)
    7368:	b549883a 	add	r4,r22,r21
    736c:	9d4bc83a 	sub	r5,r19,r21
    7370:	85800415 	stw	r22,16(r16)
    7374:	84c00515 	stw	r19,20(r16)
    7378:	81000015 	stw	r4,0(r16)
    737c:	902d883a 	mov	r22,r18
    7380:	81400215 	stw	r5,8(r16)
    7384:	9027883a 	mov	r19,r18
    7388:	003f3a06 	br	7074 <__sfvwrite_r+0x13c>
    738c:	a009883a 	mov	r4,r20
    7390:	800b883a 	mov	r5,r16
    7394:	00066f80 	call	66f8 <_fflush_r>
    7398:	103fb926 	beq	r2,zero,7280 <__sfvwrite_r+0x348>
    739c:	003f5f06 	br	711c <__sfvwrite_r+0x1e4>
    73a0:	a009883a 	mov	r4,r20
    73a4:	0008c580 	call	8c58 <_realloc_r>
    73a8:	102d883a 	mov	r22,r2
    73ac:	103fee1e 	bne	r2,zero,7368 <__sfvwrite_r+0x430>
    73b0:	81400417 	ldw	r5,16(r16)
    73b4:	a009883a 	mov	r4,r20
    73b8:	0006c480 	call	6c48 <_free_r>
    73bc:	8080030b 	ldhu	r2,12(r16)
    73c0:	00ffdfc4 	movi	r3,-129
    73c4:	1884703a 	and	r2,r3,r2
    73c8:	00c00304 	movi	r3,12
    73cc:	a0c00015 	stw	r3,0(r20)
    73d0:	003f5306 	br	7120 <__sfvwrite_r+0x1e8>
    73d4:	94c00044 	addi	r19,r18,1
    73d8:	02000044 	movi	r8,1
    73dc:	003f5a06 	br	7148 <__sfvwrite_r+0x210>
    73e0:	00bfffc4 	movi	r2,-1
    73e4:	003f0206 	br	6ff0 <__sfvwrite_r+0xb8>
    73e8:	00800304 	movi	r2,12
    73ec:	a0800015 	stw	r2,0(r20)
    73f0:	8080030b 	ldhu	r2,12(r16)
    73f4:	003f4a06 	br	7120 <__sfvwrite_r+0x1e8>

000073f8 <_fwalk>:
    73f8:	defff704 	addi	sp,sp,-36
    73fc:	dd000415 	stw	r20,16(sp)
    7400:	dfc00815 	stw	ra,32(sp)
    7404:	ddc00715 	stw	r23,28(sp)
    7408:	dd800615 	stw	r22,24(sp)
    740c:	dd400515 	stw	r21,20(sp)
    7410:	dcc00315 	stw	r19,12(sp)
    7414:	dc800215 	stw	r18,8(sp)
    7418:	dc400115 	stw	r17,4(sp)
    741c:	dc000015 	stw	r16,0(sp)
    7420:	2500b804 	addi	r20,r4,736
    7424:	a0002326 	beq	r20,zero,74b4 <_fwalk+0xbc>
    7428:	282b883a 	mov	r21,r5
    742c:	002f883a 	mov	r23,zero
    7430:	05800044 	movi	r22,1
    7434:	04ffffc4 	movi	r19,-1
    7438:	a4400117 	ldw	r17,4(r20)
    743c:	a4800217 	ldw	r18,8(r20)
    7440:	8c7fffc4 	addi	r17,r17,-1
    7444:	88000d16 	blt	r17,zero,747c <_fwalk+0x84>
    7448:	94000304 	addi	r16,r18,12
    744c:	94800384 	addi	r18,r18,14
    7450:	80c0000b 	ldhu	r3,0(r16)
    7454:	8c7fffc4 	addi	r17,r17,-1
    7458:	813ffd04 	addi	r4,r16,-12
    745c:	b0c0042e 	bgeu	r22,r3,7470 <_fwalk+0x78>
    7460:	90c0000f 	ldh	r3,0(r18)
    7464:	1cc00226 	beq	r3,r19,7470 <_fwalk+0x78>
    7468:	a83ee83a 	callr	r21
    746c:	b8aeb03a 	or	r23,r23,r2
    7470:	84001a04 	addi	r16,r16,104
    7474:	94801a04 	addi	r18,r18,104
    7478:	8cfff51e 	bne	r17,r19,7450 <_fwalk+0x58>
    747c:	a5000017 	ldw	r20,0(r20)
    7480:	a03fed1e 	bne	r20,zero,7438 <_fwalk+0x40>
    7484:	b805883a 	mov	r2,r23
    7488:	dfc00817 	ldw	ra,32(sp)
    748c:	ddc00717 	ldw	r23,28(sp)
    7490:	dd800617 	ldw	r22,24(sp)
    7494:	dd400517 	ldw	r21,20(sp)
    7498:	dd000417 	ldw	r20,16(sp)
    749c:	dcc00317 	ldw	r19,12(sp)
    74a0:	dc800217 	ldw	r18,8(sp)
    74a4:	dc400117 	ldw	r17,4(sp)
    74a8:	dc000017 	ldw	r16,0(sp)
    74ac:	dec00904 	addi	sp,sp,36
    74b0:	f800283a 	ret
    74b4:	002f883a 	mov	r23,zero
    74b8:	003ff206 	br	7484 <_fwalk+0x8c>

000074bc <_fwalk_reent>:
    74bc:	defff704 	addi	sp,sp,-36
    74c0:	dd400515 	stw	r21,20(sp)
    74c4:	dfc00815 	stw	ra,32(sp)
    74c8:	ddc00715 	stw	r23,28(sp)
    74cc:	dd800615 	stw	r22,24(sp)
    74d0:	dd000415 	stw	r20,16(sp)
    74d4:	dcc00315 	stw	r19,12(sp)
    74d8:	dc800215 	stw	r18,8(sp)
    74dc:	dc400115 	stw	r17,4(sp)
    74e0:	dc000015 	stw	r16,0(sp)
    74e4:	2540b804 	addi	r21,r4,736
    74e8:	a8002326 	beq	r21,zero,7578 <_fwalk_reent+0xbc>
    74ec:	2829883a 	mov	r20,r5
    74f0:	202d883a 	mov	r22,r4
    74f4:	002f883a 	mov	r23,zero
    74f8:	04c00044 	movi	r19,1
    74fc:	04bfffc4 	movi	r18,-1
    7500:	ac400117 	ldw	r17,4(r21)
    7504:	ac000217 	ldw	r16,8(r21)
    7508:	8c7fffc4 	addi	r17,r17,-1
    750c:	88000c16 	blt	r17,zero,7540 <_fwalk_reent+0x84>
    7510:	84000304 	addi	r16,r16,12
    7514:	80c0000b 	ldhu	r3,0(r16)
    7518:	8c7fffc4 	addi	r17,r17,-1
    751c:	817ffd04 	addi	r5,r16,-12
    7520:	98c0052e 	bgeu	r19,r3,7538 <_fwalk_reent+0x7c>
    7524:	80c0008f 	ldh	r3,2(r16)
    7528:	b009883a 	mov	r4,r22
    752c:	1c800226 	beq	r3,r18,7538 <_fwalk_reent+0x7c>
    7530:	a03ee83a 	callr	r20
    7534:	b8aeb03a 	or	r23,r23,r2
    7538:	84001a04 	addi	r16,r16,104
    753c:	8cbff51e 	bne	r17,r18,7514 <_fwalk_reent+0x58>
    7540:	ad400017 	ldw	r21,0(r21)
    7544:	a83fee1e 	bne	r21,zero,7500 <_fwalk_reent+0x44>
    7548:	b805883a 	mov	r2,r23
    754c:	dfc00817 	ldw	ra,32(sp)
    7550:	ddc00717 	ldw	r23,28(sp)
    7554:	dd800617 	ldw	r22,24(sp)
    7558:	dd400517 	ldw	r21,20(sp)
    755c:	dd000417 	ldw	r20,16(sp)
    7560:	dcc00317 	ldw	r19,12(sp)
    7564:	dc800217 	ldw	r18,8(sp)
    7568:	dc400117 	ldw	r17,4(sp)
    756c:	dc000017 	ldw	r16,0(sp)
    7570:	dec00904 	addi	sp,sp,36
    7574:	f800283a 	ret
    7578:	002f883a 	mov	r23,zero
    757c:	003ff206 	br	7548 <_fwalk_reent+0x8c>

00007580 <_setlocale_r>:
    7580:	30001b26 	beq	r6,zero,75f0 <_setlocale_r+0x70>
    7584:	01400074 	movhi	r5,1
    7588:	defffe04 	addi	sp,sp,-8
    758c:	29448404 	addi	r5,r5,4624
    7590:	3009883a 	mov	r4,r6
    7594:	dc000015 	stw	r16,0(sp)
    7598:	dfc00115 	stw	ra,4(sp)
    759c:	3021883a 	mov	r16,r6
    75a0:	00093700 	call	9370 <strcmp>
    75a4:	1000061e 	bne	r2,zero,75c0 <_setlocale_r+0x40>
    75a8:	00800074 	movhi	r2,1
    75ac:	10848304 	addi	r2,r2,4620
    75b0:	dfc00117 	ldw	ra,4(sp)
    75b4:	dc000017 	ldw	r16,0(sp)
    75b8:	dec00204 	addi	sp,sp,8
    75bc:	f800283a 	ret
    75c0:	01400074 	movhi	r5,1
    75c4:	29448304 	addi	r5,r5,4620
    75c8:	8009883a 	mov	r4,r16
    75cc:	00093700 	call	9370 <strcmp>
    75d0:	103ff526 	beq	r2,zero,75a8 <_setlocale_r+0x28>
    75d4:	01400074 	movhi	r5,1
    75d8:	29446e04 	addi	r5,r5,4536
    75dc:	8009883a 	mov	r4,r16
    75e0:	00093700 	call	9370 <strcmp>
    75e4:	103ff026 	beq	r2,zero,75a8 <_setlocale_r+0x28>
    75e8:	0005883a 	mov	r2,zero
    75ec:	003ff006 	br	75b0 <_setlocale_r+0x30>
    75f0:	00800074 	movhi	r2,1
    75f4:	10848304 	addi	r2,r2,4620
    75f8:	f800283a 	ret

000075fc <__locale_charset>:
    75fc:	00800074 	movhi	r2,1
    7600:	10873604 	addi	r2,r2,7384
    7604:	f800283a 	ret

00007608 <__locale_mb_cur_max>:
    7608:	00800074 	movhi	r2,1
    760c:	108bd204 	addi	r2,r2,12104
    7610:	10800017 	ldw	r2,0(r2)
    7614:	f800283a 	ret

00007618 <__locale_msgcharset>:
    7618:	00800074 	movhi	r2,1
    761c:	10872e04 	addi	r2,r2,7352
    7620:	f800283a 	ret

00007624 <__locale_cjk_lang>:
    7624:	0005883a 	mov	r2,zero
    7628:	f800283a 	ret

0000762c <_localeconv_r>:
    762c:	00800074 	movhi	r2,1
    7630:	10873e04 	addi	r2,r2,7416
    7634:	f800283a 	ret

00007638 <setlocale>:
    7638:	00c00074 	movhi	r3,1
    763c:	18cbd104 	addi	r3,r3,12100
    7640:	2005883a 	mov	r2,r4
    7644:	19000017 	ldw	r4,0(r3)
    7648:	280d883a 	mov	r6,r5
    764c:	100b883a 	mov	r5,r2
    7650:	00075801 	jmpi	7580 <_setlocale_r>

00007654 <localeconv>:
    7654:	00800074 	movhi	r2,1
    7658:	10873e04 	addi	r2,r2,7416
    765c:	f800283a 	ret

00007660 <__smakebuf_r>:
    7660:	2880030b 	ldhu	r2,12(r5)
    7664:	10c0008c 	andi	r3,r2,2
    7668:	1800401e 	bne	r3,zero,776c <__smakebuf_r+0x10c>
    766c:	deffec04 	addi	sp,sp,-80
    7670:	dc000f15 	stw	r16,60(sp)
    7674:	2821883a 	mov	r16,r5
    7678:	2940038f 	ldh	r5,14(r5)
    767c:	dc401015 	stw	r17,64(sp)
    7680:	dfc01315 	stw	ra,76(sp)
    7684:	dcc01215 	stw	r19,72(sp)
    7688:	dc801115 	stw	r18,68(sp)
    768c:	2023883a 	mov	r17,r4
    7690:	28001b16 	blt	r5,zero,7700 <__smakebuf_r+0xa0>
    7694:	d80d883a 	mov	r6,sp
    7698:	000ad300 	call	ad30 <_fstat_r>
    769c:	10001716 	blt	r2,zero,76fc <__smakebuf_r+0x9c>
    76a0:	d8800117 	ldw	r2,4(sp)
    76a4:	00e00014 	movui	r3,32768
    76a8:	10bc000c 	andi	r2,r2,61440
    76ac:	10c03726 	beq	r2,r3,778c <__smakebuf_r+0x12c>
    76b0:	80c0030b 	ldhu	r3,12(r16)
    76b4:	18c20014 	ori	r3,r3,2048
    76b8:	80c0030d 	sth	r3,12(r16)
    76bc:	00c80004 	movi	r3,8192
    76c0:	10c03c1e 	bne	r2,r3,77b4 <__smakebuf_r+0x154>
    76c4:	8140038f 	ldh	r5,14(r16)
    76c8:	8809883a 	mov	r4,r17
    76cc:	000ad880 	call	ad88 <_isatty_r>
    76d0:	10004e26 	beq	r2,zero,780c <__smakebuf_r+0x1ac>
    76d4:	8080030b 	ldhu	r2,12(r16)
    76d8:	04c00044 	movi	r19,1
    76dc:	80c010c4 	addi	r3,r16,67
    76e0:	14c4b03a 	or	r2,r2,r19
    76e4:	8080030d 	sth	r2,12(r16)
    76e8:	80c00015 	stw	r3,0(r16)
    76ec:	80c00415 	stw	r3,16(r16)
    76f0:	84c00515 	stw	r19,20(r16)
    76f4:	04810004 	movi	r18,1024
    76f8:	00000706 	br	7718 <__smakebuf_r+0xb8>
    76fc:	8080030b 	ldhu	r2,12(r16)
    7700:	10c0200c 	andi	r3,r2,128
    7704:	18001f1e 	bne	r3,zero,7784 <__smakebuf_r+0x124>
    7708:	04810004 	movi	r18,1024
    770c:	10820014 	ori	r2,r2,2048
    7710:	8080030d 	sth	r2,12(r16)
    7714:	0027883a 	mov	r19,zero
    7718:	8809883a 	mov	r4,r17
    771c:	900b883a 	mov	r5,r18
    7720:	000208c0 	call	208c <_malloc_r>
    7724:	10002e26 	beq	r2,zero,77e0 <__smakebuf_r+0x180>
    7728:	80c0030b 	ldhu	r3,12(r16)
    772c:	01000034 	movhi	r4,0
    7730:	2119e504 	addi	r4,r4,26516
    7734:	89000f15 	stw	r4,60(r17)
    7738:	18c02014 	ori	r3,r3,128
    773c:	80c0030d 	sth	r3,12(r16)
    7740:	80800015 	stw	r2,0(r16)
    7744:	80800415 	stw	r2,16(r16)
    7748:	84800515 	stw	r18,20(r16)
    774c:	98001c1e 	bne	r19,zero,77c0 <__smakebuf_r+0x160>
    7750:	dfc01317 	ldw	ra,76(sp)
    7754:	dcc01217 	ldw	r19,72(sp)
    7758:	dc801117 	ldw	r18,68(sp)
    775c:	dc401017 	ldw	r17,64(sp)
    7760:	dc000f17 	ldw	r16,60(sp)
    7764:	dec01404 	addi	sp,sp,80
    7768:	f800283a 	ret
    776c:	288010c4 	addi	r2,r5,67
    7770:	28800015 	stw	r2,0(r5)
    7774:	28800415 	stw	r2,16(r5)
    7778:	00800044 	movi	r2,1
    777c:	28800515 	stw	r2,20(r5)
    7780:	f800283a 	ret
    7784:	04801004 	movi	r18,64
    7788:	003fe006 	br	770c <__smakebuf_r+0xac>
    778c:	81000a17 	ldw	r4,40(r16)
    7790:	00c00074 	movhi	r3,1
    7794:	18e4c304 	addi	r3,r3,-27892
    7798:	20ffc51e 	bne	r4,r3,76b0 <__smakebuf_r+0x50>
    779c:	80c0030b 	ldhu	r3,12(r16)
    77a0:	01010004 	movi	r4,1024
    77a4:	81001315 	stw	r4,76(r16)
    77a8:	1906b03a 	or	r3,r3,r4
    77ac:	80c0030d 	sth	r3,12(r16)
    77b0:	003fc206 	br	76bc <__smakebuf_r+0x5c>
    77b4:	0027883a 	mov	r19,zero
    77b8:	04810004 	movi	r18,1024
    77bc:	003fd606 	br	7718 <__smakebuf_r+0xb8>
    77c0:	8140038f 	ldh	r5,14(r16)
    77c4:	8809883a 	mov	r4,r17
    77c8:	000ad880 	call	ad88 <_isatty_r>
    77cc:	103fe026 	beq	r2,zero,7750 <__smakebuf_r+0xf0>
    77d0:	8080030b 	ldhu	r2,12(r16)
    77d4:	10800054 	ori	r2,r2,1
    77d8:	8080030d 	sth	r2,12(r16)
    77dc:	003fdc06 	br	7750 <__smakebuf_r+0xf0>
    77e0:	8080030b 	ldhu	r2,12(r16)
    77e4:	10c0800c 	andi	r3,r2,512
    77e8:	183fd91e 	bne	r3,zero,7750 <__smakebuf_r+0xf0>
    77ec:	10800094 	ori	r2,r2,2
    77f0:	80c010c4 	addi	r3,r16,67
    77f4:	8080030d 	sth	r2,12(r16)
    77f8:	00800044 	movi	r2,1
    77fc:	80c00015 	stw	r3,0(r16)
    7800:	80c00415 	stw	r3,16(r16)
    7804:	80800515 	stw	r2,20(r16)
    7808:	003fd106 	br	7750 <__smakebuf_r+0xf0>
    780c:	04c00044 	movi	r19,1
    7810:	04810004 	movi	r18,1024
    7814:	003fc006 	br	7718 <__smakebuf_r+0xb8>

00007818 <memchr>:
    7818:	208000cc 	andi	r2,r4,3
    781c:	280f883a 	mov	r7,r5
    7820:	10003526 	beq	r2,zero,78f8 <memchr+0xe0>
    7824:	30bfffc4 	addi	r2,r6,-1
    7828:	30001b26 	beq	r6,zero,7898 <memchr+0x80>
    782c:	21800003 	ldbu	r6,0(r4)
    7830:	28c03fcc 	andi	r3,r5,255
    7834:	30c01a26 	beq	r6,r3,78a0 <memchr+0x88>
    7838:	180d883a 	mov	r6,r3
    783c:	00000406 	br	7850 <memchr+0x38>
    7840:	10001526 	beq	r2,zero,7898 <memchr+0x80>
    7844:	20c00003 	ldbu	r3,0(r4)
    7848:	10bfffc4 	addi	r2,r2,-1
    784c:	19801426 	beq	r3,r6,78a0 <memchr+0x88>
    7850:	21000044 	addi	r4,r4,1
    7854:	20c000cc 	andi	r3,r4,3
    7858:	183ff91e 	bne	r3,zero,7840 <memchr+0x28>
    785c:	024000c4 	movi	r9,3
    7860:	48801136 	bltu	r9,r2,78a8 <memchr+0x90>
    7864:	10000c26 	beq	r2,zero,7898 <memchr+0x80>
    7868:	20c00003 	ldbu	r3,0(r4)
    786c:	29403fcc 	andi	r5,r5,255
    7870:	19400b26 	beq	r3,r5,78a0 <memchr+0x88>
    7874:	20c00044 	addi	r3,r4,1
    7878:	2085883a 	add	r2,r4,r2
    787c:	39803fcc 	andi	r6,r7,255
    7880:	00000306 	br	7890 <memchr+0x78>
    7884:	18c00044 	addi	r3,r3,1
    7888:	197fffc3 	ldbu	r5,-1(r3)
    788c:	29800426 	beq	r5,r6,78a0 <memchr+0x88>
    7890:	1809883a 	mov	r4,r3
    7894:	18bffb1e 	bne	r3,r2,7884 <memchr+0x6c>
    7898:	0005883a 	mov	r2,zero
    789c:	f800283a 	ret
    78a0:	2005883a 	mov	r2,r4
    78a4:	f800283a 	ret
    78a8:	28c03fcc 	andi	r3,r5,255
    78ac:	1810923a 	slli	r8,r3,8
    78b0:	02ffbff4 	movhi	r11,65279
    78b4:	02a02074 	movhi	r10,32897
    78b8:	40c6b03a 	or	r3,r8,r3
    78bc:	1810943a 	slli	r8,r3,16
    78c0:	5affbfc4 	addi	r11,r11,-257
    78c4:	52a02004 	addi	r10,r10,-32640
    78c8:	40d0b03a 	or	r8,r8,r3
    78cc:	20c00017 	ldw	r3,0(r4)
    78d0:	40c6f03a 	xor	r3,r8,r3
    78d4:	1acd883a 	add	r6,r3,r11
    78d8:	00c6303a 	nor	r3,zero,r3
    78dc:	30c6703a 	and	r3,r6,r3
    78e0:	1a86703a 	and	r3,r3,r10
    78e4:	183fdf1e 	bne	r3,zero,7864 <memchr+0x4c>
    78e8:	10bfff04 	addi	r2,r2,-4
    78ec:	21000104 	addi	r4,r4,4
    78f0:	48bff636 	bltu	r9,r2,78cc <memchr+0xb4>
    78f4:	003fdb06 	br	7864 <memchr+0x4c>
    78f8:	3005883a 	mov	r2,r6
    78fc:	003fd706 	br	785c <memchr+0x44>

00007900 <memcpy>:
    7900:	deffff04 	addi	sp,sp,-4
    7904:	dc000015 	stw	r16,0(sp)
    7908:	00c003c4 	movi	r3,15
    790c:	2005883a 	mov	r2,r4
    7910:	1980432e 	bgeu	r3,r6,7a20 <memcpy+0x120>
    7914:	2146b03a 	or	r3,r4,r5
    7918:	18c000cc 	andi	r3,r3,3
    791c:	1800421e 	bne	r3,zero,7a28 <memcpy+0x128>
    7920:	343ffc04 	addi	r16,r6,-16
    7924:	8020d13a 	srli	r16,r16,4
    7928:	28c00104 	addi	r3,r5,4
    792c:	23400104 	addi	r13,r4,4
    7930:	801e913a 	slli	r15,r16,4
    7934:	2b000204 	addi	r12,r5,8
    7938:	22c00204 	addi	r11,r4,8
    793c:	7bc00504 	addi	r15,r15,20
    7940:	2a800304 	addi	r10,r5,12
    7944:	22400304 	addi	r9,r4,12
    7948:	2bdf883a 	add	r15,r5,r15
    794c:	2811883a 	mov	r8,r5
    7950:	200f883a 	mov	r7,r4
    7954:	41000017 	ldw	r4,0(r8)
    7958:	39c00404 	addi	r7,r7,16
    795c:	18c00404 	addi	r3,r3,16
    7960:	393ffc15 	stw	r4,-16(r7)
    7964:	1bbffc17 	ldw	r14,-16(r3)
    7968:	6b400404 	addi	r13,r13,16
    796c:	5ac00404 	addi	r11,r11,16
    7970:	6bbffc15 	stw	r14,-16(r13)
    7974:	63800017 	ldw	r14,0(r12)
    7978:	4a400404 	addi	r9,r9,16
    797c:	42000404 	addi	r8,r8,16
    7980:	5bbffc15 	stw	r14,-16(r11)
    7984:	53800017 	ldw	r14,0(r10)
    7988:	63000404 	addi	r12,r12,16
    798c:	52800404 	addi	r10,r10,16
    7990:	4bbffc15 	stw	r14,-16(r9)
    7994:	1bffef1e 	bne	r3,r15,7954 <memcpy+0x54>
    7998:	81c00044 	addi	r7,r16,1
    799c:	380e913a 	slli	r7,r7,4
    79a0:	310003cc 	andi	r4,r6,15
    79a4:	02c000c4 	movi	r11,3
    79a8:	11c7883a 	add	r3,r2,r7
    79ac:	29cb883a 	add	r5,r5,r7
    79b0:	59001f2e 	bgeu	r11,r4,7a30 <memcpy+0x130>
    79b4:	1813883a 	mov	r9,r3
    79b8:	2811883a 	mov	r8,r5
    79bc:	200f883a 	mov	r7,r4
    79c0:	42800017 	ldw	r10,0(r8)
    79c4:	4a400104 	addi	r9,r9,4
    79c8:	39ffff04 	addi	r7,r7,-4
    79cc:	4abfff15 	stw	r10,-4(r9)
    79d0:	42000104 	addi	r8,r8,4
    79d4:	59fffa36 	bltu	r11,r7,79c0 <memcpy+0xc0>
    79d8:	213fff04 	addi	r4,r4,-4
    79dc:	2008d0ba 	srli	r4,r4,2
    79e0:	318000cc 	andi	r6,r6,3
    79e4:	21000044 	addi	r4,r4,1
    79e8:	2109883a 	add	r4,r4,r4
    79ec:	2109883a 	add	r4,r4,r4
    79f0:	1907883a 	add	r3,r3,r4
    79f4:	290b883a 	add	r5,r5,r4
    79f8:	30000626 	beq	r6,zero,7a14 <memcpy+0x114>
    79fc:	198d883a 	add	r6,r3,r6
    7a00:	29c00003 	ldbu	r7,0(r5)
    7a04:	18c00044 	addi	r3,r3,1
    7a08:	29400044 	addi	r5,r5,1
    7a0c:	19ffffc5 	stb	r7,-1(r3)
    7a10:	19bffb1e 	bne	r3,r6,7a00 <memcpy+0x100>
    7a14:	dc000017 	ldw	r16,0(sp)
    7a18:	dec00104 	addi	sp,sp,4
    7a1c:	f800283a 	ret
    7a20:	2007883a 	mov	r3,r4
    7a24:	003ff406 	br	79f8 <memcpy+0xf8>
    7a28:	2007883a 	mov	r3,r4
    7a2c:	003ff306 	br	79fc <memcpy+0xfc>
    7a30:	200d883a 	mov	r6,r4
    7a34:	003ff006 	br	79f8 <memcpy+0xf8>

00007a38 <memmove>:
    7a38:	2005883a 	mov	r2,r4
    7a3c:	29000b2e 	bgeu	r5,r4,7a6c <memmove+0x34>
    7a40:	298f883a 	add	r7,r5,r6
    7a44:	21c0092e 	bgeu	r4,r7,7a6c <memmove+0x34>
    7a48:	2187883a 	add	r3,r4,r6
    7a4c:	198bc83a 	sub	r5,r3,r6
    7a50:	30004b26 	beq	r6,zero,7b80 <memmove+0x148>
    7a54:	39ffffc4 	addi	r7,r7,-1
    7a58:	39000003 	ldbu	r4,0(r7)
    7a5c:	18ffffc4 	addi	r3,r3,-1
    7a60:	19000005 	stb	r4,0(r3)
    7a64:	197ffb1e 	bne	r3,r5,7a54 <memmove+0x1c>
    7a68:	f800283a 	ret
    7a6c:	00c003c4 	movi	r3,15
    7a70:	1980412e 	bgeu	r3,r6,7b78 <memmove+0x140>
    7a74:	1146b03a 	or	r3,r2,r5
    7a78:	18c000cc 	andi	r3,r3,3
    7a7c:	1800411e 	bne	r3,zero,7b84 <memmove+0x14c>
    7a80:	33fffc04 	addi	r15,r6,-16
    7a84:	781ed13a 	srli	r15,r15,4
    7a88:	28c00104 	addi	r3,r5,4
    7a8c:	13400104 	addi	r13,r2,4
    7a90:	781c913a 	slli	r14,r15,4
    7a94:	2b000204 	addi	r12,r5,8
    7a98:	12c00204 	addi	r11,r2,8
    7a9c:	73800504 	addi	r14,r14,20
    7aa0:	2a800304 	addi	r10,r5,12
    7aa4:	12400304 	addi	r9,r2,12
    7aa8:	2b9d883a 	add	r14,r5,r14
    7aac:	2811883a 	mov	r8,r5
    7ab0:	100f883a 	mov	r7,r2
    7ab4:	41000017 	ldw	r4,0(r8)
    7ab8:	39c00404 	addi	r7,r7,16
    7abc:	18c00404 	addi	r3,r3,16
    7ac0:	393ffc15 	stw	r4,-16(r7)
    7ac4:	193ffc17 	ldw	r4,-16(r3)
    7ac8:	6b400404 	addi	r13,r13,16
    7acc:	5ac00404 	addi	r11,r11,16
    7ad0:	693ffc15 	stw	r4,-16(r13)
    7ad4:	61000017 	ldw	r4,0(r12)
    7ad8:	4a400404 	addi	r9,r9,16
    7adc:	42000404 	addi	r8,r8,16
    7ae0:	593ffc15 	stw	r4,-16(r11)
    7ae4:	51000017 	ldw	r4,0(r10)
    7ae8:	63000404 	addi	r12,r12,16
    7aec:	52800404 	addi	r10,r10,16
    7af0:	493ffc15 	stw	r4,-16(r9)
    7af4:	1bbfef1e 	bne	r3,r14,7ab4 <memmove+0x7c>
    7af8:	79000044 	addi	r4,r15,1
    7afc:	2008913a 	slli	r4,r4,4
    7b00:	328003cc 	andi	r10,r6,15
    7b04:	02c000c4 	movi	r11,3
    7b08:	1107883a 	add	r3,r2,r4
    7b0c:	290b883a 	add	r5,r5,r4
    7b10:	5a801e2e 	bgeu	r11,r10,7b8c <memmove+0x154>
    7b14:	1813883a 	mov	r9,r3
    7b18:	2811883a 	mov	r8,r5
    7b1c:	500f883a 	mov	r7,r10
    7b20:	41000017 	ldw	r4,0(r8)
    7b24:	4a400104 	addi	r9,r9,4
    7b28:	39ffff04 	addi	r7,r7,-4
    7b2c:	493fff15 	stw	r4,-4(r9)
    7b30:	42000104 	addi	r8,r8,4
    7b34:	59fffa36 	bltu	r11,r7,7b20 <memmove+0xe8>
    7b38:	513fff04 	addi	r4,r10,-4
    7b3c:	2008d0ba 	srli	r4,r4,2
    7b40:	318000cc 	andi	r6,r6,3
    7b44:	21000044 	addi	r4,r4,1
    7b48:	2109883a 	add	r4,r4,r4
    7b4c:	2109883a 	add	r4,r4,r4
    7b50:	1907883a 	add	r3,r3,r4
    7b54:	290b883a 	add	r5,r5,r4
    7b58:	30000926 	beq	r6,zero,7b80 <memmove+0x148>
    7b5c:	198d883a 	add	r6,r3,r6
    7b60:	29c00003 	ldbu	r7,0(r5)
    7b64:	18c00044 	addi	r3,r3,1
    7b68:	29400044 	addi	r5,r5,1
    7b6c:	19ffffc5 	stb	r7,-1(r3)
    7b70:	19bffb1e 	bne	r3,r6,7b60 <memmove+0x128>
    7b74:	f800283a 	ret
    7b78:	1007883a 	mov	r3,r2
    7b7c:	003ff606 	br	7b58 <memmove+0x120>
    7b80:	f800283a 	ret
    7b84:	1007883a 	mov	r3,r2
    7b88:	003ff406 	br	7b5c <memmove+0x124>
    7b8c:	500d883a 	mov	r6,r10
    7b90:	003ff106 	br	7b58 <memmove+0x120>

00007b94 <memset>:
    7b94:	20c000cc 	andi	r3,r4,3
    7b98:	2005883a 	mov	r2,r4
    7b9c:	18004326 	beq	r3,zero,7cac <memset+0x118>
    7ba0:	31ffffc4 	addi	r7,r6,-1
    7ba4:	30004026 	beq	r6,zero,7ca8 <memset+0x114>
    7ba8:	2813883a 	mov	r9,r5
    7bac:	200d883a 	mov	r6,r4
    7bb0:	2007883a 	mov	r3,r4
    7bb4:	00000406 	br	7bc8 <memset+0x34>
    7bb8:	3a3fffc4 	addi	r8,r7,-1
    7bbc:	31800044 	addi	r6,r6,1
    7bc0:	38003926 	beq	r7,zero,7ca8 <memset+0x114>
    7bc4:	400f883a 	mov	r7,r8
    7bc8:	18c00044 	addi	r3,r3,1
    7bcc:	32400005 	stb	r9,0(r6)
    7bd0:	1a0000cc 	andi	r8,r3,3
    7bd4:	403ff81e 	bne	r8,zero,7bb8 <memset+0x24>
    7bd8:	010000c4 	movi	r4,3
    7bdc:	21c02d2e 	bgeu	r4,r7,7c94 <memset+0x100>
    7be0:	29803fcc 	andi	r6,r5,255
    7be4:	3008923a 	slli	r4,r6,8
    7be8:	218cb03a 	or	r6,r4,r6
    7bec:	3008943a 	slli	r4,r6,16
    7bf0:	218cb03a 	or	r6,r4,r6
    7bf4:	010003c4 	movi	r4,15
    7bf8:	21c0182e 	bgeu	r4,r7,7c5c <memset+0xc8>
    7bfc:	3b3ffc04 	addi	r12,r7,-16
    7c00:	6018d13a 	srli	r12,r12,4
    7c04:	1a000104 	addi	r8,r3,4
    7c08:	1ac00204 	addi	r11,r3,8
    7c0c:	6008913a 	slli	r4,r12,4
    7c10:	1a800304 	addi	r10,r3,12
    7c14:	1813883a 	mov	r9,r3
    7c18:	21000504 	addi	r4,r4,20
    7c1c:	1909883a 	add	r4,r3,r4
    7c20:	49800015 	stw	r6,0(r9)
    7c24:	41800015 	stw	r6,0(r8)
    7c28:	59800015 	stw	r6,0(r11)
    7c2c:	51800015 	stw	r6,0(r10)
    7c30:	42000404 	addi	r8,r8,16
    7c34:	4a400404 	addi	r9,r9,16
    7c38:	5ac00404 	addi	r11,r11,16
    7c3c:	52800404 	addi	r10,r10,16
    7c40:	413ff71e 	bne	r8,r4,7c20 <memset+0x8c>
    7c44:	63000044 	addi	r12,r12,1
    7c48:	6018913a 	slli	r12,r12,4
    7c4c:	39c003cc 	andi	r7,r7,15
    7c50:	010000c4 	movi	r4,3
    7c54:	1b07883a 	add	r3,r3,r12
    7c58:	21c00e2e 	bgeu	r4,r7,7c94 <memset+0x100>
    7c5c:	1813883a 	mov	r9,r3
    7c60:	3811883a 	mov	r8,r7
    7c64:	010000c4 	movi	r4,3
    7c68:	49800015 	stw	r6,0(r9)
    7c6c:	423fff04 	addi	r8,r8,-4
    7c70:	4a400104 	addi	r9,r9,4
    7c74:	223ffc36 	bltu	r4,r8,7c68 <memset+0xd4>
    7c78:	393fff04 	addi	r4,r7,-4
    7c7c:	2008d0ba 	srli	r4,r4,2
    7c80:	39c000cc 	andi	r7,r7,3
    7c84:	21000044 	addi	r4,r4,1
    7c88:	2109883a 	add	r4,r4,r4
    7c8c:	2109883a 	add	r4,r4,r4
    7c90:	1907883a 	add	r3,r3,r4
    7c94:	38000426 	beq	r7,zero,7ca8 <memset+0x114>
    7c98:	19cf883a 	add	r7,r3,r7
    7c9c:	19400005 	stb	r5,0(r3)
    7ca0:	18c00044 	addi	r3,r3,1
    7ca4:	19fffd1e 	bne	r3,r7,7c9c <memset+0x108>
    7ca8:	f800283a 	ret
    7cac:	2007883a 	mov	r3,r4
    7cb0:	300f883a 	mov	r7,r6
    7cb4:	003fc806 	br	7bd8 <memset+0x44>

00007cb8 <_Balloc>:
    7cb8:	20801317 	ldw	r2,76(r4)
    7cbc:	defffc04 	addi	sp,sp,-16
    7cc0:	dc400115 	stw	r17,4(sp)
    7cc4:	dc000015 	stw	r16,0(sp)
    7cc8:	dfc00315 	stw	ra,12(sp)
    7ccc:	dc800215 	stw	r18,8(sp)
    7cd0:	2023883a 	mov	r17,r4
    7cd4:	2821883a 	mov	r16,r5
    7cd8:	10000f26 	beq	r2,zero,7d18 <_Balloc+0x60>
    7cdc:	8407883a 	add	r3,r16,r16
    7ce0:	18c7883a 	add	r3,r3,r3
    7ce4:	10c7883a 	add	r3,r2,r3
    7ce8:	18800017 	ldw	r2,0(r3)
    7cec:	10001126 	beq	r2,zero,7d34 <_Balloc+0x7c>
    7cf0:	11000017 	ldw	r4,0(r2)
    7cf4:	19000015 	stw	r4,0(r3)
    7cf8:	10000415 	stw	zero,16(r2)
    7cfc:	10000315 	stw	zero,12(r2)
    7d00:	dfc00317 	ldw	ra,12(sp)
    7d04:	dc800217 	ldw	r18,8(sp)
    7d08:	dc400117 	ldw	r17,4(sp)
    7d0c:	dc000017 	ldw	r16,0(sp)
    7d10:	dec00404 	addi	sp,sp,16
    7d14:	f800283a 	ret
    7d18:	01400104 	movi	r5,4
    7d1c:	01800844 	movi	r6,33
    7d20:	000a9880 	call	a988 <_calloc_r>
    7d24:	88801315 	stw	r2,76(r17)
    7d28:	103fec1e 	bne	r2,zero,7cdc <_Balloc+0x24>
    7d2c:	0005883a 	mov	r2,zero
    7d30:	003ff306 	br	7d00 <_Balloc+0x48>
    7d34:	01400044 	movi	r5,1
    7d38:	2c24983a 	sll	r18,r5,r16
    7d3c:	8809883a 	mov	r4,r17
    7d40:	91800144 	addi	r6,r18,5
    7d44:	318d883a 	add	r6,r6,r6
    7d48:	318d883a 	add	r6,r6,r6
    7d4c:	000a9880 	call	a988 <_calloc_r>
    7d50:	103ff626 	beq	r2,zero,7d2c <_Balloc+0x74>
    7d54:	14000115 	stw	r16,4(r2)
    7d58:	14800215 	stw	r18,8(r2)
    7d5c:	003fe606 	br	7cf8 <_Balloc+0x40>

00007d60 <_Bfree>:
    7d60:	28000826 	beq	r5,zero,7d84 <_Bfree+0x24>
    7d64:	28c00117 	ldw	r3,4(r5)
    7d68:	20801317 	ldw	r2,76(r4)
    7d6c:	18c7883a 	add	r3,r3,r3
    7d70:	18c7883a 	add	r3,r3,r3
    7d74:	10c5883a 	add	r2,r2,r3
    7d78:	10c00017 	ldw	r3,0(r2)
    7d7c:	28c00015 	stw	r3,0(r5)
    7d80:	11400015 	stw	r5,0(r2)
    7d84:	f800283a 	ret

00007d88 <__multadd>:
    7d88:	defffa04 	addi	sp,sp,-24
    7d8c:	dc000115 	stw	r16,4(sp)
    7d90:	2c000417 	ldw	r16,16(r5)
    7d94:	dc800315 	stw	r18,12(sp)
    7d98:	dc400215 	stw	r17,8(sp)
    7d9c:	dfc00515 	stw	ra,20(sp)
    7da0:	dcc00415 	stw	r19,16(sp)
    7da4:	2823883a 	mov	r17,r5
    7da8:	2025883a 	mov	r18,r4
    7dac:	2a400504 	addi	r9,r5,20
    7db0:	0015883a 	mov	r10,zero
    7db4:	4a000017 	ldw	r8,0(r9)
    7db8:	4a400104 	addi	r9,r9,4
    7dbc:	52800044 	addi	r10,r10,1
    7dc0:	40ffffcc 	andi	r3,r8,65535
    7dc4:	1987383a 	mul	r3,r3,r6
    7dc8:	4010d43a 	srli	r8,r8,16
    7dcc:	19cf883a 	add	r7,r3,r7
    7dd0:	4191383a 	mul	r8,r8,r6
    7dd4:	3816d43a 	srli	r11,r7,16
    7dd8:	38ffffcc 	andi	r3,r7,65535
    7ddc:	5a0f883a 	add	r7,r11,r8
    7de0:	3810943a 	slli	r8,r7,16
    7de4:	380ed43a 	srli	r7,r7,16
    7de8:	40c7883a 	add	r3,r8,r3
    7dec:	48ffff15 	stw	r3,-4(r9)
    7df0:	543ff016 	blt	r10,r16,7db4 <__multadd+0x2c>
    7df4:	38000926 	beq	r7,zero,7e1c <__multadd+0x94>
    7df8:	88800217 	ldw	r2,8(r17)
    7dfc:	80800f0e 	bge	r16,r2,7e3c <__multadd+0xb4>
    7e00:	80800144 	addi	r2,r16,5
    7e04:	1085883a 	add	r2,r2,r2
    7e08:	1085883a 	add	r2,r2,r2
    7e0c:	8885883a 	add	r2,r17,r2
    7e10:	11c00015 	stw	r7,0(r2)
    7e14:	84000044 	addi	r16,r16,1
    7e18:	8c000415 	stw	r16,16(r17)
    7e1c:	8805883a 	mov	r2,r17
    7e20:	dfc00517 	ldw	ra,20(sp)
    7e24:	dcc00417 	ldw	r19,16(sp)
    7e28:	dc800317 	ldw	r18,12(sp)
    7e2c:	dc400217 	ldw	r17,8(sp)
    7e30:	dc000117 	ldw	r16,4(sp)
    7e34:	dec00604 	addi	sp,sp,24
    7e38:	f800283a 	ret
    7e3c:	89400117 	ldw	r5,4(r17)
    7e40:	9009883a 	mov	r4,r18
    7e44:	d9c00015 	stw	r7,0(sp)
    7e48:	29400044 	addi	r5,r5,1
    7e4c:	0007cb80 	call	7cb8 <_Balloc>
    7e50:	89800417 	ldw	r6,16(r17)
    7e54:	11000304 	addi	r4,r2,12
    7e58:	89400304 	addi	r5,r17,12
    7e5c:	31800084 	addi	r6,r6,2
    7e60:	318d883a 	add	r6,r6,r6
    7e64:	318d883a 	add	r6,r6,r6
    7e68:	1027883a 	mov	r19,r2
    7e6c:	00079000 	call	7900 <memcpy>
    7e70:	d9c00017 	ldw	r7,0(sp)
    7e74:	88000a26 	beq	r17,zero,7ea0 <__multadd+0x118>
    7e78:	89000117 	ldw	r4,4(r17)
    7e7c:	90c01317 	ldw	r3,76(r18)
    7e80:	2109883a 	add	r4,r4,r4
    7e84:	2109883a 	add	r4,r4,r4
    7e88:	1907883a 	add	r3,r3,r4
    7e8c:	18800017 	ldw	r2,0(r3)
    7e90:	88800015 	stw	r2,0(r17)
    7e94:	1c400015 	stw	r17,0(r3)
    7e98:	9823883a 	mov	r17,r19
    7e9c:	003fd806 	br	7e00 <__multadd+0x78>
    7ea0:	9823883a 	mov	r17,r19
    7ea4:	003fd606 	br	7e00 <__multadd+0x78>

00007ea8 <__s2b>:
    7ea8:	defff904 	addi	sp,sp,-28
    7eac:	dc400115 	stw	r17,4(sp)
    7eb0:	dc000015 	stw	r16,0(sp)
    7eb4:	2023883a 	mov	r17,r4
    7eb8:	2821883a 	mov	r16,r5
    7ebc:	39000204 	addi	r4,r7,8
    7ec0:	01400244 	movi	r5,9
    7ec4:	dcc00315 	stw	r19,12(sp)
    7ec8:	dc800215 	stw	r18,8(sp)
    7ecc:	dfc00615 	stw	ra,24(sp)
    7ed0:	dd400515 	stw	r21,20(sp)
    7ed4:	dd000415 	stw	r20,16(sp)
    7ed8:	3825883a 	mov	r18,r7
    7edc:	3027883a 	mov	r19,r6
    7ee0:	0001fa40 	call	1fa4 <__divsi3>
    7ee4:	00c00044 	movi	r3,1
    7ee8:	000b883a 	mov	r5,zero
    7eec:	1880030e 	bge	r3,r2,7efc <__s2b+0x54>
    7ef0:	18c7883a 	add	r3,r3,r3
    7ef4:	29400044 	addi	r5,r5,1
    7ef8:	18bffd16 	blt	r3,r2,7ef0 <__s2b+0x48>
    7efc:	8809883a 	mov	r4,r17
    7f00:	0007cb80 	call	7cb8 <_Balloc>
    7f04:	d8c00717 	ldw	r3,28(sp)
    7f08:	10c00515 	stw	r3,20(r2)
    7f0c:	00c00044 	movi	r3,1
    7f10:	10c00415 	stw	r3,16(r2)
    7f14:	00c00244 	movi	r3,9
    7f18:	1cc0210e 	bge	r3,r19,7fa0 <__s2b+0xf8>
    7f1c:	80eb883a 	add	r21,r16,r3
    7f20:	a829883a 	mov	r20,r21
    7f24:	84e1883a 	add	r16,r16,r19
    7f28:	a1c00007 	ldb	r7,0(r20)
    7f2c:	8809883a 	mov	r4,r17
    7f30:	a5000044 	addi	r20,r20,1
    7f34:	100b883a 	mov	r5,r2
    7f38:	01800284 	movi	r6,10
    7f3c:	39fff404 	addi	r7,r7,-48
    7f40:	0007d880 	call	7d88 <__multadd>
    7f44:	a43ff81e 	bne	r20,r16,7f28 <__s2b+0x80>
    7f48:	ace1883a 	add	r16,r21,r19
    7f4c:	843ffe04 	addi	r16,r16,-8
    7f50:	9c800a0e 	bge	r19,r18,7f7c <__s2b+0xd4>
    7f54:	94e5c83a 	sub	r18,r18,r19
    7f58:	84a5883a 	add	r18,r16,r18
    7f5c:	81c00007 	ldb	r7,0(r16)
    7f60:	8809883a 	mov	r4,r17
    7f64:	84000044 	addi	r16,r16,1
    7f68:	100b883a 	mov	r5,r2
    7f6c:	01800284 	movi	r6,10
    7f70:	39fff404 	addi	r7,r7,-48
    7f74:	0007d880 	call	7d88 <__multadd>
    7f78:	84bff81e 	bne	r16,r18,7f5c <__s2b+0xb4>
    7f7c:	dfc00617 	ldw	ra,24(sp)
    7f80:	dd400517 	ldw	r21,20(sp)
    7f84:	dd000417 	ldw	r20,16(sp)
    7f88:	dcc00317 	ldw	r19,12(sp)
    7f8c:	dc800217 	ldw	r18,8(sp)
    7f90:	dc400117 	ldw	r17,4(sp)
    7f94:	dc000017 	ldw	r16,0(sp)
    7f98:	dec00704 	addi	sp,sp,28
    7f9c:	f800283a 	ret
    7fa0:	84000284 	addi	r16,r16,10
    7fa4:	1827883a 	mov	r19,r3
    7fa8:	003fe906 	br	7f50 <__s2b+0xa8>

00007fac <__hi0bits>:
    7fac:	20bfffec 	andhi	r2,r4,65535
    7fb0:	1000141e 	bne	r2,zero,8004 <__hi0bits+0x58>
    7fb4:	2008943a 	slli	r4,r4,16
    7fb8:	00800404 	movi	r2,16
    7fbc:	20ffc02c 	andhi	r3,r4,65280
    7fc0:	1800021e 	bne	r3,zero,7fcc <__hi0bits+0x20>
    7fc4:	2008923a 	slli	r4,r4,8
    7fc8:	10800204 	addi	r2,r2,8
    7fcc:	20fc002c 	andhi	r3,r4,61440
    7fd0:	1800021e 	bne	r3,zero,7fdc <__hi0bits+0x30>
    7fd4:	2008913a 	slli	r4,r4,4
    7fd8:	10800104 	addi	r2,r2,4
    7fdc:	20f0002c 	andhi	r3,r4,49152
    7fe0:	1800031e 	bne	r3,zero,7ff0 <__hi0bits+0x44>
    7fe4:	2109883a 	add	r4,r4,r4
    7fe8:	10800084 	addi	r2,r2,2
    7fec:	2109883a 	add	r4,r4,r4
    7ff0:	20000316 	blt	r4,zero,8000 <__hi0bits+0x54>
    7ff4:	2110002c 	andhi	r4,r4,16384
    7ff8:	2000041e 	bne	r4,zero,800c <__hi0bits+0x60>
    7ffc:	00800804 	movi	r2,32
    8000:	f800283a 	ret
    8004:	0005883a 	mov	r2,zero
    8008:	003fec06 	br	7fbc <__hi0bits+0x10>
    800c:	10800044 	addi	r2,r2,1
    8010:	f800283a 	ret

00008014 <__lo0bits>:
    8014:	20c00017 	ldw	r3,0(r4)
    8018:	188001cc 	andi	r2,r3,7
    801c:	10000826 	beq	r2,zero,8040 <__lo0bits+0x2c>
    8020:	1880004c 	andi	r2,r3,1
    8024:	1000211e 	bne	r2,zero,80ac <__lo0bits+0x98>
    8028:	1880008c 	andi	r2,r3,2
    802c:	1000211e 	bne	r2,zero,80b4 <__lo0bits+0xa0>
    8030:	1806d0ba 	srli	r3,r3,2
    8034:	00800084 	movi	r2,2
    8038:	20c00015 	stw	r3,0(r4)
    803c:	f800283a 	ret
    8040:	18bfffcc 	andi	r2,r3,65535
    8044:	10001326 	beq	r2,zero,8094 <__lo0bits+0x80>
    8048:	0005883a 	mov	r2,zero
    804c:	19403fcc 	andi	r5,r3,255
    8050:	2800021e 	bne	r5,zero,805c <__lo0bits+0x48>
    8054:	1806d23a 	srli	r3,r3,8
    8058:	10800204 	addi	r2,r2,8
    805c:	194003cc 	andi	r5,r3,15
    8060:	2800021e 	bne	r5,zero,806c <__lo0bits+0x58>
    8064:	1806d13a 	srli	r3,r3,4
    8068:	10800104 	addi	r2,r2,4
    806c:	194000cc 	andi	r5,r3,3
    8070:	2800021e 	bne	r5,zero,807c <__lo0bits+0x68>
    8074:	1806d0ba 	srli	r3,r3,2
    8078:	10800084 	addi	r2,r2,2
    807c:	1940004c 	andi	r5,r3,1
    8080:	2800081e 	bne	r5,zero,80a4 <__lo0bits+0x90>
    8084:	1806d07a 	srli	r3,r3,1
    8088:	1800051e 	bne	r3,zero,80a0 <__lo0bits+0x8c>
    808c:	00800804 	movi	r2,32
    8090:	f800283a 	ret
    8094:	1806d43a 	srli	r3,r3,16
    8098:	00800404 	movi	r2,16
    809c:	003feb06 	br	804c <__lo0bits+0x38>
    80a0:	10800044 	addi	r2,r2,1
    80a4:	20c00015 	stw	r3,0(r4)
    80a8:	f800283a 	ret
    80ac:	0005883a 	mov	r2,zero
    80b0:	f800283a 	ret
    80b4:	1806d07a 	srli	r3,r3,1
    80b8:	00800044 	movi	r2,1
    80bc:	20c00015 	stw	r3,0(r4)
    80c0:	f800283a 	ret

000080c4 <__i2b>:
    80c4:	defffd04 	addi	sp,sp,-12
    80c8:	dc000015 	stw	r16,0(sp)
    80cc:	04000044 	movi	r16,1
    80d0:	dc400115 	stw	r17,4(sp)
    80d4:	2823883a 	mov	r17,r5
    80d8:	800b883a 	mov	r5,r16
    80dc:	dfc00215 	stw	ra,8(sp)
    80e0:	0007cb80 	call	7cb8 <_Balloc>
    80e4:	14400515 	stw	r17,20(r2)
    80e8:	14000415 	stw	r16,16(r2)
    80ec:	dfc00217 	ldw	ra,8(sp)
    80f0:	dc400117 	ldw	r17,4(sp)
    80f4:	dc000017 	ldw	r16,0(sp)
    80f8:	dec00304 	addi	sp,sp,12
    80fc:	f800283a 	ret

00008100 <__multiply>:
    8100:	defffa04 	addi	sp,sp,-24
    8104:	dcc00315 	stw	r19,12(sp)
    8108:	dc800215 	stw	r18,8(sp)
    810c:	2cc00417 	ldw	r19,16(r5)
    8110:	34800417 	ldw	r18,16(r6)
    8114:	dd000415 	stw	r20,16(sp)
    8118:	dc400115 	stw	r17,4(sp)
    811c:	dfc00515 	stw	ra,20(sp)
    8120:	dc000015 	stw	r16,0(sp)
    8124:	2829883a 	mov	r20,r5
    8128:	3023883a 	mov	r17,r6
    812c:	9c807016 	blt	r19,r18,82f0 <__multiply+0x1f0>
    8130:	9005883a 	mov	r2,r18
    8134:	9825883a 	mov	r18,r19
    8138:	1027883a 	mov	r19,r2
    813c:	a0800217 	ldw	r2,8(r20)
    8140:	94e1883a 	add	r16,r18,r19
    8144:	a1400117 	ldw	r5,4(r20)
    8148:	1400010e 	bge	r2,r16,8150 <__multiply+0x50>
    814c:	29400044 	addi	r5,r5,1
    8150:	0007cb80 	call	7cb8 <_Balloc>
    8154:	8417883a 	add	r11,r16,r16
    8158:	13000504 	addi	r12,r2,20
    815c:	5ad7883a 	add	r11,r11,r11
    8160:	62d7883a 	add	r11,r12,r11
    8164:	6007883a 	mov	r3,r12
    8168:	62c0032e 	bgeu	r12,r11,8178 <__multiply+0x78>
    816c:	18000015 	stw	zero,0(r3)
    8170:	18c00104 	addi	r3,r3,4
    8174:	1afffd36 	bltu	r3,r11,816c <__multiply+0x6c>
    8178:	9ce7883a 	add	r19,r19,r19
    817c:	94a5883a 	add	r18,r18,r18
    8180:	89800504 	addi	r6,r17,20
    8184:	9ce7883a 	add	r19,r19,r19
    8188:	a3800504 	addi	r14,r20,20
    818c:	94a5883a 	add	r18,r18,r18
    8190:	34db883a 	add	r13,r6,r19
    8194:	7495883a 	add	r10,r14,r18
    8198:	3340422e 	bgeu	r6,r13,82a4 <__multiply+0x1a4>
    819c:	34400017 	ldw	r17,0(r6)
    81a0:	8cbfffcc 	andi	r18,r17,65535
    81a4:	90001b26 	beq	r18,zero,8214 <__multiply+0x114>
    81a8:	6013883a 	mov	r9,r12
    81ac:	7023883a 	mov	r17,r14
    81b0:	0011883a 	mov	r8,zero
    81b4:	88c00017 	ldw	r3,0(r17)
    81b8:	4bc00017 	ldw	r15,0(r9)
    81bc:	8c400104 	addi	r17,r17,4
    81c0:	19ffffcc 	andi	r7,r3,65535
    81c4:	3c8f383a 	mul	r7,r7,r18
    81c8:	1808d43a 	srli	r4,r3,16
    81cc:	797fffcc 	andi	r5,r15,65535
    81d0:	29cb883a 	add	r5,r5,r7
    81d4:	2a0b883a 	add	r5,r5,r8
    81d8:	2489383a 	mul	r4,r4,r18
    81dc:	7806d43a 	srli	r3,r15,16
    81e0:	2810d43a 	srli	r8,r5,16
    81e4:	297fffcc 	andi	r5,r5,65535
    81e8:	1907883a 	add	r3,r3,r4
    81ec:	1a07883a 	add	r3,r3,r8
    81f0:	1808943a 	slli	r4,r3,16
    81f4:	480f883a 	mov	r7,r9
    81f8:	1810d43a 	srli	r8,r3,16
    81fc:	214ab03a 	or	r5,r4,r5
    8200:	49400015 	stw	r5,0(r9)
    8204:	4a400104 	addi	r9,r9,4
    8208:	8abfea36 	bltu	r17,r10,81b4 <__multiply+0xb4>
    820c:	3a000115 	stw	r8,4(r7)
    8210:	34400017 	ldw	r17,0(r6)
    8214:	8822d43a 	srli	r17,r17,16
    8218:	88001f26 	beq	r17,zero,8298 <__multiply+0x198>
    821c:	60c00017 	ldw	r3,0(r12)
    8220:	7013883a 	mov	r9,r14
    8224:	601f883a 	mov	r15,r12
    8228:	1811883a 	mov	r8,r3
    822c:	6027883a 	mov	r19,r12
    8230:	000f883a 	mov	r7,zero
    8234:	00000106 	br	823c <__multiply+0x13c>
    8238:	9027883a 	mov	r19,r18
    823c:	4940000b 	ldhu	r5,0(r9)
    8240:	4010d43a 	srli	r8,r8,16
    8244:	193fffcc 	andi	r4,r3,65535
    8248:	2c4b383a 	mul	r5,r5,r17
    824c:	7bc00104 	addi	r15,r15,4
    8250:	4a400104 	addi	r9,r9,4
    8254:	2a0b883a 	add	r5,r5,r8
    8258:	29cb883a 	add	r5,r5,r7
    825c:	2806943a 	slli	r3,r5,16
    8260:	9c800104 	addi	r18,r19,4
    8264:	280ad43a 	srli	r5,r5,16
    8268:	1908b03a 	or	r4,r3,r4
    826c:	793fff15 	stw	r4,-4(r15)
    8270:	48ffff17 	ldw	r3,-4(r9)
    8274:	92000017 	ldw	r8,0(r18)
    8278:	1806d43a 	srli	r3,r3,16
    827c:	413fffcc 	andi	r4,r8,65535
    8280:	1c47383a 	mul	r3,r3,r17
    8284:	1907883a 	add	r3,r3,r4
    8288:	1947883a 	add	r3,r3,r5
    828c:	180ed43a 	srli	r7,r3,16
    8290:	4abfe936 	bltu	r9,r10,8238 <__multiply+0x138>
    8294:	98c00115 	stw	r3,4(r19)
    8298:	31800104 	addi	r6,r6,4
    829c:	63000104 	addi	r12,r12,4
    82a0:	337fbe36 	bltu	r6,r13,819c <__multiply+0x9c>
    82a4:	0400090e 	bge	zero,r16,82cc <__multiply+0x1cc>
    82a8:	58ffff17 	ldw	r3,-4(r11)
    82ac:	5affff04 	addi	r11,r11,-4
    82b0:	18000326 	beq	r3,zero,82c0 <__multiply+0x1c0>
    82b4:	00000506 	br	82cc <__multiply+0x1cc>
    82b8:	58c00017 	ldw	r3,0(r11)
    82bc:	1800031e 	bne	r3,zero,82cc <__multiply+0x1cc>
    82c0:	843fffc4 	addi	r16,r16,-1
    82c4:	5affff04 	addi	r11,r11,-4
    82c8:	803ffb1e 	bne	r16,zero,82b8 <__multiply+0x1b8>
    82cc:	14000415 	stw	r16,16(r2)
    82d0:	dfc00517 	ldw	ra,20(sp)
    82d4:	dd000417 	ldw	r20,16(sp)
    82d8:	dcc00317 	ldw	r19,12(sp)
    82dc:	dc800217 	ldw	r18,8(sp)
    82e0:	dc400117 	ldw	r17,4(sp)
    82e4:	dc000017 	ldw	r16,0(sp)
    82e8:	dec00604 	addi	sp,sp,24
    82ec:	f800283a 	ret
    82f0:	3029883a 	mov	r20,r6
    82f4:	2823883a 	mov	r17,r5
    82f8:	003f9006 	br	813c <__multiply+0x3c>

000082fc <__pow5mult>:
    82fc:	defffa04 	addi	sp,sp,-24
    8300:	dcc00315 	stw	r19,12(sp)
    8304:	dc800215 	stw	r18,8(sp)
    8308:	dc000015 	stw	r16,0(sp)
    830c:	dfc00515 	stw	ra,20(sp)
    8310:	dd000415 	stw	r20,16(sp)
    8314:	dc400115 	stw	r17,4(sp)
    8318:	308000cc 	andi	r2,r6,3
    831c:	3021883a 	mov	r16,r6
    8320:	2027883a 	mov	r19,r4
    8324:	2825883a 	mov	r18,r5
    8328:	10002e1e 	bne	r2,zero,83e4 <__pow5mult+0xe8>
    832c:	8021d0ba 	srai	r16,r16,2
    8330:	80001a26 	beq	r16,zero,839c <__pow5mult+0xa0>
    8334:	9c401217 	ldw	r17,72(r19)
    8338:	8800061e 	bne	r17,zero,8354 <__pow5mult+0x58>
    833c:	00003406 	br	8410 <__pow5mult+0x114>
    8340:	8021d07a 	srai	r16,r16,1
    8344:	80001526 	beq	r16,zero,839c <__pow5mult+0xa0>
    8348:	88800017 	ldw	r2,0(r17)
    834c:	10001c26 	beq	r2,zero,83c0 <__pow5mult+0xc4>
    8350:	1023883a 	mov	r17,r2
    8354:	80c0004c 	andi	r3,r16,1
    8358:	183ff926 	beq	r3,zero,8340 <__pow5mult+0x44>
    835c:	900b883a 	mov	r5,r18
    8360:	880d883a 	mov	r6,r17
    8364:	9809883a 	mov	r4,r19
    8368:	00081000 	call	8100 <__multiply>
    836c:	90001b26 	beq	r18,zero,83dc <__pow5mult+0xe0>
    8370:	91c00117 	ldw	r7,4(r18)
    8374:	98c01317 	ldw	r3,76(r19)
    8378:	8021d07a 	srai	r16,r16,1
    837c:	39cf883a 	add	r7,r7,r7
    8380:	39cf883a 	add	r7,r7,r7
    8384:	19c7883a 	add	r3,r3,r7
    8388:	19000017 	ldw	r4,0(r3)
    838c:	91000015 	stw	r4,0(r18)
    8390:	1c800015 	stw	r18,0(r3)
    8394:	1025883a 	mov	r18,r2
    8398:	803feb1e 	bne	r16,zero,8348 <__pow5mult+0x4c>
    839c:	9005883a 	mov	r2,r18
    83a0:	dfc00517 	ldw	ra,20(sp)
    83a4:	dd000417 	ldw	r20,16(sp)
    83a8:	dcc00317 	ldw	r19,12(sp)
    83ac:	dc800217 	ldw	r18,8(sp)
    83b0:	dc400117 	ldw	r17,4(sp)
    83b4:	dc000017 	ldw	r16,0(sp)
    83b8:	dec00604 	addi	sp,sp,24
    83bc:	f800283a 	ret
    83c0:	9809883a 	mov	r4,r19
    83c4:	880b883a 	mov	r5,r17
    83c8:	880d883a 	mov	r6,r17
    83cc:	00081000 	call	8100 <__multiply>
    83d0:	88800015 	stw	r2,0(r17)
    83d4:	10000015 	stw	zero,0(r2)
    83d8:	003fdd06 	br	8350 <__pow5mult+0x54>
    83dc:	1025883a 	mov	r18,r2
    83e0:	003fd706 	br	8340 <__pow5mult+0x44>
    83e4:	10bfffc4 	addi	r2,r2,-1
    83e8:	1085883a 	add	r2,r2,r2
    83ec:	00c00074 	movhi	r3,1
    83f0:	18c48704 	addi	r3,r3,4636
    83f4:	1085883a 	add	r2,r2,r2
    83f8:	1885883a 	add	r2,r3,r2
    83fc:	11800017 	ldw	r6,0(r2)
    8400:	000f883a 	mov	r7,zero
    8404:	0007d880 	call	7d88 <__multadd>
    8408:	1025883a 	mov	r18,r2
    840c:	003fc706 	br	832c <__pow5mult+0x30>
    8410:	05000044 	movi	r20,1
    8414:	9809883a 	mov	r4,r19
    8418:	a00b883a 	mov	r5,r20
    841c:	0007cb80 	call	7cb8 <_Balloc>
    8420:	1023883a 	mov	r17,r2
    8424:	00809c44 	movi	r2,625
    8428:	88800515 	stw	r2,20(r17)
    842c:	8d000415 	stw	r20,16(r17)
    8430:	9c401215 	stw	r17,72(r19)
    8434:	88000015 	stw	zero,0(r17)
    8438:	003fc606 	br	8354 <__pow5mult+0x58>

0000843c <__lshift>:
    843c:	defff904 	addi	sp,sp,-28
    8440:	dd000415 	stw	r20,16(sp)
    8444:	dcc00315 	stw	r19,12(sp)
    8448:	3029d17a 	srai	r20,r6,5
    844c:	2cc00417 	ldw	r19,16(r5)
    8450:	28800217 	ldw	r2,8(r5)
    8454:	dd400515 	stw	r21,20(sp)
    8458:	a4e7883a 	add	r19,r20,r19
    845c:	dc800215 	stw	r18,8(sp)
    8460:	dc400115 	stw	r17,4(sp)
    8464:	dc000015 	stw	r16,0(sp)
    8468:	dfc00615 	stw	ra,24(sp)
    846c:	9c000044 	addi	r16,r19,1
    8470:	2823883a 	mov	r17,r5
    8474:	302b883a 	mov	r21,r6
    8478:	2025883a 	mov	r18,r4
    847c:	29400117 	ldw	r5,4(r5)
    8480:	1400030e 	bge	r2,r16,8490 <__lshift+0x54>
    8484:	1085883a 	add	r2,r2,r2
    8488:	29400044 	addi	r5,r5,1
    848c:	143ffd16 	blt	r2,r16,8484 <__lshift+0x48>
    8490:	9009883a 	mov	r4,r18
    8494:	0007cb80 	call	7cb8 <_Balloc>
    8498:	11c00504 	addi	r7,r2,20
    849c:	0500090e 	bge	zero,r20,84c4 <__lshift+0x88>
    84a0:	3811883a 	mov	r8,r7
    84a4:	0007883a 	mov	r3,zero
    84a8:	40000015 	stw	zero,0(r8)
    84ac:	18c00044 	addi	r3,r3,1
    84b0:	42000104 	addi	r8,r8,4
    84b4:	1d3ffc1e 	bne	r3,r20,84a8 <__lshift+0x6c>
    84b8:	18c7883a 	add	r3,r3,r3
    84bc:	18c7883a 	add	r3,r3,r3
    84c0:	38cf883a 	add	r7,r7,r3
    84c4:	89000417 	ldw	r4,16(r17)
    84c8:	88c00504 	addi	r3,r17,20
    84cc:	a98007cc 	andi	r6,r21,31
    84d0:	2109883a 	add	r4,r4,r4
    84d4:	2109883a 	add	r4,r4,r4
    84d8:	1909883a 	add	r4,r3,r4
    84dc:	30002326 	beq	r6,zero,856c <__lshift+0x130>
    84e0:	01400804 	movi	r5,32
    84e4:	298bc83a 	sub	r5,r5,r6
    84e8:	0013883a 	mov	r9,zero
    84ec:	1a000017 	ldw	r8,0(r3)
    84f0:	3815883a 	mov	r10,r7
    84f4:	39c00104 	addi	r7,r7,4
    84f8:	4190983a 	sll	r8,r8,r6
    84fc:	18c00104 	addi	r3,r3,4
    8500:	4a10b03a 	or	r8,r9,r8
    8504:	3a3fff15 	stw	r8,-4(r7)
    8508:	1a3fff17 	ldw	r8,-4(r3)
    850c:	4152d83a 	srl	r9,r8,r5
    8510:	193ff636 	bltu	r3,r4,84ec <__lshift+0xb0>
    8514:	52400115 	stw	r9,4(r10)
    8518:	48001a1e 	bne	r9,zero,8584 <__lshift+0x148>
    851c:	843fffc4 	addi	r16,r16,-1
    8520:	14000415 	stw	r16,16(r2)
    8524:	88000826 	beq	r17,zero,8548 <__lshift+0x10c>
    8528:	89000117 	ldw	r4,4(r17)
    852c:	90c01317 	ldw	r3,76(r18)
    8530:	2109883a 	add	r4,r4,r4
    8534:	2109883a 	add	r4,r4,r4
    8538:	1907883a 	add	r3,r3,r4
    853c:	19000017 	ldw	r4,0(r3)
    8540:	89000015 	stw	r4,0(r17)
    8544:	1c400015 	stw	r17,0(r3)
    8548:	dfc00617 	ldw	ra,24(sp)
    854c:	dd400517 	ldw	r21,20(sp)
    8550:	dd000417 	ldw	r20,16(sp)
    8554:	dcc00317 	ldw	r19,12(sp)
    8558:	dc800217 	ldw	r18,8(sp)
    855c:	dc400117 	ldw	r17,4(sp)
    8560:	dc000017 	ldw	r16,0(sp)
    8564:	dec00704 	addi	sp,sp,28
    8568:	f800283a 	ret
    856c:	19400017 	ldw	r5,0(r3)
    8570:	39c00104 	addi	r7,r7,4
    8574:	18c00104 	addi	r3,r3,4
    8578:	397fff15 	stw	r5,-4(r7)
    857c:	193ffb36 	bltu	r3,r4,856c <__lshift+0x130>
    8580:	003fe606 	br	851c <__lshift+0xe0>
    8584:	9c000084 	addi	r16,r19,2
    8588:	003fe406 	br	851c <__lshift+0xe0>

0000858c <__mcmp>:
    858c:	20800417 	ldw	r2,16(r4)
    8590:	28c00417 	ldw	r3,16(r5)
    8594:	10c5c83a 	sub	r2,r2,r3
    8598:	1000111e 	bne	r2,zero,85e0 <__mcmp+0x54>
    859c:	18c7883a 	add	r3,r3,r3
    85a0:	18c7883a 	add	r3,r3,r3
    85a4:	21000504 	addi	r4,r4,20
    85a8:	29400504 	addi	r5,r5,20
    85ac:	20c5883a 	add	r2,r4,r3
    85b0:	28cb883a 	add	r5,r5,r3
    85b4:	00000106 	br	85bc <__mcmp+0x30>
    85b8:	20800a2e 	bgeu	r4,r2,85e4 <__mcmp+0x58>
    85bc:	10bfff04 	addi	r2,r2,-4
    85c0:	297fff04 	addi	r5,r5,-4
    85c4:	11800017 	ldw	r6,0(r2)
    85c8:	28c00017 	ldw	r3,0(r5)
    85cc:	30fffa26 	beq	r6,r3,85b8 <__mcmp+0x2c>
    85d0:	30c00236 	bltu	r6,r3,85dc <__mcmp+0x50>
    85d4:	00800044 	movi	r2,1
    85d8:	f800283a 	ret
    85dc:	00bfffc4 	movi	r2,-1
    85e0:	f800283a 	ret
    85e4:	0005883a 	mov	r2,zero
    85e8:	f800283a 	ret

000085ec <__mdiff>:
    85ec:	defffb04 	addi	sp,sp,-20
    85f0:	dc000015 	stw	r16,0(sp)
    85f4:	2821883a 	mov	r16,r5
    85f8:	dcc00315 	stw	r19,12(sp)
    85fc:	300b883a 	mov	r5,r6
    8600:	2027883a 	mov	r19,r4
    8604:	8009883a 	mov	r4,r16
    8608:	dc800215 	stw	r18,8(sp)
    860c:	dfc00415 	stw	ra,16(sp)
    8610:	dc400115 	stw	r17,4(sp)
    8614:	3025883a 	mov	r18,r6
    8618:	000858c0 	call	858c <__mcmp>
    861c:	10005226 	beq	r2,zero,8768 <__mdiff+0x17c>
    8620:	10004c16 	blt	r2,zero,8754 <__mdiff+0x168>
    8624:	0023883a 	mov	r17,zero
    8628:	81400117 	ldw	r5,4(r16)
    862c:	9809883a 	mov	r4,r19
    8630:	0007cb80 	call	7cb8 <_Balloc>
    8634:	83400417 	ldw	r13,16(r16)
    8638:	93800417 	ldw	r14,16(r18)
    863c:	81000504 	addi	r4,r16,20
    8640:	6b59883a 	add	r12,r13,r13
    8644:	739d883a 	add	r14,r14,r14
    8648:	6319883a 	add	r12,r12,r12
    864c:	91800504 	addi	r6,r18,20
    8650:	739d883a 	add	r14,r14,r14
    8654:	14400315 	stw	r17,12(r2)
    8658:	2319883a 	add	r12,r4,r12
    865c:	339d883a 	add	r14,r6,r14
    8660:	12400504 	addi	r9,r2,20
    8664:	0007883a 	mov	r3,zero
    8668:	22000017 	ldw	r8,0(r4)
    866c:	32800017 	ldw	r10,0(r6)
    8670:	4ac00104 	addi	r11,r9,4
    8674:	41ffffcc 	andi	r7,r8,65535
    8678:	38c7883a 	add	r3,r7,r3
    867c:	51ffffcc 	andi	r7,r10,65535
    8680:	19cfc83a 	sub	r7,r3,r7
    8684:	4010d43a 	srli	r8,r8,16
    8688:	5014d43a 	srli	r10,r10,16
    868c:	3807d43a 	srai	r3,r7,16
    8690:	39ffffcc 	andi	r7,r7,65535
    8694:	4291c83a 	sub	r8,r8,r10
    8698:	40c7883a 	add	r3,r8,r3
    869c:	1810943a 	slli	r8,r3,16
    86a0:	31800104 	addi	r6,r6,4
    86a4:	21000104 	addi	r4,r4,4
    86a8:	41ceb03a 	or	r7,r8,r7
    86ac:	49c00015 	stw	r7,0(r9)
    86b0:	1807d43a 	srai	r3,r3,16
    86b4:	580b883a 	mov	r5,r11
    86b8:	5813883a 	mov	r9,r11
    86bc:	33bfea36 	bltu	r6,r14,8668 <__mdiff+0x7c>
    86c0:	2011883a 	mov	r8,r4
    86c4:	2300152e 	bgeu	r4,r12,871c <__mdiff+0x130>
    86c8:	21400017 	ldw	r5,0(r4)
    86cc:	4a400104 	addi	r9,r9,4
    86d0:	21000104 	addi	r4,r4,4
    86d4:	29ffffcc 	andi	r7,r5,65535
    86d8:	38c7883a 	add	r3,r7,r3
    86dc:	280ad43a 	srli	r5,r5,16
    86e0:	180dd43a 	srai	r6,r3,16
    86e4:	19ffffcc 	andi	r7,r3,65535
    86e8:	3147883a 	add	r3,r6,r5
    86ec:	180a943a 	slli	r5,r3,16
    86f0:	1807d43a 	srai	r3,r3,16
    86f4:	29ceb03a 	or	r7,r5,r7
    86f8:	49ffff15 	stw	r7,-4(r9)
    86fc:	233ff236 	bltu	r4,r12,86c8 <__mdiff+0xdc>
    8700:	0206303a 	nor	r3,zero,r8
    8704:	1b07883a 	add	r3,r3,r12
    8708:	1806d0ba 	srli	r3,r3,2
    870c:	18c00044 	addi	r3,r3,1
    8710:	18c7883a 	add	r3,r3,r3
    8714:	18c7883a 	add	r3,r3,r3
    8718:	58cb883a 	add	r5,r11,r3
    871c:	28ffff04 	addi	r3,r5,-4
    8720:	3800041e 	bne	r7,zero,8734 <__mdiff+0x148>
    8724:	18ffff04 	addi	r3,r3,-4
    8728:	19000017 	ldw	r4,0(r3)
    872c:	6b7fffc4 	addi	r13,r13,-1
    8730:	203ffc26 	beq	r4,zero,8724 <__mdiff+0x138>
    8734:	13400415 	stw	r13,16(r2)
    8738:	dfc00417 	ldw	ra,16(sp)
    873c:	dcc00317 	ldw	r19,12(sp)
    8740:	dc800217 	ldw	r18,8(sp)
    8744:	dc400117 	ldw	r17,4(sp)
    8748:	dc000017 	ldw	r16,0(sp)
    874c:	dec00504 	addi	sp,sp,20
    8750:	f800283a 	ret
    8754:	8005883a 	mov	r2,r16
    8758:	04400044 	movi	r17,1
    875c:	9021883a 	mov	r16,r18
    8760:	1025883a 	mov	r18,r2
    8764:	003fb006 	br	8628 <__mdiff+0x3c>
    8768:	9809883a 	mov	r4,r19
    876c:	000b883a 	mov	r5,zero
    8770:	0007cb80 	call	7cb8 <_Balloc>
    8774:	00c00044 	movi	r3,1
    8778:	10c00415 	stw	r3,16(r2)
    877c:	10000515 	stw	zero,20(r2)
    8780:	003fed06 	br	8738 <__mdiff+0x14c>

00008784 <__ulp>:
    8784:	295ffc2c 	andhi	r5,r5,32752
    8788:	00bf3034 	movhi	r2,64704
    878c:	2887883a 	add	r3,r5,r2
    8790:	00c0020e 	bge	zero,r3,879c <__ulp+0x18>
    8794:	0005883a 	mov	r2,zero
    8798:	f800283a 	ret
    879c:	00c7c83a 	sub	r3,zero,r3
    87a0:	180bd53a 	srai	r5,r3,20
    87a4:	008004c4 	movi	r2,19
    87a8:	11400a0e 	bge	r2,r5,87d4 <__ulp+0x50>
    87ac:	00800c84 	movi	r2,50
    87b0:	0007883a 	mov	r3,zero
    87b4:	11400516 	blt	r2,r5,87cc <__ulp+0x48>
    87b8:	00800cc4 	movi	r2,51
    87bc:	114bc83a 	sub	r5,r2,r5
    87c0:	00800044 	movi	r2,1
    87c4:	1144983a 	sll	r2,r2,r5
    87c8:	f800283a 	ret
    87cc:	00800044 	movi	r2,1
    87d0:	f800283a 	ret
    87d4:	00800234 	movhi	r2,8
    87d8:	1147d83a 	sra	r3,r2,r5
    87dc:	0005883a 	mov	r2,zero
    87e0:	f800283a 	ret

000087e4 <__b2d>:
    87e4:	defffa04 	addi	sp,sp,-24
    87e8:	dc000015 	stw	r16,0(sp)
    87ec:	24000417 	ldw	r16,16(r4)
    87f0:	dc400115 	stw	r17,4(sp)
    87f4:	24400504 	addi	r17,r4,20
    87f8:	8421883a 	add	r16,r16,r16
    87fc:	8421883a 	add	r16,r16,r16
    8800:	8c21883a 	add	r16,r17,r16
    8804:	dc800215 	stw	r18,8(sp)
    8808:	84bfff17 	ldw	r18,-4(r16)
    880c:	dd000415 	stw	r20,16(sp)
    8810:	dcc00315 	stw	r19,12(sp)
    8814:	9009883a 	mov	r4,r18
    8818:	2829883a 	mov	r20,r5
    881c:	dfc00515 	stw	ra,20(sp)
    8820:	0007fac0 	call	7fac <__hi0bits>
    8824:	00c00804 	movi	r3,32
    8828:	1887c83a 	sub	r3,r3,r2
    882c:	a0c00015 	stw	r3,0(r20)
    8830:	00c00284 	movi	r3,10
    8834:	84ffff04 	addi	r19,r16,-4
    8838:	18801216 	blt	r3,r2,8884 <__b2d+0xa0>
    883c:	014002c4 	movi	r5,11
    8840:	2889c83a 	sub	r4,r5,r2
    8844:	9106d83a 	srl	r3,r18,r4
    8848:	18cffc34 	orhi	r3,r3,16368
    884c:	8cc0282e 	bgeu	r17,r19,88f0 <__b2d+0x10c>
    8850:	817ffe17 	ldw	r5,-8(r16)
    8854:	290ad83a 	srl	r5,r5,r4
    8858:	10800544 	addi	r2,r2,21
    885c:	9084983a 	sll	r2,r18,r2
    8860:	2884b03a 	or	r2,r5,r2
    8864:	dfc00517 	ldw	ra,20(sp)
    8868:	dd000417 	ldw	r20,16(sp)
    886c:	dcc00317 	ldw	r19,12(sp)
    8870:	dc800217 	ldw	r18,8(sp)
    8874:	dc400117 	ldw	r17,4(sp)
    8878:	dc000017 	ldw	r16,0(sp)
    887c:	dec00604 	addi	sp,sp,24
    8880:	f800283a 	ret
    8884:	113ffd44 	addi	r4,r2,-11
    8888:	8cc00f2e 	bgeu	r17,r19,88c8 <__b2d+0xe4>
    888c:	81bffe04 	addi	r6,r16,-8
    8890:	817ffe17 	ldw	r5,-8(r16)
    8894:	20001326 	beq	r4,zero,88e4 <__b2d+0x100>
    8898:	00c00ac4 	movi	r3,43
    889c:	1885c83a 	sub	r2,r3,r2
    88a0:	2886d83a 	srl	r3,r5,r2
    88a4:	9124983a 	sll	r18,r18,r4
    88a8:	90e4b03a 	or	r18,r18,r3
    88ac:	90cffc34 	orhi	r3,r18,16368
    88b0:	8980112e 	bgeu	r17,r6,88f8 <__b2d+0x114>
    88b4:	81bffd17 	ldw	r6,-12(r16)
    88b8:	308cd83a 	srl	r6,r6,r2
    88bc:	2904983a 	sll	r2,r5,r4
    88c0:	1184b03a 	or	r2,r2,r6
    88c4:	003fe706 	br	8864 <__b2d+0x80>
    88c8:	20000526 	beq	r4,zero,88e0 <__b2d+0xfc>
    88cc:	9124983a 	sll	r18,r18,r4
    88d0:	000d883a 	mov	r6,zero
    88d4:	000b883a 	mov	r5,zero
    88d8:	90cffc34 	orhi	r3,r18,16368
    88dc:	003ff706 	br	88bc <__b2d+0xd8>
    88e0:	000b883a 	mov	r5,zero
    88e4:	90cffc34 	orhi	r3,r18,16368
    88e8:	2805883a 	mov	r2,r5
    88ec:	003fdd06 	br	8864 <__b2d+0x80>
    88f0:	000b883a 	mov	r5,zero
    88f4:	003fd806 	br	8858 <__b2d+0x74>
    88f8:	000d883a 	mov	r6,zero
    88fc:	003fef06 	br	88bc <__b2d+0xd8>

00008900 <__d2b>:
    8900:	defff704 	addi	sp,sp,-36
    8904:	dc000215 	stw	r16,8(sp)
    8908:	3021883a 	mov	r16,r6
    890c:	dc400315 	stw	r17,12(sp)
    8910:	8022907a 	slli	r17,r16,1
    8914:	dd400715 	stw	r21,28(sp)
    8918:	282b883a 	mov	r21,r5
    891c:	01400044 	movi	r5,1
    8920:	dd000615 	stw	r20,24(sp)
    8924:	dcc00515 	stw	r19,20(sp)
    8928:	dc800415 	stw	r18,16(sp)
    892c:	dfc00815 	stw	ra,32(sp)
    8930:	3829883a 	mov	r20,r7
    8934:	dc800917 	ldw	r18,36(sp)
    8938:	8822d57a 	srli	r17,r17,21
    893c:	0007cb80 	call	7cb8 <_Balloc>
    8940:	1027883a 	mov	r19,r2
    8944:	00800434 	movhi	r2,16
    8948:	10bfffc4 	addi	r2,r2,-1
    894c:	808c703a 	and	r6,r16,r2
    8950:	88000126 	beq	r17,zero,8958 <__d2b+0x58>
    8954:	31800434 	orhi	r6,r6,16
    8958:	d9800015 	stw	r6,0(sp)
    895c:	a8001f26 	beq	r21,zero,89dc <__d2b+0xdc>
    8960:	d9000104 	addi	r4,sp,4
    8964:	dd400115 	stw	r21,4(sp)
    8968:	00080140 	call	8014 <__lo0bits>
    896c:	d8c00017 	ldw	r3,0(sp)
    8970:	1000291e 	bne	r2,zero,8a18 <__d2b+0x118>
    8974:	d9000117 	ldw	r4,4(sp)
    8978:	99000515 	stw	r4,20(r19)
    897c:	1820c03a 	cmpne	r16,r3,zero
    8980:	84000044 	addi	r16,r16,1
    8984:	98c00615 	stw	r3,24(r19)
    8988:	9c000415 	stw	r16,16(r19)
    898c:	88001b1e 	bne	r17,zero,89fc <__d2b+0xfc>
    8990:	800690ba 	slli	r3,r16,2
    8994:	10bef384 	addi	r2,r2,-1074
    8998:	a0800015 	stw	r2,0(r20)
    899c:	98c5883a 	add	r2,r19,r3
    89a0:	11000417 	ldw	r4,16(r2)
    89a4:	8020917a 	slli	r16,r16,5
    89a8:	0007fac0 	call	7fac <__hi0bits>
    89ac:	8085c83a 	sub	r2,r16,r2
    89b0:	90800015 	stw	r2,0(r18)
    89b4:	9805883a 	mov	r2,r19
    89b8:	dfc00817 	ldw	ra,32(sp)
    89bc:	dd400717 	ldw	r21,28(sp)
    89c0:	dd000617 	ldw	r20,24(sp)
    89c4:	dcc00517 	ldw	r19,20(sp)
    89c8:	dc800417 	ldw	r18,16(sp)
    89cc:	dc400317 	ldw	r17,12(sp)
    89d0:	dc000217 	ldw	r16,8(sp)
    89d4:	dec00904 	addi	sp,sp,36
    89d8:	f800283a 	ret
    89dc:	d809883a 	mov	r4,sp
    89e0:	00080140 	call	8014 <__lo0bits>
    89e4:	d8c00017 	ldw	r3,0(sp)
    89e8:	04000044 	movi	r16,1
    89ec:	9c000415 	stw	r16,16(r19)
    89f0:	98c00515 	stw	r3,20(r19)
    89f4:	10800804 	addi	r2,r2,32
    89f8:	883fe526 	beq	r17,zero,8990 <__d2b+0x90>
    89fc:	8c7ef344 	addi	r17,r17,-1075
    8a00:	88a3883a 	add	r17,r17,r2
    8a04:	00c00d44 	movi	r3,53
    8a08:	a4400015 	stw	r17,0(r20)
    8a0c:	1885c83a 	sub	r2,r3,r2
    8a10:	90800015 	stw	r2,0(r18)
    8a14:	003fe706 	br	89b4 <__d2b+0xb4>
    8a18:	01000804 	movi	r4,32
    8a1c:	2089c83a 	sub	r4,r4,r2
    8a20:	1908983a 	sll	r4,r3,r4
    8a24:	d9400117 	ldw	r5,4(sp)
    8a28:	1886d83a 	srl	r3,r3,r2
    8a2c:	2148b03a 	or	r4,r4,r5
    8a30:	99000515 	stw	r4,20(r19)
    8a34:	d8c00015 	stw	r3,0(sp)
    8a38:	003fd006 	br	897c <__d2b+0x7c>

00008a3c <__ratio>:
    8a3c:	defff904 	addi	sp,sp,-28
    8a40:	dc400315 	stw	r17,12(sp)
    8a44:	2823883a 	mov	r17,r5
    8a48:	d9400104 	addi	r5,sp,4
    8a4c:	dfc00615 	stw	ra,24(sp)
    8a50:	dcc00515 	stw	r19,20(sp)
    8a54:	dc800415 	stw	r18,16(sp)
    8a58:	2027883a 	mov	r19,r4
    8a5c:	dc000215 	stw	r16,8(sp)
    8a60:	00087e40 	call	87e4 <__b2d>
    8a64:	8809883a 	mov	r4,r17
    8a68:	d80b883a 	mov	r5,sp
    8a6c:	1025883a 	mov	r18,r2
    8a70:	1821883a 	mov	r16,r3
    8a74:	00087e40 	call	87e4 <__b2d>
    8a78:	8a400417 	ldw	r9,16(r17)
    8a7c:	9a000417 	ldw	r8,16(r19)
    8a80:	100d883a 	mov	r6,r2
    8a84:	d8800017 	ldw	r2,0(sp)
    8a88:	4251c83a 	sub	r8,r8,r9
    8a8c:	4012917a 	slli	r9,r8,5
    8a90:	da000117 	ldw	r8,4(sp)
    8a94:	4091c83a 	sub	r8,r8,r2
    8a98:	4251883a 	add	r8,r8,r9
    8a9c:	02000d0e 	bge	zero,r8,8ad4 <__ratio+0x98>
    8aa0:	4010953a 	slli	r8,r8,20
    8aa4:	4421883a 	add	r16,r8,r16
    8aa8:	9009883a 	mov	r4,r18
    8aac:	800b883a 	mov	r5,r16
    8ab0:	180f883a 	mov	r7,r3
    8ab4:	000c5bc0 	call	c5bc <__divdf3>
    8ab8:	dfc00617 	ldw	ra,24(sp)
    8abc:	dcc00517 	ldw	r19,20(sp)
    8ac0:	dc800417 	ldw	r18,16(sp)
    8ac4:	dc400317 	ldw	r17,12(sp)
    8ac8:	dc000217 	ldw	r16,8(sp)
    8acc:	dec00704 	addi	sp,sp,28
    8ad0:	f800283a 	ret
    8ad4:	4010953a 	slli	r8,r8,20
    8ad8:	1a07c83a 	sub	r3,r3,r8
    8adc:	003ff206 	br	8aa8 <__ratio+0x6c>

00008ae0 <_mprec_log10>:
    8ae0:	defffe04 	addi	sp,sp,-8
    8ae4:	dc000015 	stw	r16,0(sp)
    8ae8:	dfc00115 	stw	ra,4(sp)
    8aec:	008005c4 	movi	r2,23
    8af0:	2021883a 	mov	r16,r4
    8af4:	11000d0e 	bge	r2,r4,8b2c <_mprec_log10+0x4c>
    8af8:	0005883a 	mov	r2,zero
    8afc:	00cffc34 	movhi	r3,16368
    8b00:	843fffc4 	addi	r16,r16,-1
    8b04:	1009883a 	mov	r4,r2
    8b08:	180b883a 	mov	r5,r3
    8b0c:	000d883a 	mov	r6,zero
    8b10:	01d00934 	movhi	r7,16420
    8b14:	000d0cc0 	call	d0cc <__muldf3>
    8b18:	803ff91e 	bne	r16,zero,8b00 <_mprec_log10+0x20>
    8b1c:	dfc00117 	ldw	ra,4(sp)
    8b20:	dc000017 	ldw	r16,0(sp)
    8b24:	dec00204 	addi	sp,sp,8
    8b28:	f800283a 	ret
    8b2c:	202090fa 	slli	r16,r4,3
    8b30:	00800074 	movhi	r2,1
    8b34:	10849e04 	addi	r2,r2,4728
    8b38:	1421883a 	add	r16,r2,r16
    8b3c:	80800017 	ldw	r2,0(r16)
    8b40:	80c00117 	ldw	r3,4(r16)
    8b44:	dfc00117 	ldw	ra,4(sp)
    8b48:	dc000017 	ldw	r16,0(sp)
    8b4c:	dec00204 	addi	sp,sp,8
    8b50:	f800283a 	ret

00008b54 <__copybits>:
    8b54:	297fffc4 	addi	r5,r5,-1
    8b58:	280fd17a 	srai	r7,r5,5
    8b5c:	30c00417 	ldw	r3,16(r6)
    8b60:	30800504 	addi	r2,r6,20
    8b64:	39c00044 	addi	r7,r7,1
    8b68:	18c7883a 	add	r3,r3,r3
    8b6c:	39cf883a 	add	r7,r7,r7
    8b70:	18c7883a 	add	r3,r3,r3
    8b74:	39cf883a 	add	r7,r7,r7
    8b78:	10c7883a 	add	r3,r2,r3
    8b7c:	21cf883a 	add	r7,r4,r7
    8b80:	10c00d2e 	bgeu	r2,r3,8bb8 <__copybits+0x64>
    8b84:	200b883a 	mov	r5,r4
    8b88:	12000017 	ldw	r8,0(r2)
    8b8c:	29400104 	addi	r5,r5,4
    8b90:	10800104 	addi	r2,r2,4
    8b94:	2a3fff15 	stw	r8,-4(r5)
    8b98:	10fffb36 	bltu	r2,r3,8b88 <__copybits+0x34>
    8b9c:	1985c83a 	sub	r2,r3,r6
    8ba0:	10bffac4 	addi	r2,r2,-21
    8ba4:	1004d0ba 	srli	r2,r2,2
    8ba8:	10800044 	addi	r2,r2,1
    8bac:	1085883a 	add	r2,r2,r2
    8bb0:	1085883a 	add	r2,r2,r2
    8bb4:	2089883a 	add	r4,r4,r2
    8bb8:	21c0032e 	bgeu	r4,r7,8bc8 <__copybits+0x74>
    8bbc:	20000015 	stw	zero,0(r4)
    8bc0:	21000104 	addi	r4,r4,4
    8bc4:	21fffd36 	bltu	r4,r7,8bbc <__copybits+0x68>
    8bc8:	f800283a 	ret

00008bcc <__any_on>:
    8bcc:	20c00417 	ldw	r3,16(r4)
    8bd0:	2805d17a 	srai	r2,r5,5
    8bd4:	21000504 	addi	r4,r4,20
    8bd8:	18800d0e 	bge	r3,r2,8c10 <__any_on+0x44>
    8bdc:	18c7883a 	add	r3,r3,r3
    8be0:	18c7883a 	add	r3,r3,r3
    8be4:	20c7883a 	add	r3,r4,r3
    8be8:	20c0192e 	bgeu	r4,r3,8c50 <__any_on+0x84>
    8bec:	18bfff17 	ldw	r2,-4(r3)
    8bf0:	18ffff04 	addi	r3,r3,-4
    8bf4:	1000041e 	bne	r2,zero,8c08 <__any_on+0x3c>
    8bf8:	20c0142e 	bgeu	r4,r3,8c4c <__any_on+0x80>
    8bfc:	18ffff04 	addi	r3,r3,-4
    8c00:	19400017 	ldw	r5,0(r3)
    8c04:	283ffc26 	beq	r5,zero,8bf8 <__any_on+0x2c>
    8c08:	00800044 	movi	r2,1
    8c0c:	f800283a 	ret
    8c10:	10c00a0e 	bge	r2,r3,8c3c <__any_on+0x70>
    8c14:	1085883a 	add	r2,r2,r2
    8c18:	1085883a 	add	r2,r2,r2
    8c1c:	294007cc 	andi	r5,r5,31
    8c20:	2087883a 	add	r3,r4,r2
    8c24:	283ff026 	beq	r5,zero,8be8 <__any_on+0x1c>
    8c28:	19800017 	ldw	r6,0(r3)
    8c2c:	3144d83a 	srl	r2,r6,r5
    8c30:	114a983a 	sll	r5,r2,r5
    8c34:	29bff41e 	bne	r5,r6,8c08 <__any_on+0x3c>
    8c38:	003feb06 	br	8be8 <__any_on+0x1c>
    8c3c:	1085883a 	add	r2,r2,r2
    8c40:	1085883a 	add	r2,r2,r2
    8c44:	2087883a 	add	r3,r4,r2
    8c48:	003fe706 	br	8be8 <__any_on+0x1c>
    8c4c:	f800283a 	ret
    8c50:	0005883a 	mov	r2,zero
    8c54:	f800283a 	ret

00008c58 <_realloc_r>:
    8c58:	defff604 	addi	sp,sp,-40
    8c5c:	dd000415 	stw	r20,16(sp)
    8c60:	dc400115 	stw	r17,4(sp)
    8c64:	dfc00915 	stw	ra,36(sp)
    8c68:	df000815 	stw	fp,32(sp)
    8c6c:	ddc00715 	stw	r23,28(sp)
    8c70:	dd800615 	stw	r22,24(sp)
    8c74:	dd400515 	stw	r21,20(sp)
    8c78:	dcc00315 	stw	r19,12(sp)
    8c7c:	dc800215 	stw	r18,8(sp)
    8c80:	dc000015 	stw	r16,0(sp)
    8c84:	2829883a 	mov	r20,r5
    8c88:	3023883a 	mov	r17,r6
    8c8c:	2800ad26 	beq	r5,zero,8f44 <_realloc_r+0x2ec>
    8c90:	2025883a 	mov	r18,r4
    8c94:	000e8e00 	call	e8e0 <__malloc_lock>
    8c98:	a0ffff17 	ldw	r3,-4(r20)
    8c9c:	043fff04 	movi	r16,-4
    8ca0:	890002c4 	addi	r4,r17,11
    8ca4:	01c00584 	movi	r7,22
    8ca8:	a57ffe04 	addi	r21,r20,-8
    8cac:	1c20703a 	and	r16,r3,r16
    8cb0:	39001d2e 	bgeu	r7,r4,8d28 <_realloc_r+0xd0>
    8cb4:	05bffe04 	movi	r22,-8
    8cb8:	25ac703a 	and	r22,r4,r22
    8cbc:	b00f883a 	mov	r7,r22
    8cc0:	b0006516 	blt	r22,zero,8e58 <_realloc_r+0x200>
    8cc4:	b4406436 	bltu	r22,r17,8e58 <_realloc_r+0x200>
    8cc8:	81c01a0e 	bge	r16,r7,8d34 <_realloc_r+0xdc>
    8ccc:	07000074 	movhi	fp,1
    8cd0:	e7052304 	addi	fp,fp,5260
    8cd4:	e1400217 	ldw	r5,8(fp)
    8cd8:	ac11883a 	add	r8,r21,r16
    8cdc:	2a006226 	beq	r5,r8,8e68 <_realloc_r+0x210>
    8ce0:	41800117 	ldw	r6,4(r8)
    8ce4:	027fff84 	movi	r9,-2
    8ce8:	3252703a 	and	r9,r6,r9
    8cec:	4253883a 	add	r9,r8,r9
    8cf0:	49000117 	ldw	r4,4(r9)
    8cf4:	2100004c 	andi	r4,r4,1
    8cf8:	2000281e 	bne	r4,zero,8d9c <_realloc_r+0x144>
    8cfc:	00bfff04 	movi	r2,-4
    8d00:	3084703a 	and	r2,r6,r2
    8d04:	1409883a 	add	r4,r2,r16
    8d08:	21c05e16 	blt	r4,r7,8e84 <_realloc_r+0x22c>
    8d0c:	40800317 	ldw	r2,12(r8)
    8d10:	41400217 	ldw	r5,8(r8)
    8d14:	a023883a 	mov	r17,r20
    8d18:	2021883a 	mov	r16,r4
    8d1c:	28800315 	stw	r2,12(r5)
    8d20:	11400215 	stw	r5,8(r2)
    8d24:	00000406 	br	8d38 <_realloc_r+0xe0>
    8d28:	01c00404 	movi	r7,16
    8d2c:	382d883a 	mov	r22,r7
    8d30:	003fe406 	br	8cc4 <_realloc_r+0x6c>
    8d34:	a023883a 	mov	r17,r20
    8d38:	858fc83a 	sub	r7,r16,r22
    8d3c:	008003c4 	movi	r2,15
    8d40:	18c0004c 	andi	r3,r3,1
    8d44:	11c07236 	bltu	r2,r7,8f10 <_realloc_r+0x2b8>
    8d48:	1c06b03a 	or	r3,r3,r16
    8d4c:	a8c00115 	stw	r3,4(r21)
    8d50:	ac21883a 	add	r16,r21,r16
    8d54:	80800117 	ldw	r2,4(r16)
    8d58:	10800054 	ori	r2,r2,1
    8d5c:	80800115 	stw	r2,4(r16)
    8d60:	9009883a 	mov	r4,r18
    8d64:	000e9000 	call	e900 <__malloc_unlock>
    8d68:	8805883a 	mov	r2,r17
    8d6c:	dfc00917 	ldw	ra,36(sp)
    8d70:	df000817 	ldw	fp,32(sp)
    8d74:	ddc00717 	ldw	r23,28(sp)
    8d78:	dd800617 	ldw	r22,24(sp)
    8d7c:	dd400517 	ldw	r21,20(sp)
    8d80:	dd000417 	ldw	r20,16(sp)
    8d84:	dcc00317 	ldw	r19,12(sp)
    8d88:	dc800217 	ldw	r18,8(sp)
    8d8c:	dc400117 	ldw	r17,4(sp)
    8d90:	dc000017 	ldw	r16,0(sp)
    8d94:	dec00a04 	addi	sp,sp,40
    8d98:	f800283a 	ret
    8d9c:	18c0004c 	andi	r3,r3,1
    8da0:	1800081e 	bne	r3,zero,8dc4 <_realloc_r+0x16c>
    8da4:	a4fffe17 	ldw	r19,-8(r20)
    8da8:	00bfff04 	movi	r2,-4
    8dac:	ace7c83a 	sub	r19,r21,r19
    8db0:	98c00117 	ldw	r3,4(r19)
    8db4:	1886703a 	and	r3,r3,r2
    8db8:	98000226 	beq	r19,zero,8dc4 <_realloc_r+0x16c>
    8dbc:	1c2f883a 	add	r23,r3,r16
    8dc0:	b9c06d0e 	bge	r23,r7,8f78 <_realloc_r+0x320>
    8dc4:	880b883a 	mov	r5,r17
    8dc8:	9009883a 	mov	r4,r18
    8dcc:	000208c0 	call	208c <_malloc_r>
    8dd0:	1023883a 	mov	r17,r2
    8dd4:	1000ef26 	beq	r2,zero,9194 <_realloc_r+0x53c>
    8dd8:	a0ffff17 	ldw	r3,-4(r20)
    8ddc:	113ffe04 	addi	r4,r2,-8
    8de0:	00bfff84 	movi	r2,-2
    8de4:	1884703a 	and	r2,r3,r2
    8de8:	a885883a 	add	r2,r21,r2
    8dec:	2080bf26 	beq	r4,r2,90ec <_realloc_r+0x494>
    8df0:	81bfff04 	addi	r6,r16,-4
    8df4:	00800904 	movi	r2,36
    8df8:	11808936 	bltu	r2,r6,9020 <_realloc_r+0x3c8>
    8dfc:	00c004c4 	movi	r3,19
    8e00:	19806c2e 	bgeu	r3,r6,8fb4 <_realloc_r+0x35c>
    8e04:	a0c00017 	ldw	r3,0(r20)
    8e08:	88c00015 	stw	r3,0(r17)
    8e0c:	a0c00117 	ldw	r3,4(r20)
    8e10:	88c00115 	stw	r3,4(r17)
    8e14:	00c006c4 	movi	r3,27
    8e18:	1980ac36 	bltu	r3,r6,90cc <_realloc_r+0x474>
    8e1c:	88800204 	addi	r2,r17,8
    8e20:	a0c00204 	addi	r3,r20,8
    8e24:	19000017 	ldw	r4,0(r3)
    8e28:	11000015 	stw	r4,0(r2)
    8e2c:	19000117 	ldw	r4,4(r3)
    8e30:	11000115 	stw	r4,4(r2)
    8e34:	18c00217 	ldw	r3,8(r3)
    8e38:	10c00215 	stw	r3,8(r2)
    8e3c:	a00b883a 	mov	r5,r20
    8e40:	9009883a 	mov	r4,r18
    8e44:	0006c480 	call	6c48 <_free_r>
    8e48:	9009883a 	mov	r4,r18
    8e4c:	000e9000 	call	e900 <__malloc_unlock>
    8e50:	8805883a 	mov	r2,r17
    8e54:	003fc506 	br	8d6c <_realloc_r+0x114>
    8e58:	00800304 	movi	r2,12
    8e5c:	90800015 	stw	r2,0(r18)
    8e60:	0005883a 	mov	r2,zero
    8e64:	003fc106 	br	8d6c <_realloc_r+0x114>
    8e68:	29800117 	ldw	r6,4(r5)
    8e6c:	00bfff04 	movi	r2,-4
    8e70:	b1000404 	addi	r4,r22,16
    8e74:	3084703a 	and	r2,r6,r2
    8e78:	140d883a 	add	r6,r2,r16
    8e7c:	31005b0e 	bge	r6,r4,8fec <_realloc_r+0x394>
    8e80:	2811883a 	mov	r8,r5
    8e84:	18c0004c 	andi	r3,r3,1
    8e88:	183fce1e 	bne	r3,zero,8dc4 <_realloc_r+0x16c>
    8e8c:	a4fffe17 	ldw	r19,-8(r20)
    8e90:	00ffff04 	movi	r3,-4
    8e94:	ace7c83a 	sub	r19,r21,r19
    8e98:	99000117 	ldw	r4,4(r19)
    8e9c:	20c6703a 	and	r3,r4,r3
    8ea0:	403fc526 	beq	r8,zero,8db8 <_realloc_r+0x160>
    8ea4:	1c2f883a 	add	r23,r3,r16
    8ea8:	b8af883a 	add	r23,r23,r2
    8eac:	41406026 	beq	r8,r5,9030 <_realloc_r+0x3d8>
    8eb0:	b9ffc116 	blt	r23,r7,8db8 <_realloc_r+0x160>
    8eb4:	40c00217 	ldw	r3,8(r8)
    8eb8:	40800317 	ldw	r2,12(r8)
    8ebc:	81bfff04 	addi	r6,r16,-4
    8ec0:	01000904 	movi	r4,36
    8ec4:	18800315 	stw	r2,12(r3)
    8ec8:	10c00215 	stw	r3,8(r2)
    8ecc:	99400217 	ldw	r5,8(r19)
    8ed0:	98c00317 	ldw	r3,12(r19)
    8ed4:	9c400204 	addi	r17,r19,8
    8ed8:	28c00315 	stw	r3,12(r5)
    8edc:	19400215 	stw	r5,8(r3)
    8ee0:	21802d36 	bltu	r4,r6,8f98 <_realloc_r+0x340>
    8ee4:	008004c4 	movi	r2,19
    8ee8:	1180352e 	bgeu	r2,r6,8fc0 <_realloc_r+0x368>
    8eec:	a0800017 	ldw	r2,0(r20)
    8ef0:	98800215 	stw	r2,8(r19)
    8ef4:	a0800117 	ldw	r2,4(r20)
    8ef8:	98800315 	stw	r2,12(r19)
    8efc:	008006c4 	movi	r2,27
    8f00:	11808036 	bltu	r2,r6,9104 <_realloc_r+0x4ac>
    8f04:	98c00404 	addi	r3,r19,16
    8f08:	a5000204 	addi	r20,r20,8
    8f0c:	00002d06 	br	8fc4 <_realloc_r+0x36c>
    8f10:	1d86b03a 	or	r3,r3,r22
    8f14:	ad8b883a 	add	r5,r21,r22
    8f18:	a8c00115 	stw	r3,4(r21)
    8f1c:	38800054 	ori	r2,r7,1
    8f20:	28800115 	stw	r2,4(r5)
    8f24:	29cf883a 	add	r7,r5,r7
    8f28:	38800117 	ldw	r2,4(r7)
    8f2c:	9009883a 	mov	r4,r18
    8f30:	29400204 	addi	r5,r5,8
    8f34:	10800054 	ori	r2,r2,1
    8f38:	38800115 	stw	r2,4(r7)
    8f3c:	0006c480 	call	6c48 <_free_r>
    8f40:	003f8706 	br	8d60 <_realloc_r+0x108>
    8f44:	300b883a 	mov	r5,r6
    8f48:	dfc00917 	ldw	ra,36(sp)
    8f4c:	df000817 	ldw	fp,32(sp)
    8f50:	ddc00717 	ldw	r23,28(sp)
    8f54:	dd800617 	ldw	r22,24(sp)
    8f58:	dd400517 	ldw	r21,20(sp)
    8f5c:	dd000417 	ldw	r20,16(sp)
    8f60:	dcc00317 	ldw	r19,12(sp)
    8f64:	dc800217 	ldw	r18,8(sp)
    8f68:	dc400117 	ldw	r17,4(sp)
    8f6c:	dc000017 	ldw	r16,0(sp)
    8f70:	dec00a04 	addi	sp,sp,40
    8f74:	000208c1 	jmpi	208c <_malloc_r>
    8f78:	98800317 	ldw	r2,12(r19)
    8f7c:	98c00217 	ldw	r3,8(r19)
    8f80:	81bfff04 	addi	r6,r16,-4
    8f84:	01000904 	movi	r4,36
    8f88:	18800315 	stw	r2,12(r3)
    8f8c:	10c00215 	stw	r3,8(r2)
    8f90:	9c400204 	addi	r17,r19,8
    8f94:	21bfd32e 	bgeu	r4,r6,8ee4 <_realloc_r+0x28c>
    8f98:	8809883a 	mov	r4,r17
    8f9c:	a00b883a 	mov	r5,r20
    8fa0:	0007a380 	call	7a38 <memmove>
    8fa4:	98c00117 	ldw	r3,4(r19)
    8fa8:	b821883a 	mov	r16,r23
    8fac:	982b883a 	mov	r21,r19
    8fb0:	003f6106 	br	8d38 <_realloc_r+0xe0>
    8fb4:	8805883a 	mov	r2,r17
    8fb8:	a007883a 	mov	r3,r20
    8fbc:	003f9906 	br	8e24 <_realloc_r+0x1cc>
    8fc0:	8807883a 	mov	r3,r17
    8fc4:	a0800017 	ldw	r2,0(r20)
    8fc8:	b821883a 	mov	r16,r23
    8fcc:	982b883a 	mov	r21,r19
    8fd0:	18800015 	stw	r2,0(r3)
    8fd4:	a0800117 	ldw	r2,4(r20)
    8fd8:	18800115 	stw	r2,4(r3)
    8fdc:	a0800217 	ldw	r2,8(r20)
    8fe0:	18800215 	stw	r2,8(r3)
    8fe4:	98c00117 	ldw	r3,4(r19)
    8fe8:	003f5306 	br	8d38 <_realloc_r+0xe0>
    8fec:	adab883a 	add	r21,r21,r22
    8ff0:	3585c83a 	sub	r2,r6,r22
    8ff4:	e5400215 	stw	r21,8(fp)
    8ff8:	10800054 	ori	r2,r2,1
    8ffc:	a8800115 	stw	r2,4(r21)
    9000:	a0bfff17 	ldw	r2,-4(r20)
    9004:	9009883a 	mov	r4,r18
    9008:	1080004c 	andi	r2,r2,1
    900c:	b0acb03a 	or	r22,r22,r2
    9010:	a5bfff15 	stw	r22,-4(r20)
    9014:	000e9000 	call	e900 <__malloc_unlock>
    9018:	a005883a 	mov	r2,r20
    901c:	003f5306 	br	8d6c <_realloc_r+0x114>
    9020:	8809883a 	mov	r4,r17
    9024:	a00b883a 	mov	r5,r20
    9028:	0007a380 	call	7a38 <memmove>
    902c:	003f8306 	br	8e3c <_realloc_r+0x1e4>
    9030:	b0800404 	addi	r2,r22,16
    9034:	b8bf6016 	blt	r23,r2,8db8 <_realloc_r+0x160>
    9038:	98800317 	ldw	r2,12(r19)
    903c:	98c00217 	ldw	r3,8(r19)
    9040:	81bfff04 	addi	r6,r16,-4
    9044:	01000904 	movi	r4,36
    9048:	18800315 	stw	r2,12(r3)
    904c:	10c00215 	stw	r3,8(r2)
    9050:	9c400204 	addi	r17,r19,8
    9054:	21804336 	bltu	r4,r6,9164 <_realloc_r+0x50c>
    9058:	008004c4 	movi	r2,19
    905c:	11803f2e 	bgeu	r2,r6,915c <_realloc_r+0x504>
    9060:	a0800017 	ldw	r2,0(r20)
    9064:	98800215 	stw	r2,8(r19)
    9068:	a0800117 	ldw	r2,4(r20)
    906c:	98800315 	stw	r2,12(r19)
    9070:	008006c4 	movi	r2,27
    9074:	11803f36 	bltu	r2,r6,9174 <_realloc_r+0x51c>
    9078:	98800404 	addi	r2,r19,16
    907c:	a5000204 	addi	r20,r20,8
    9080:	a0c00017 	ldw	r3,0(r20)
    9084:	10c00015 	stw	r3,0(r2)
    9088:	a0c00117 	ldw	r3,4(r20)
    908c:	10c00115 	stw	r3,4(r2)
    9090:	a0c00217 	ldw	r3,8(r20)
    9094:	10c00215 	stw	r3,8(r2)
    9098:	9d87883a 	add	r3,r19,r22
    909c:	bd85c83a 	sub	r2,r23,r22
    90a0:	e0c00215 	stw	r3,8(fp)
    90a4:	10800054 	ori	r2,r2,1
    90a8:	18800115 	stw	r2,4(r3)
    90ac:	98800117 	ldw	r2,4(r19)
    90b0:	9009883a 	mov	r4,r18
    90b4:	1080004c 	andi	r2,r2,1
    90b8:	b0acb03a 	or	r22,r22,r2
    90bc:	9d800115 	stw	r22,4(r19)
    90c0:	000e9000 	call	e900 <__malloc_unlock>
    90c4:	8805883a 	mov	r2,r17
    90c8:	003f2806 	br	8d6c <_realloc_r+0x114>
    90cc:	a0c00217 	ldw	r3,8(r20)
    90d0:	88c00215 	stw	r3,8(r17)
    90d4:	a0c00317 	ldw	r3,12(r20)
    90d8:	88c00315 	stw	r3,12(r17)
    90dc:	30801126 	beq	r6,r2,9124 <_realloc_r+0x4cc>
    90e0:	88800404 	addi	r2,r17,16
    90e4:	a0c00404 	addi	r3,r20,16
    90e8:	003f4e06 	br	8e24 <_realloc_r+0x1cc>
    90ec:	893fff17 	ldw	r4,-4(r17)
    90f0:	00bfff04 	movi	r2,-4
    90f4:	a023883a 	mov	r17,r20
    90f8:	2084703a 	and	r2,r4,r2
    90fc:	80a1883a 	add	r16,r16,r2
    9100:	003f0d06 	br	8d38 <_realloc_r+0xe0>
    9104:	a0800217 	ldw	r2,8(r20)
    9108:	98800415 	stw	r2,16(r19)
    910c:	a0800317 	ldw	r2,12(r20)
    9110:	98800515 	stw	r2,20(r19)
    9114:	31000a26 	beq	r6,r4,9140 <_realloc_r+0x4e8>
    9118:	98c00604 	addi	r3,r19,24
    911c:	a5000404 	addi	r20,r20,16
    9120:	003fa806 	br	8fc4 <_realloc_r+0x36c>
    9124:	a1000417 	ldw	r4,16(r20)
    9128:	88800604 	addi	r2,r17,24
    912c:	a0c00604 	addi	r3,r20,24
    9130:	89000415 	stw	r4,16(r17)
    9134:	a1000517 	ldw	r4,20(r20)
    9138:	89000515 	stw	r4,20(r17)
    913c:	003f3906 	br	8e24 <_realloc_r+0x1cc>
    9140:	a0800417 	ldw	r2,16(r20)
    9144:	a5000604 	addi	r20,r20,24
    9148:	98c00804 	addi	r3,r19,32
    914c:	98800615 	stw	r2,24(r19)
    9150:	a0bfff17 	ldw	r2,-4(r20)
    9154:	98800715 	stw	r2,28(r19)
    9158:	003f9a06 	br	8fc4 <_realloc_r+0x36c>
    915c:	8805883a 	mov	r2,r17
    9160:	003fc706 	br	9080 <_realloc_r+0x428>
    9164:	8809883a 	mov	r4,r17
    9168:	a00b883a 	mov	r5,r20
    916c:	0007a380 	call	7a38 <memmove>
    9170:	003fc906 	br	9098 <_realloc_r+0x440>
    9174:	a0800217 	ldw	r2,8(r20)
    9178:	98800415 	stw	r2,16(r19)
    917c:	a0800317 	ldw	r2,12(r20)
    9180:	98800515 	stw	r2,20(r19)
    9184:	31000726 	beq	r6,r4,91a4 <_realloc_r+0x54c>
    9188:	98800604 	addi	r2,r19,24
    918c:	a5000404 	addi	r20,r20,16
    9190:	003fbb06 	br	9080 <_realloc_r+0x428>
    9194:	9009883a 	mov	r4,r18
    9198:	000e9000 	call	e900 <__malloc_unlock>
    919c:	0005883a 	mov	r2,zero
    91a0:	003ef206 	br	8d6c <_realloc_r+0x114>
    91a4:	a0c00417 	ldw	r3,16(r20)
    91a8:	a5000604 	addi	r20,r20,24
    91ac:	98800804 	addi	r2,r19,32
    91b0:	98c00615 	stw	r3,24(r19)
    91b4:	a0ffff17 	ldw	r3,-4(r20)
    91b8:	98c00715 	stw	r3,28(r19)
    91bc:	003fb006 	br	9080 <_realloc_r+0x428>

000091c0 <__fpclassifyd>:
    91c0:	00a00034 	movhi	r2,32768
    91c4:	10bfffc4 	addi	r2,r2,-1
    91c8:	2884703a 	and	r2,r5,r2
    91cc:	10000726 	beq	r2,zero,91ec <__fpclassifyd+0x2c>
    91d0:	00fffc34 	movhi	r3,65520
    91d4:	019ff834 	movhi	r6,32736
    91d8:	28c7883a 	add	r3,r5,r3
    91dc:	31bfffc4 	addi	r6,r6,-1
    91e0:	30c00536 	bltu	r6,r3,91f8 <__fpclassifyd+0x38>
    91e4:	00800104 	movi	r2,4
    91e8:	f800283a 	ret
    91ec:	2000021e 	bne	r4,zero,91f8 <__fpclassifyd+0x38>
    91f0:	00800084 	movi	r2,2
    91f4:	f800283a 	ret
    91f8:	00dffc34 	movhi	r3,32752
    91fc:	019ff834 	movhi	r6,32736
    9200:	28cb883a 	add	r5,r5,r3
    9204:	31bfffc4 	addi	r6,r6,-1
    9208:	317ff62e 	bgeu	r6,r5,91e4 <__fpclassifyd+0x24>
    920c:	01400434 	movhi	r5,16
    9210:	297fffc4 	addi	r5,r5,-1
    9214:	28800236 	bltu	r5,r2,9220 <__fpclassifyd+0x60>
    9218:	008000c4 	movi	r2,3
    921c:	f800283a 	ret
    9220:	10c00226 	beq	r2,r3,922c <__fpclassifyd+0x6c>
    9224:	0005883a 	mov	r2,zero
    9228:	f800283a 	ret
    922c:	2005003a 	cmpeq	r2,r4,zero
    9230:	f800283a 	ret

00009234 <__sread>:
    9234:	defffe04 	addi	sp,sp,-8
    9238:	dc000015 	stw	r16,0(sp)
    923c:	2821883a 	mov	r16,r5
    9240:	2940038f 	ldh	r5,14(r5)
    9244:	dfc00115 	stw	ra,4(sp)
    9248:	000ae380 	call	ae38 <_read_r>
    924c:	10000716 	blt	r2,zero,926c <__sread+0x38>
    9250:	80c01417 	ldw	r3,80(r16)
    9254:	1887883a 	add	r3,r3,r2
    9258:	80c01415 	stw	r3,80(r16)
    925c:	dfc00117 	ldw	ra,4(sp)
    9260:	dc000017 	ldw	r16,0(sp)
    9264:	dec00204 	addi	sp,sp,8
    9268:	f800283a 	ret
    926c:	80c0030b 	ldhu	r3,12(r16)
    9270:	18fbffcc 	andi	r3,r3,61439
    9274:	80c0030d 	sth	r3,12(r16)
    9278:	dfc00117 	ldw	ra,4(sp)
    927c:	dc000017 	ldw	r16,0(sp)
    9280:	dec00204 	addi	sp,sp,8
    9284:	f800283a 	ret

00009288 <__seofread>:
    9288:	0005883a 	mov	r2,zero
    928c:	f800283a 	ret

00009290 <__swrite>:
    9290:	2880030b 	ldhu	r2,12(r5)
    9294:	defffb04 	addi	sp,sp,-20
    9298:	dcc00315 	stw	r19,12(sp)
    929c:	dc800215 	stw	r18,8(sp)
    92a0:	dc400115 	stw	r17,4(sp)
    92a4:	dc000015 	stw	r16,0(sp)
    92a8:	dfc00415 	stw	ra,16(sp)
    92ac:	10c0400c 	andi	r3,r2,256
    92b0:	2821883a 	mov	r16,r5
    92b4:	2027883a 	mov	r19,r4
    92b8:	3025883a 	mov	r18,r6
    92bc:	3823883a 	mov	r17,r7
    92c0:	18000526 	beq	r3,zero,92d8 <__swrite+0x48>
    92c4:	2940038f 	ldh	r5,14(r5)
    92c8:	000d883a 	mov	r6,zero
    92cc:	01c00084 	movi	r7,2
    92d0:	000addc0 	call	addc <_lseek_r>
    92d4:	8080030b 	ldhu	r2,12(r16)
    92d8:	8140038f 	ldh	r5,14(r16)
    92dc:	10bbffcc 	andi	r2,r2,61439
    92e0:	9809883a 	mov	r4,r19
    92e4:	900d883a 	mov	r6,r18
    92e8:	880f883a 	mov	r7,r17
    92ec:	8080030d 	sth	r2,12(r16)
    92f0:	dfc00417 	ldw	ra,16(sp)
    92f4:	dcc00317 	ldw	r19,12(sp)
    92f8:	dc800217 	ldw	r18,8(sp)
    92fc:	dc400117 	ldw	r17,4(sp)
    9300:	dc000017 	ldw	r16,0(sp)
    9304:	dec00504 	addi	sp,sp,20
    9308:	000a8d81 	jmpi	a8d8 <_write_r>

0000930c <__sseek>:
    930c:	defffe04 	addi	sp,sp,-8
    9310:	dc000015 	stw	r16,0(sp)
    9314:	2821883a 	mov	r16,r5
    9318:	2940038f 	ldh	r5,14(r5)
    931c:	dfc00115 	stw	ra,4(sp)
    9320:	000addc0 	call	addc <_lseek_r>
    9324:	00ffffc4 	movi	r3,-1
    9328:	10c00826 	beq	r2,r3,934c <__sseek+0x40>
    932c:	80c0030b 	ldhu	r3,12(r16)
    9330:	80801415 	stw	r2,80(r16)
    9334:	18c40014 	ori	r3,r3,4096
    9338:	80c0030d 	sth	r3,12(r16)
    933c:	dfc00117 	ldw	ra,4(sp)
    9340:	dc000017 	ldw	r16,0(sp)
    9344:	dec00204 	addi	sp,sp,8
    9348:	f800283a 	ret
    934c:	80c0030b 	ldhu	r3,12(r16)
    9350:	18fbffcc 	andi	r3,r3,61439
    9354:	80c0030d 	sth	r3,12(r16)
    9358:	dfc00117 	ldw	ra,4(sp)
    935c:	dc000017 	ldw	r16,0(sp)
    9360:	dec00204 	addi	sp,sp,8
    9364:	f800283a 	ret

00009368 <__sclose>:
    9368:	2940038f 	ldh	r5,14(r5)
    936c:	000a9341 	jmpi	a934 <_close_r>

00009370 <strcmp>:
    9370:	2144b03a 	or	r2,r4,r5
    9374:	108000cc 	andi	r2,r2,3
    9378:	1000171e 	bne	r2,zero,93d8 <strcmp+0x68>
    937c:	20800017 	ldw	r2,0(r4)
    9380:	28c00017 	ldw	r3,0(r5)
    9384:	10c0141e 	bne	r2,r3,93d8 <strcmp+0x68>
    9388:	027fbff4 	movhi	r9,65279
    938c:	4a7fbfc4 	addi	r9,r9,-257
    9390:	0086303a 	nor	r3,zero,r2
    9394:	02202074 	movhi	r8,32897
    9398:	1245883a 	add	r2,r2,r9
    939c:	42202004 	addi	r8,r8,-32640
    93a0:	10c4703a 	and	r2,r2,r3
    93a4:	1204703a 	and	r2,r2,r8
    93a8:	10000226 	beq	r2,zero,93b4 <strcmp+0x44>
    93ac:	00001706 	br	940c <strcmp+0x9c>
    93b0:	1000161e 	bne	r2,zero,940c <strcmp+0x9c>
    93b4:	21000104 	addi	r4,r4,4
    93b8:	20c00017 	ldw	r3,0(r4)
    93bc:	29400104 	addi	r5,r5,4
    93c0:	29800017 	ldw	r6,0(r5)
    93c4:	1a4f883a 	add	r7,r3,r9
    93c8:	00c4303a 	nor	r2,zero,r3
    93cc:	3884703a 	and	r2,r7,r2
    93d0:	1204703a 	and	r2,r2,r8
    93d4:	19bff626 	beq	r3,r6,93b0 <strcmp+0x40>
    93d8:	20800007 	ldb	r2,0(r4)
    93dc:	1000051e 	bne	r2,zero,93f4 <strcmp+0x84>
    93e0:	00000606 	br	93fc <strcmp+0x8c>
    93e4:	21000044 	addi	r4,r4,1
    93e8:	20800007 	ldb	r2,0(r4)
    93ec:	29400044 	addi	r5,r5,1
    93f0:	10000226 	beq	r2,zero,93fc <strcmp+0x8c>
    93f4:	28c00007 	ldb	r3,0(r5)
    93f8:	10fffa26 	beq	r2,r3,93e4 <strcmp+0x74>
    93fc:	20800003 	ldbu	r2,0(r4)
    9400:	28c00003 	ldbu	r3,0(r5)
    9404:	10c5c83a 	sub	r2,r2,r3
    9408:	f800283a 	ret
    940c:	0005883a 	mov	r2,zero
    9410:	f800283a 	ret

00009414 <__sprint_r.part.0>:
    9414:	28801917 	ldw	r2,100(r5)
    9418:	defff604 	addi	sp,sp,-40
    941c:	dd400515 	stw	r21,20(sp)
    9420:	dcc00315 	stw	r19,12(sp)
    9424:	dfc00915 	stw	ra,36(sp)
    9428:	df000815 	stw	fp,32(sp)
    942c:	ddc00715 	stw	r23,28(sp)
    9430:	dd800615 	stw	r22,24(sp)
    9434:	dd000415 	stw	r20,16(sp)
    9438:	dc800215 	stw	r18,8(sp)
    943c:	dc400115 	stw	r17,4(sp)
    9440:	dc000015 	stw	r16,0(sp)
    9444:	1088000c 	andi	r2,r2,8192
    9448:	2827883a 	mov	r19,r5
    944c:	302b883a 	mov	r21,r6
    9450:	10002d26 	beq	r2,zero,9508 <__sprint_r.part.0+0xf4>
    9454:	30800217 	ldw	r2,8(r6)
    9458:	35800017 	ldw	r22,0(r6)
    945c:	10002826 	beq	r2,zero,9500 <__sprint_r.part.0+0xec>
    9460:	2029883a 	mov	r20,r4
    9464:	b5c00104 	addi	r23,r22,4
    9468:	04bfffc4 	movi	r18,-1
    946c:	bc400017 	ldw	r17,0(r23)
    9470:	b4000017 	ldw	r16,0(r22)
    9474:	0039883a 	mov	fp,zero
    9478:	8822d0ba 	srli	r17,r17,2
    947c:	04400316 	blt	zero,r17,948c <__sprint_r.part.0+0x78>
    9480:	00001806 	br	94e4 <__sprint_r.part.0+0xd0>
    9484:	84000104 	addi	r16,r16,4
    9488:	8f001526 	beq	r17,fp,94e0 <__sprint_r.part.0+0xcc>
    948c:	81400017 	ldw	r5,0(r16)
    9490:	a009883a 	mov	r4,r20
    9494:	980d883a 	mov	r6,r19
    9498:	000ab500 	call	ab50 <_fputwc_r>
    949c:	e7000044 	addi	fp,fp,1
    94a0:	14bff81e 	bne	r2,r18,9484 <__sprint_r.part.0+0x70>
    94a4:	9005883a 	mov	r2,r18
    94a8:	a8000215 	stw	zero,8(r21)
    94ac:	a8000115 	stw	zero,4(r21)
    94b0:	dfc00917 	ldw	ra,36(sp)
    94b4:	df000817 	ldw	fp,32(sp)
    94b8:	ddc00717 	ldw	r23,28(sp)
    94bc:	dd800617 	ldw	r22,24(sp)
    94c0:	dd400517 	ldw	r21,20(sp)
    94c4:	dd000417 	ldw	r20,16(sp)
    94c8:	dcc00317 	ldw	r19,12(sp)
    94cc:	dc800217 	ldw	r18,8(sp)
    94d0:	dc400117 	ldw	r17,4(sp)
    94d4:	dc000017 	ldw	r16,0(sp)
    94d8:	dec00a04 	addi	sp,sp,40
    94dc:	f800283a 	ret
    94e0:	a8800217 	ldw	r2,8(r21)
    94e4:	8c63883a 	add	r17,r17,r17
    94e8:	8c63883a 	add	r17,r17,r17
    94ec:	1445c83a 	sub	r2,r2,r17
    94f0:	a8800215 	stw	r2,8(r21)
    94f4:	b5800204 	addi	r22,r22,8
    94f8:	bdc00204 	addi	r23,r23,8
    94fc:	103fdb1e 	bne	r2,zero,946c <__sprint_r.part.0+0x58>
    9500:	0005883a 	mov	r2,zero
    9504:	003fe806 	br	94a8 <__sprint_r.part.0+0x94>
    9508:	0006f380 	call	6f38 <__sfvwrite_r>
    950c:	003fe606 	br	94a8 <__sprint_r.part.0+0x94>

00009510 <__sprint_r>:
    9510:	30c00217 	ldw	r3,8(r6)
    9514:	18000126 	beq	r3,zero,951c <__sprint_r+0xc>
    9518:	00094141 	jmpi	9414 <__sprint_r.part.0>
    951c:	30000115 	stw	zero,4(r6)
    9520:	0005883a 	mov	r2,zero
    9524:	f800283a 	ret

00009528 <___vfiprintf_internal_r>:
    9528:	deffca04 	addi	sp,sp,-216
    952c:	dd803215 	stw	r22,200(sp)
    9530:	dd403115 	stw	r21,196(sp)
    9534:	dfc03515 	stw	ra,212(sp)
    9538:	df003415 	stw	fp,208(sp)
    953c:	ddc03315 	stw	r23,204(sp)
    9540:	dd003015 	stw	r20,192(sp)
    9544:	dcc02f15 	stw	r19,188(sp)
    9548:	dc802e15 	stw	r18,184(sp)
    954c:	dc402d15 	stw	r17,180(sp)
    9550:	dc002c15 	stw	r16,176(sp)
    9554:	d9002015 	stw	r4,128(sp)
    9558:	d9c02215 	stw	r7,136(sp)
    955c:	282b883a 	mov	r21,r5
    9560:	302d883a 	mov	r22,r6
    9564:	20000226 	beq	r4,zero,9570 <___vfiprintf_internal_r+0x48>
    9568:	20800e17 	ldw	r2,56(r4)
    956c:	1001b126 	beq	r2,zero,9c34 <___vfiprintf_internal_r+0x70c>
    9570:	a880030b 	ldhu	r2,12(r21)
    9574:	10c8000c 	andi	r3,r2,8192
    9578:	1800061e 	bne	r3,zero,9594 <___vfiprintf_internal_r+0x6c>
    957c:	a9001917 	ldw	r4,100(r21)
    9580:	00f7ffc4 	movi	r3,-8193
    9584:	10880014 	ori	r2,r2,8192
    9588:	20c6703a 	and	r3,r4,r3
    958c:	a880030d 	sth	r2,12(r21)
    9590:	a8c01915 	stw	r3,100(r21)
    9594:	10c0020c 	andi	r3,r2,8
    9598:	18018926 	beq	r3,zero,9bc0 <___vfiprintf_internal_r+0x698>
    959c:	a8c00417 	ldw	r3,16(r21)
    95a0:	18018726 	beq	r3,zero,9bc0 <___vfiprintf_internal_r+0x698>
    95a4:	1080068c 	andi	r2,r2,26
    95a8:	00c00284 	movi	r3,10
    95ac:	10c18c26 	beq	r2,r3,9be0 <___vfiprintf_internal_r+0x6b8>
    95b0:	d8801a04 	addi	r2,sp,104
    95b4:	d8c019c4 	addi	r3,sp,103
    95b8:	07000074 	movhi	fp,1
    95bc:	05c00074 	movhi	r23,1
    95c0:	10c9c83a 	sub	r4,r2,r3
    95c4:	e704d404 	addi	fp,fp,4944
    95c8:	bdc4d004 	addi	r23,r23,4928
    95cc:	d8801e15 	stw	r2,120(sp)
    95d0:	d8c01f15 	stw	r3,124(sp)
    95d4:	dec01a15 	stw	sp,104(sp)
    95d8:	d8001c15 	stw	zero,112(sp)
    95dc:	d8001b15 	stw	zero,108(sp)
    95e0:	d8002615 	stw	zero,152(sp)
    95e4:	d8002315 	stw	zero,140(sp)
    95e8:	d9002715 	stw	r4,156(sp)
    95ec:	d811883a 	mov	r8,sp
    95f0:	dd402115 	stw	r21,132(sp)
    95f4:	b021883a 	mov	r16,r22
    95f8:	80800007 	ldb	r2,0(r16)
    95fc:	10037226 	beq	r2,zero,a3c8 <___vfiprintf_internal_r+0xea0>
    9600:	01000944 	movi	r4,37
    9604:	11037026 	beq	r2,r4,a3c8 <___vfiprintf_internal_r+0xea0>
    9608:	8005883a 	mov	r2,r16
    960c:	00000106 	br	9614 <___vfiprintf_internal_r+0xec>
    9610:	19000326 	beq	r3,r4,9620 <___vfiprintf_internal_r+0xf8>
    9614:	10800044 	addi	r2,r2,1
    9618:	10c00007 	ldb	r3,0(r2)
    961c:	183ffc1e 	bne	r3,zero,9610 <___vfiprintf_internal_r+0xe8>
    9620:	1425c83a 	sub	r18,r2,r16
    9624:	1023883a 	mov	r17,r2
    9628:	90001026 	beq	r18,zero,966c <___vfiprintf_internal_r+0x144>
    962c:	d8c01c17 	ldw	r3,112(sp)
    9630:	d8801b17 	ldw	r2,108(sp)
    9634:	44000015 	stw	r16,0(r8)
    9638:	90c7883a 	add	r3,r18,r3
    963c:	10800044 	addi	r2,r2,1
    9640:	44800115 	stw	r18,4(r8)
    9644:	d8c01c15 	stw	r3,112(sp)
    9648:	d8801b15 	stw	r2,108(sp)
    964c:	010001c4 	movi	r4,7
    9650:	2080750e 	bge	r4,r2,9828 <___vfiprintf_internal_r+0x300>
    9654:	18036f1e 	bne	r3,zero,a414 <___vfiprintf_internal_r+0xeec>
    9658:	d8802317 	ldw	r2,140(sp)
    965c:	d8001b15 	stw	zero,108(sp)
    9660:	d811883a 	mov	r8,sp
    9664:	1485883a 	add	r2,r2,r18
    9668:	d8802315 	stw	r2,140(sp)
    966c:	88800007 	ldb	r2,0(r17)
    9670:	10041026 	beq	r2,zero,a6b4 <___vfiprintf_internal_r+0x118c>
    9674:	88c00047 	ldb	r3,1(r17)
    9678:	88800044 	addi	r2,r17,1
    967c:	d8001d85 	stb	zero,118(sp)
    9680:	000f883a 	mov	r7,zero
    9684:	027fffc4 	movi	r9,-1
    9688:	0025883a 	mov	r18,zero
    968c:	002b883a 	mov	r21,zero
    9690:	01401604 	movi	r5,88
    9694:	01800244 	movi	r6,9
    9698:	03400a84 	movi	r13,42
    969c:	03001b04 	movi	r12,108
    96a0:	14000044 	addi	r16,r2,1
    96a4:	18bff804 	addi	r2,r3,-32
    96a8:	28825536 	bltu	r5,r2,a000 <___vfiprintf_internal_r+0xad8>
    96ac:	100490ba 	slli	r2,r2,2
    96b0:	01000074 	movhi	r4,1
    96b4:	2125b104 	addi	r4,r4,-26940
    96b8:	1105883a 	add	r2,r2,r4
    96bc:	10800017 	ldw	r2,0(r2)
    96c0:	1000683a 	jmp	r2
    96c4:	00009dc4 	movi	zero,631
    96c8:	0000a000 	call	a00 <enable_continues_mode+0x10>
    96cc:	0000a000 	call	a00 <enable_continues_mode+0x10>
    96d0:	00009de4 	muli	zero,zero,631
    96d4:	0000a000 	call	a00 <enable_continues_mode+0x10>
    96d8:	0000a000 	call	a00 <enable_continues_mode+0x10>
    96dc:	0000a000 	call	a00 <enable_continues_mode+0x10>
    96e0:	0000a000 	call	a00 <enable_continues_mode+0x10>
    96e4:	0000a000 	call	a00 <enable_continues_mode+0x10>
    96e8:	0000a000 	call	a00 <enable_continues_mode+0x10>
    96ec:	00009df4 	movhi	zero,631
    96f0:	00009e14 	movui	zero,632
    96f4:	0000a000 	call	a00 <enable_continues_mode+0x10>
    96f8:	00009c3c 	xorhi	zero,zero,624
    96fc:	00009d28 	cmpgeui	zero,zero,628
    9700:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9704:	00009ca8 	cmpgeui	zero,zero,626
    9708:	00009cb8 	rdprs	zero,zero,626
    970c:	00009cb8 	rdprs	zero,zero,626
    9710:	00009cb8 	rdprs	zero,zero,626
    9714:	00009cb8 	rdprs	zero,zero,626
    9718:	00009cb8 	rdprs	zero,zero,626
    971c:	00009cb8 	rdprs	zero,zero,626
    9720:	00009cb8 	rdprs	zero,zero,626
    9724:	00009cb8 	rdprs	zero,zero,626
    9728:	00009cb8 	rdprs	zero,zero,626
    972c:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9730:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9734:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9738:	0000a000 	call	a00 <enable_continues_mode+0x10>
    973c:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9740:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9744:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9748:	0000a000 	call	a00 <enable_continues_mode+0x10>
    974c:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9750:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9754:	00009ce4 	muli	zero,zero,627
    9758:	0000a000 	call	a00 <enable_continues_mode+0x10>
    975c:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9760:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9764:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9768:	0000a000 	call	a00 <enable_continues_mode+0x10>
    976c:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9770:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9774:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9778:	0000a000 	call	a00 <enable_continues_mode+0x10>
    977c:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9780:	00009870 	cmpltui	zero,zero,609
    9784:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9788:	0000a000 	call	a00 <enable_continues_mode+0x10>
    978c:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9790:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9794:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9798:	0000983c 	xorhi	zero,zero,608
    979c:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97a0:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97a4:	00009e84 	movi	zero,634
    97a8:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97ac:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97b0:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97b4:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97b8:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97bc:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97c0:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97c4:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97c8:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97cc:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97d0:	00009e24 	muli	zero,zero,632
    97d4:	00009e50 	cmplti	zero,zero,633
    97d8:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97dc:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97e0:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97e4:	00009f2c 	andhi	zero,zero,636
    97e8:	00009e50 	cmplti	zero,zero,633
    97ec:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97f0:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97f4:	00009f3c 	xorhi	zero,zero,636
    97f8:	0000a000 	call	a00 <enable_continues_mode+0x10>
    97fc:	00009d68 	cmpgeui	zero,zero,629
    9800:	00009874 	movhi	zero,609
    9804:	00009f50 	cmplti	zero,zero,637
    9808:	00009f90 	cmplti	zero,zero,638
    980c:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9810:	00009ed8 	cmpnei	zero,zero,635
    9814:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9818:	00009840 	call	984 <current_image_pointer+0x8>
    981c:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9820:	0000a000 	call	a00 <enable_continues_mode+0x10>
    9824:	00009fa0 	cmpeqi	zero,zero,638
    9828:	42000204 	addi	r8,r8,8
    982c:	d8802317 	ldw	r2,140(sp)
    9830:	1485883a 	add	r2,r2,r18
    9834:	d8802315 	stw	r2,140(sp)
    9838:	003f8c06 	br	966c <___vfiprintf_internal_r+0x144>
    983c:	ad400414 	ori	r21,r21,16
    9840:	a880080c 	andi	r2,r21,32
    9844:	1001e61e 	bne	r2,zero,9fe0 <___vfiprintf_internal_r+0xab8>
    9848:	a880040c 	andi	r2,r21,16
    984c:	10034726 	beq	r2,zero,a56c <___vfiprintf_internal_r+0x1044>
    9850:	d8802217 	ldw	r2,136(sp)
    9854:	001b883a 	mov	r13,zero
    9858:	15800017 	ldw	r22,0(r2)
    985c:	10800104 	addi	r2,r2,4
    9860:	d8802215 	stw	r2,136(sp)
    9864:	b009883a 	mov	r4,r22
    9868:	00800044 	movi	r2,1
    986c:	00000c06 	br	98a0 <___vfiprintf_internal_r+0x378>
    9870:	ad400414 	ori	r21,r21,16
    9874:	a880080c 	andi	r2,r21,32
    9878:	1001491e 	bne	r2,zero,9da0 <___vfiprintf_internal_r+0x878>
    987c:	a880040c 	andi	r2,r21,16
    9880:	10032d26 	beq	r2,zero,a538 <___vfiprintf_internal_r+0x1010>
    9884:	d9002217 	ldw	r4,136(sp)
    9888:	001b883a 	mov	r13,zero
    988c:	0005883a 	mov	r2,zero
    9890:	25800017 	ldw	r22,0(r4)
    9894:	21000104 	addi	r4,r4,4
    9898:	d9002215 	stw	r4,136(sp)
    989c:	b009883a 	mov	r4,r22
    98a0:	d8001d85 	stb	zero,118(sp)
    98a4:	4827883a 	mov	r19,r9
    98a8:	001d883a 	mov	r14,zero
    98ac:	48000216 	blt	r9,zero,98b8 <___vfiprintf_internal_r+0x390>
    98b0:	00ffdfc4 	movi	r3,-129
    98b4:	a8ea703a 	and	r21,r21,r3
    98b8:	2002071e 	bne	r4,zero,a0d8 <___vfiprintf_internal_r+0xbb0>
    98bc:	4802ad26 	beq	r9,zero,a374 <___vfiprintf_internal_r+0xe4c>
    98c0:	10803fcc 	andi	r2,r2,255
    98c4:	00c00044 	movi	r3,1
    98c8:	10c22b26 	beq	r2,r3,a178 <___vfiprintf_internal_r+0xc50>
    98cc:	00c00084 	movi	r3,2
    98d0:	dd001a04 	addi	r20,sp,104
    98d4:	10c0dd1e 	bne	r2,r3,9c4c <___vfiprintf_internal_r+0x724>
    98d8:	d9002617 	ldw	r4,152(sp)
    98dc:	b08003cc 	andi	r2,r22,15
    98e0:	6806973a 	slli	r3,r13,28
    98e4:	2085883a 	add	r2,r4,r2
    98e8:	b02cd13a 	srli	r22,r22,4
    98ec:	10800003 	ldbu	r2,0(r2)
    98f0:	681ad13a 	srli	r13,r13,4
    98f4:	a53fffc4 	addi	r20,r20,-1
    98f8:	1dacb03a 	or	r22,r3,r22
    98fc:	a0800005 	stb	r2,0(r20)
    9900:	b344b03a 	or	r2,r22,r13
    9904:	103ff51e 	bne	r2,zero,98dc <___vfiprintf_internal_r+0x3b4>
    9908:	d9001e17 	ldw	r4,120(sp)
    990c:	2527c83a 	sub	r19,r4,r20
    9910:	9823883a 	mov	r17,r19
    9914:	9a40010e 	bge	r19,r9,991c <___vfiprintf_internal_r+0x3f4>
    9918:	4823883a 	mov	r17,r9
    991c:	73803fcc 	andi	r14,r14,255
    9920:	7380201c 	xori	r14,r14,128
    9924:	73bfe004 	addi	r14,r14,-128
    9928:	70000126 	beq	r14,zero,9930 <___vfiprintf_internal_r+0x408>
    992c:	8c400044 	addi	r17,r17,1
    9930:	ab40008c 	andi	r13,r21,2
    9934:	68000126 	beq	r13,zero,993c <___vfiprintf_internal_r+0x414>
    9938:	8c400084 	addi	r17,r17,2
    993c:	ad80210c 	andi	r22,r21,132
    9940:	b001c51e 	bne	r22,zero,a058 <___vfiprintf_internal_r+0xb30>
    9944:	9447c83a 	sub	r3,r18,r17
    9948:	00c1c30e 	bge	zero,r3,a058 <___vfiprintf_internal_r+0xb30>
    994c:	01c00404 	movi	r7,16
    9950:	d8801c17 	ldw	r2,112(sp)
    9954:	38c37b0e 	bge	r7,r3,a744 <___vfiprintf_internal_r+0x121c>
    9958:	01000074 	movhi	r4,1
    995c:	2104d404 	addi	r4,r4,4944
    9960:	dc002915 	stw	r16,164(sp)
    9964:	d9801b17 	ldw	r6,108(sp)
    9968:	d9002415 	stw	r4,144(sp)
    996c:	03c001c4 	movi	r15,7
    9970:	da402515 	stw	r9,148(sp)
    9974:	db402815 	stw	r13,160(sp)
    9978:	1821883a 	mov	r16,r3
    997c:	00000506 	br	9994 <___vfiprintf_internal_r+0x46c>
    9980:	31400084 	addi	r5,r6,2
    9984:	42000204 	addi	r8,r8,8
    9988:	200d883a 	mov	r6,r4
    998c:	843ffc04 	addi	r16,r16,-16
    9990:	3c000d0e 	bge	r7,r16,99c8 <___vfiprintf_internal_r+0x4a0>
    9994:	10800404 	addi	r2,r2,16
    9998:	31000044 	addi	r4,r6,1
    999c:	47000015 	stw	fp,0(r8)
    99a0:	41c00115 	stw	r7,4(r8)
    99a4:	d8801c15 	stw	r2,112(sp)
    99a8:	d9001b15 	stw	r4,108(sp)
    99ac:	793ff40e 	bge	r15,r4,9980 <___vfiprintf_internal_r+0x458>
    99b0:	10019b1e 	bne	r2,zero,a020 <___vfiprintf_internal_r+0xaf8>
    99b4:	843ffc04 	addi	r16,r16,-16
    99b8:	000d883a 	mov	r6,zero
    99bc:	01400044 	movi	r5,1
    99c0:	d811883a 	mov	r8,sp
    99c4:	3c3ff316 	blt	r7,r16,9994 <___vfiprintf_internal_r+0x46c>
    99c8:	8007883a 	mov	r3,r16
    99cc:	da402517 	ldw	r9,148(sp)
    99d0:	db402817 	ldw	r13,160(sp)
    99d4:	dc002917 	ldw	r16,164(sp)
    99d8:	d9002417 	ldw	r4,144(sp)
    99dc:	1885883a 	add	r2,r3,r2
    99e0:	40c00115 	stw	r3,4(r8)
    99e4:	41000015 	stw	r4,0(r8)
    99e8:	d8801c15 	stw	r2,112(sp)
    99ec:	d9401b15 	stw	r5,108(sp)
    99f0:	00c001c4 	movi	r3,7
    99f4:	19426a16 	blt	r3,r5,a3a0 <___vfiprintf_internal_r+0xe78>
    99f8:	d8c01d87 	ldb	r3,118(sp)
    99fc:	42000204 	addi	r8,r8,8
    9a00:	29000044 	addi	r4,r5,1
    9a04:	1801991e 	bne	r3,zero,a06c <___vfiprintf_internal_r+0xb44>
    9a08:	68000c26 	beq	r13,zero,9a3c <___vfiprintf_internal_r+0x514>
    9a0c:	d8c01d04 	addi	r3,sp,116
    9a10:	10800084 	addi	r2,r2,2
    9a14:	40c00015 	stw	r3,0(r8)
    9a18:	00c00084 	movi	r3,2
    9a1c:	40c00115 	stw	r3,4(r8)
    9a20:	d8801c15 	stw	r2,112(sp)
    9a24:	d9001b15 	stw	r4,108(sp)
    9a28:	00c001c4 	movi	r3,7
    9a2c:	19024c16 	blt	r3,r4,a360 <___vfiprintf_internal_r+0xe38>
    9a30:	200b883a 	mov	r5,r4
    9a34:	42000204 	addi	r8,r8,8
    9a38:	21000044 	addi	r4,r4,1
    9a3c:	00c02004 	movi	r3,128
    9a40:	b0c20126 	beq	r22,r3,a248 <___vfiprintf_internal_r+0xd20>
    9a44:	4cedc83a 	sub	r22,r9,r19
    9a48:	0580230e 	bge	zero,r22,9ad8 <___vfiprintf_internal_r+0x5b0>
    9a4c:	01c00404 	movi	r7,16
    9a50:	3d83140e 	bge	r7,r22,a6a4 <___vfiprintf_internal_r+0x117c>
    9a54:	01000074 	movhi	r4,1
    9a58:	2104d004 	addi	r4,r4,4928
    9a5c:	d9002415 	stw	r4,144(sp)
    9a60:	034001c4 	movi	r13,7
    9a64:	00000506 	br	9a7c <___vfiprintf_internal_r+0x554>
    9a68:	29000084 	addi	r4,r5,2
    9a6c:	42000204 	addi	r8,r8,8
    9a70:	180b883a 	mov	r5,r3
    9a74:	b5bffc04 	addi	r22,r22,-16
    9a78:	3d800d0e 	bge	r7,r22,9ab0 <___vfiprintf_internal_r+0x588>
    9a7c:	10800404 	addi	r2,r2,16
    9a80:	28c00044 	addi	r3,r5,1
    9a84:	45c00015 	stw	r23,0(r8)
    9a88:	41c00115 	stw	r7,4(r8)
    9a8c:	d8801c15 	stw	r2,112(sp)
    9a90:	d8c01b15 	stw	r3,108(sp)
    9a94:	68fff40e 	bge	r13,r3,9a68 <___vfiprintf_internal_r+0x540>
    9a98:	1001811e 	bne	r2,zero,a0a0 <___vfiprintf_internal_r+0xb78>
    9a9c:	b5bffc04 	addi	r22,r22,-16
    9aa0:	01000044 	movi	r4,1
    9aa4:	000b883a 	mov	r5,zero
    9aa8:	d811883a 	mov	r8,sp
    9aac:	3dbff316 	blt	r7,r22,9a7c <___vfiprintf_internal_r+0x554>
    9ab0:	d8c02417 	ldw	r3,144(sp)
    9ab4:	1585883a 	add	r2,r2,r22
    9ab8:	45800115 	stw	r22,4(r8)
    9abc:	40c00015 	stw	r3,0(r8)
    9ac0:	d8801c15 	stw	r2,112(sp)
    9ac4:	d9001b15 	stw	r4,108(sp)
    9ac8:	00c001c4 	movi	r3,7
    9acc:	1901d016 	blt	r3,r4,a210 <___vfiprintf_internal_r+0xce8>
    9ad0:	42000204 	addi	r8,r8,8
    9ad4:	21000044 	addi	r4,r4,1
    9ad8:	14c5883a 	add	r2,r2,r19
    9adc:	45000015 	stw	r20,0(r8)
    9ae0:	44c00115 	stw	r19,4(r8)
    9ae4:	d8801c15 	stw	r2,112(sp)
    9ae8:	d9001b15 	stw	r4,108(sp)
    9aec:	00c001c4 	movi	r3,7
    9af0:	1901cf0e 	bge	r3,r4,a230 <___vfiprintf_internal_r+0xd08>
    9af4:	1002361e 	bne	r2,zero,a3d0 <___vfiprintf_internal_r+0xea8>
    9af8:	d8001b15 	stw	zero,108(sp)
    9afc:	aac0010c 	andi	r11,r21,4
    9b00:	58002826 	beq	r11,zero,9ba4 <___vfiprintf_internal_r+0x67c>
    9b04:	9467c83a 	sub	r19,r18,r17
    9b08:	d811883a 	mov	r8,sp
    9b0c:	04c3340e 	bge	zero,r19,a7e0 <___vfiprintf_internal_r+0x12b8>
    9b10:	01c00404 	movi	r7,16
    9b14:	3cc31b0e 	bge	r7,r19,a784 <___vfiprintf_internal_r+0x125c>
    9b18:	00c00074 	movhi	r3,1
    9b1c:	18c4d404 	addi	r3,r3,4944
    9b20:	d9001b17 	ldw	r4,108(sp)
    9b24:	d8c02415 	stw	r3,144(sp)
    9b28:	382b883a 	mov	r21,r7
    9b2c:	050001c4 	movi	r20,7
    9b30:	dd802017 	ldw	r22,128(sp)
    9b34:	00000506 	br	9b4c <___vfiprintf_internal_r+0x624>
    9b38:	21400084 	addi	r5,r4,2
    9b3c:	42000204 	addi	r8,r8,8
    9b40:	1809883a 	mov	r4,r3
    9b44:	9cfffc04 	addi	r19,r19,-16
    9b48:	acc00d0e 	bge	r21,r19,9b80 <___vfiprintf_internal_r+0x658>
    9b4c:	10800404 	addi	r2,r2,16
    9b50:	20c00044 	addi	r3,r4,1
    9b54:	47000015 	stw	fp,0(r8)
    9b58:	45400115 	stw	r21,4(r8)
    9b5c:	d8801c15 	stw	r2,112(sp)
    9b60:	d8c01b15 	stw	r3,108(sp)
    9b64:	a0fff40e 	bge	r20,r3,9b38 <___vfiprintf_internal_r+0x610>
    9b68:	10019f1e 	bne	r2,zero,a1e8 <___vfiprintf_internal_r+0xcc0>
    9b6c:	9cfffc04 	addi	r19,r19,-16
    9b70:	01400044 	movi	r5,1
    9b74:	0009883a 	mov	r4,zero
    9b78:	d811883a 	mov	r8,sp
    9b7c:	acfff316 	blt	r21,r19,9b4c <___vfiprintf_internal_r+0x624>
    9b80:	d8c02417 	ldw	r3,144(sp)
    9b84:	14c5883a 	add	r2,r2,r19
    9b88:	44c00115 	stw	r19,4(r8)
    9b8c:	40c00015 	stw	r3,0(r8)
    9b90:	d8801c15 	stw	r2,112(sp)
    9b94:	d9401b15 	stw	r5,108(sp)
    9b98:	00c001c4 	movi	r3,7
    9b9c:	1941810e 	bge	r3,r5,a1a4 <___vfiprintf_internal_r+0xc7c>
    9ba0:	10017a1e 	bne	r2,zero,a18c <___vfiprintf_internal_r+0xc64>
    9ba4:	8c82a416 	blt	r17,r18,a638 <___vfiprintf_internal_r+0x1110>
    9ba8:	d9002317 	ldw	r4,140(sp)
    9bac:	2449883a 	add	r4,r4,r17
    9bb0:	d9002315 	stw	r4,140(sp)
    9bb4:	d8001b15 	stw	zero,108(sp)
    9bb8:	d811883a 	mov	r8,sp
    9bbc:	003e8e06 	br	95f8 <___vfiprintf_internal_r+0xd0>
    9bc0:	d9002017 	ldw	r4,128(sp)
    9bc4:	a80b883a 	mov	r5,r21
    9bc8:	0004a740 	call	4a74 <__swsetup_r>
    9bcc:	10000c1e 	bne	r2,zero,9c00 <___vfiprintf_internal_r+0x6d8>
    9bd0:	a880030b 	ldhu	r2,12(r21)
    9bd4:	00c00284 	movi	r3,10
    9bd8:	1080068c 	andi	r2,r2,26
    9bdc:	10fe741e 	bne	r2,r3,95b0 <___vfiprintf_internal_r+0x88>
    9be0:	a880038f 	ldh	r2,14(r21)
    9be4:	103e7216 	blt	r2,zero,95b0 <___vfiprintf_internal_r+0x88>
    9be8:	d9002017 	ldw	r4,128(sp)
    9bec:	d9c02217 	ldw	r7,136(sp)
    9bf0:	a80b883a 	mov	r5,r21
    9bf4:	b00d883a 	mov	r6,r22
    9bf8:	000a81c0 	call	a81c <__sbprintf>
    9bfc:	00000106 	br	9c04 <___vfiprintf_internal_r+0x6dc>
    9c00:	00bfffc4 	movi	r2,-1
    9c04:	dfc03517 	ldw	ra,212(sp)
    9c08:	df003417 	ldw	fp,208(sp)
    9c0c:	ddc03317 	ldw	r23,204(sp)
    9c10:	dd803217 	ldw	r22,200(sp)
    9c14:	dd403117 	ldw	r21,196(sp)
    9c18:	dd003017 	ldw	r20,192(sp)
    9c1c:	dcc02f17 	ldw	r19,188(sp)
    9c20:	dc802e17 	ldw	r18,184(sp)
    9c24:	dc402d17 	ldw	r17,180(sp)
    9c28:	dc002c17 	ldw	r16,176(sp)
    9c2c:	dec03604 	addi	sp,sp,216
    9c30:	f800283a 	ret
    9c34:	0006ad40 	call	6ad4 <__sinit>
    9c38:	003e4d06 	br	9570 <___vfiprintf_internal_r+0x48>
    9c3c:	8005883a 	mov	r2,r16
    9c40:	ad400114 	ori	r21,r21,4
    9c44:	80c00007 	ldb	r3,0(r16)
    9c48:	003e9506 	br	96a0 <___vfiprintf_internal_r+0x178>
    9c4c:	b006d0fa 	srli	r3,r22,3
    9c50:	6808977a 	slli	r4,r13,29
    9c54:	681ad0fa 	srli	r13,r13,3
    9c58:	b58001cc 	andi	r22,r22,7
    9c5c:	b0800c04 	addi	r2,r22,48
    9c60:	a53fffc4 	addi	r20,r20,-1
    9c64:	20ecb03a 	or	r22,r4,r3
    9c68:	a0800005 	stb	r2,0(r20)
    9c6c:	b346b03a 	or	r3,r22,r13
    9c70:	183ff61e 	bne	r3,zero,9c4c <___vfiprintf_internal_r+0x724>
    9c74:	a8c0004c 	andi	r3,r21,1
    9c78:	a009883a 	mov	r4,r20
    9c7c:	18013b26 	beq	r3,zero,a16c <___vfiprintf_internal_r+0xc44>
    9c80:	10803fcc 	andi	r2,r2,255
    9c84:	1080201c 	xori	r2,r2,128
    9c88:	10bfe004 	addi	r2,r2,-128
    9c8c:	00c00c04 	movi	r3,48
    9c90:	10ff1d26 	beq	r2,r3,9908 <___vfiprintf_internal_r+0x3e0>
    9c94:	d8801e17 	ldw	r2,120(sp)
    9c98:	a53fffc4 	addi	r20,r20,-1
    9c9c:	20ffffc5 	stb	r3,-1(r4)
    9ca0:	1527c83a 	sub	r19,r2,r20
    9ca4:	003f1a06 	br	9910 <___vfiprintf_internal_r+0x3e8>
    9ca8:	ad402014 	ori	r21,r21,128
    9cac:	8005883a 	mov	r2,r16
    9cb0:	80c00007 	ldb	r3,0(r16)
    9cb4:	003e7a06 	br	96a0 <___vfiprintf_internal_r+0x178>
    9cb8:	8005883a 	mov	r2,r16
    9cbc:	0025883a 	mov	r18,zero
    9cc0:	193ff404 	addi	r4,r3,-48
    9cc4:	10c00007 	ldb	r3,0(r2)
    9cc8:	948002a4 	muli	r18,r18,10
    9ccc:	84000044 	addi	r16,r16,1
    9cd0:	8005883a 	mov	r2,r16
    9cd4:	9125883a 	add	r18,r18,r4
    9cd8:	193ff404 	addi	r4,r3,-48
    9cdc:	313ff92e 	bgeu	r6,r4,9cc4 <___vfiprintf_internal_r+0x79c>
    9ce0:	003e7006 	br	96a4 <___vfiprintf_internal_r+0x17c>
    9ce4:	ad400414 	ori	r21,r21,16
    9ce8:	d9c01d85 	stb	r7,118(sp)
    9cec:	a880080c 	andi	r2,r21,32
    9cf0:	d8c02217 	ldw	r3,136(sp)
    9cf4:	10005a26 	beq	r2,zero,9e60 <___vfiprintf_internal_r+0x938>
    9cf8:	d9002217 	ldw	r4,136(sp)
    9cfc:	18800117 	ldw	r2,4(r3)
    9d00:	1d800017 	ldw	r22,0(r3)
    9d04:	21000204 	addi	r4,r4,8
    9d08:	d9002215 	stw	r4,136(sp)
    9d0c:	101b883a 	mov	r13,r2
    9d10:	1001f416 	blt	r2,zero,a4e4 <___vfiprintf_internal_r+0xfbc>
    9d14:	db801d83 	ldbu	r14,118(sp)
    9d18:	4827883a 	mov	r19,r9
    9d1c:	00800044 	movi	r2,1
    9d20:	b348b03a 	or	r4,r22,r13
    9d24:	003ee106 	br	98ac <___vfiprintf_internal_r+0x384>
    9d28:	80c00007 	ldb	r3,0(r16)
    9d2c:	80800044 	addi	r2,r16,1
    9d30:	1b42a326 	beq	r3,r13,a7c0 <___vfiprintf_internal_r+0x1298>
    9d34:	193ff404 	addi	r4,r3,-48
    9d38:	1021883a 	mov	r16,r2
    9d3c:	0013883a 	mov	r9,zero
    9d40:	313e5836 	bltu	r6,r4,96a4 <___vfiprintf_internal_r+0x17c>
    9d44:	80c00007 	ldb	r3,0(r16)
    9d48:	4a4002a4 	muli	r9,r9,10
    9d4c:	84000044 	addi	r16,r16,1
    9d50:	2253883a 	add	r9,r4,r9
    9d54:	193ff404 	addi	r4,r3,-48
    9d58:	313ffa2e 	bgeu	r6,r4,9d44 <___vfiprintf_internal_r+0x81c>
    9d5c:	483e510e 	bge	r9,zero,96a4 <___vfiprintf_internal_r+0x17c>
    9d60:	027fffc4 	movi	r9,-1
    9d64:	003e4f06 	br	96a4 <___vfiprintf_internal_r+0x17c>
    9d68:	d9c01d85 	stb	r7,118(sp)
    9d6c:	a880080c 	andi	r2,r21,32
    9d70:	10020826 	beq	r2,zero,a594 <___vfiprintf_internal_r+0x106c>
    9d74:	d8c02217 	ldw	r3,136(sp)
    9d78:	d9002317 	ldw	r4,140(sp)
    9d7c:	18800017 	ldw	r2,0(r3)
    9d80:	2007d7fa 	srai	r3,r4,31
    9d84:	d9002217 	ldw	r4,136(sp)
    9d88:	10c00115 	stw	r3,4(r2)
    9d8c:	21000104 	addi	r4,r4,4
    9d90:	d9002215 	stw	r4,136(sp)
    9d94:	d9002317 	ldw	r4,140(sp)
    9d98:	11000015 	stw	r4,0(r2)
    9d9c:	003e1606 	br	95f8 <___vfiprintf_internal_r+0xd0>
    9da0:	d8802217 	ldw	r2,136(sp)
    9da4:	d8c02217 	ldw	r3,136(sp)
    9da8:	15800017 	ldw	r22,0(r2)
    9dac:	13400117 	ldw	r13,4(r2)
    9db0:	18c00204 	addi	r3,r3,8
    9db4:	0005883a 	mov	r2,zero
    9db8:	d8c02215 	stw	r3,136(sp)
    9dbc:	b348b03a 	or	r4,r22,r13
    9dc0:	003eb706 	br	98a0 <___vfiprintf_internal_r+0x378>
    9dc4:	38803fcc 	andi	r2,r7,255
    9dc8:	1080201c 	xori	r2,r2,128
    9dcc:	10bfe004 	addi	r2,r2,-128
    9dd0:	1001e31e 	bne	r2,zero,a560 <___vfiprintf_internal_r+0x1038>
    9dd4:	8005883a 	mov	r2,r16
    9dd8:	01c00804 	movi	r7,32
    9ddc:	80c00007 	ldb	r3,0(r16)
    9de0:	003e2f06 	br	96a0 <___vfiprintf_internal_r+0x178>
    9de4:	ad400054 	ori	r21,r21,1
    9de8:	8005883a 	mov	r2,r16
    9dec:	80c00007 	ldb	r3,0(r16)
    9df0:	003e2b06 	br	96a0 <___vfiprintf_internal_r+0x178>
    9df4:	d8c02217 	ldw	r3,136(sp)
    9df8:	1c800017 	ldw	r18,0(r3)
    9dfc:	18c00104 	addi	r3,r3,4
    9e00:	90023816 	blt	r18,zero,a6e4 <___vfiprintf_internal_r+0x11bc>
    9e04:	d8c02215 	stw	r3,136(sp)
    9e08:	8005883a 	mov	r2,r16
    9e0c:	80c00007 	ldb	r3,0(r16)
    9e10:	003e2306 	br	96a0 <___vfiprintf_internal_r+0x178>
    9e14:	8005883a 	mov	r2,r16
    9e18:	01c00ac4 	movi	r7,43
    9e1c:	80c00007 	ldb	r3,0(r16)
    9e20:	003e1f06 	br	96a0 <___vfiprintf_internal_r+0x178>
    9e24:	d8c02217 	ldw	r3,136(sp)
    9e28:	04400044 	movi	r17,1
    9e2c:	d8001d85 	stb	zero,118(sp)
    9e30:	18800017 	ldw	r2,0(r3)
    9e34:	18c00104 	addi	r3,r3,4
    9e38:	d8c02215 	stw	r3,136(sp)
    9e3c:	d8801005 	stb	r2,64(sp)
    9e40:	8827883a 	mov	r19,r17
    9e44:	dd001004 	addi	r20,sp,64
    9e48:	0013883a 	mov	r9,zero
    9e4c:	003eb806 	br	9930 <___vfiprintf_internal_r+0x408>
    9e50:	d9c01d85 	stb	r7,118(sp)
    9e54:	a880080c 	andi	r2,r21,32
    9e58:	d8c02217 	ldw	r3,136(sp)
    9e5c:	103fa61e 	bne	r2,zero,9cf8 <___vfiprintf_internal_r+0x7d0>
    9e60:	a880040c 	andi	r2,r21,16
    9e64:	1001dd26 	beq	r2,zero,a5dc <___vfiprintf_internal_r+0x10b4>
    9e68:	1d800017 	ldw	r22,0(r3)
    9e6c:	d8802217 	ldw	r2,136(sp)
    9e70:	b01bd7fa 	srai	r13,r22,31
    9e74:	10800104 	addi	r2,r2,4
    9e78:	d8802215 	stw	r2,136(sp)
    9e7c:	6805883a 	mov	r2,r13
    9e80:	003fa306 	br	9d10 <___vfiprintf_internal_r+0x7e8>
    9e84:	00800074 	movhi	r2,1
    9e88:	10846a04 	addi	r2,r2,4520
    9e8c:	d8802615 	stw	r2,152(sp)
    9e90:	d9c01d85 	stb	r7,118(sp)
    9e94:	a880080c 	andi	r2,r21,32
    9e98:	10004726 	beq	r2,zero,9fb8 <___vfiprintf_internal_r+0xa90>
    9e9c:	d9002217 	ldw	r4,136(sp)
    9ea0:	25800017 	ldw	r22,0(r4)
    9ea4:	23400117 	ldw	r13,4(r4)
    9ea8:	21000204 	addi	r4,r4,8
    9eac:	d9002215 	stw	r4,136(sp)
    9eb0:	a880004c 	andi	r2,r21,1
    9eb4:	10014e26 	beq	r2,zero,a3f0 <___vfiprintf_internal_r+0xec8>
    9eb8:	b348b03a 	or	r4,r22,r13
    9ebc:	20019c26 	beq	r4,zero,a530 <___vfiprintf_internal_r+0x1008>
    9ec0:	00800c04 	movi	r2,48
    9ec4:	d8801d05 	stb	r2,116(sp)
    9ec8:	d8c01d45 	stb	r3,117(sp)
    9ecc:	ad400094 	ori	r21,r21,2
    9ed0:	00800084 	movi	r2,2
    9ed4:	003e7206 	br	98a0 <___vfiprintf_internal_r+0x378>
    9ed8:	d8c02217 	ldw	r3,136(sp)
    9edc:	d8001d85 	stb	zero,118(sp)
    9ee0:	1d000017 	ldw	r20,0(r3)
    9ee4:	1d800104 	addi	r22,r3,4
    9ee8:	a0021c26 	beq	r20,zero,a75c <___vfiprintf_internal_r+0x1234>
    9eec:	a009883a 	mov	r4,r20
    9ef0:	48020016 	blt	r9,zero,a6f4 <___vfiprintf_internal_r+0x11cc>
    9ef4:	480d883a 	mov	r6,r9
    9ef8:	000b883a 	mov	r5,zero
    9efc:	da002a15 	stw	r8,168(sp)
    9f00:	da402b15 	stw	r9,172(sp)
    9f04:	00078180 	call	7818 <memchr>
    9f08:	da002a17 	ldw	r8,168(sp)
    9f0c:	da402b17 	ldw	r9,172(sp)
    9f10:	10022226 	beq	r2,zero,a79c <___vfiprintf_internal_r+0x1274>
    9f14:	1527c83a 	sub	r19,r2,r20
    9f18:	4cc1c916 	blt	r9,r19,a640 <___vfiprintf_internal_r+0x1118>
    9f1c:	db801d83 	ldbu	r14,118(sp)
    9f20:	dd802215 	stw	r22,136(sp)
    9f24:	0013883a 	mov	r9,zero
    9f28:	003e7906 	br	9910 <___vfiprintf_internal_r+0x3e8>
    9f2c:	ad401014 	ori	r21,r21,64
    9f30:	8005883a 	mov	r2,r16
    9f34:	80c00007 	ldb	r3,0(r16)
    9f38:	003dd906 	br	96a0 <___vfiprintf_internal_r+0x178>
    9f3c:	80c00007 	ldb	r3,0(r16)
    9f40:	8005883a 	mov	r2,r16
    9f44:	1b01e326 	beq	r3,r12,a6d4 <___vfiprintf_internal_r+0x11ac>
    9f48:	ad400414 	ori	r21,r21,16
    9f4c:	003dd406 	br	96a0 <___vfiprintf_internal_r+0x178>
    9f50:	d9002217 	ldw	r4,136(sp)
    9f54:	00800c04 	movi	r2,48
    9f58:	d8801d05 	stb	r2,116(sp)
    9f5c:	25800017 	ldw	r22,0(r4)
    9f60:	00801e04 	movi	r2,120
    9f64:	d8801d45 	stb	r2,117(sp)
    9f68:	00800074 	movhi	r2,1
    9f6c:	21000104 	addi	r4,r4,4
    9f70:	10846f04 	addi	r2,r2,4540
    9f74:	d9002215 	stw	r4,136(sp)
    9f78:	d8802615 	stw	r2,152(sp)
    9f7c:	001b883a 	mov	r13,zero
    9f80:	ad400094 	ori	r21,r21,2
    9f84:	00800084 	movi	r2,2
    9f88:	b009883a 	mov	r4,r22
    9f8c:	003e4406 	br	98a0 <___vfiprintf_internal_r+0x378>
    9f90:	ad400814 	ori	r21,r21,32
    9f94:	8005883a 	mov	r2,r16
    9f98:	80c00007 	ldb	r3,0(r16)
    9f9c:	003dc006 	br	96a0 <___vfiprintf_internal_r+0x178>
    9fa0:	00800074 	movhi	r2,1
    9fa4:	10846f04 	addi	r2,r2,4540
    9fa8:	d8802615 	stw	r2,152(sp)
    9fac:	d9c01d85 	stb	r7,118(sp)
    9fb0:	a880080c 	andi	r2,r21,32
    9fb4:	103fb91e 	bne	r2,zero,9e9c <___vfiprintf_internal_r+0x974>
    9fb8:	a880040c 	andi	r2,r21,16
    9fbc:	10010f1e 	bne	r2,zero,a3fc <___vfiprintf_internal_r+0xed4>
    9fc0:	a880100c 	andi	r2,r21,64
    9fc4:	10010d26 	beq	r2,zero,a3fc <___vfiprintf_internal_r+0xed4>
    9fc8:	d9002217 	ldw	r4,136(sp)
    9fcc:	001b883a 	mov	r13,zero
    9fd0:	2580000b 	ldhu	r22,0(r4)
    9fd4:	21000104 	addi	r4,r4,4
    9fd8:	d9002215 	stw	r4,136(sp)
    9fdc:	003fb406 	br	9eb0 <___vfiprintf_internal_r+0x988>
    9fe0:	d9002217 	ldw	r4,136(sp)
    9fe4:	00800044 	movi	r2,1
    9fe8:	25800017 	ldw	r22,0(r4)
    9fec:	23400117 	ldw	r13,4(r4)
    9ff0:	21000204 	addi	r4,r4,8
    9ff4:	d9002215 	stw	r4,136(sp)
    9ff8:	b348b03a 	or	r4,r22,r13
    9ffc:	003e2806 	br	98a0 <___vfiprintf_internal_r+0x378>
    a000:	d9c01d85 	stb	r7,118(sp)
    a004:	1801ab26 	beq	r3,zero,a6b4 <___vfiprintf_internal_r+0x118c>
    a008:	04400044 	movi	r17,1
    a00c:	d8c01005 	stb	r3,64(sp)
    a010:	d8001d85 	stb	zero,118(sp)
    a014:	8827883a 	mov	r19,r17
    a018:	dd001004 	addi	r20,sp,64
    a01c:	003f8a06 	br	9e48 <___vfiprintf_internal_r+0x920>
    a020:	d9002017 	ldw	r4,128(sp)
    a024:	d9402117 	ldw	r5,132(sp)
    a028:	d9801a04 	addi	r6,sp,104
    a02c:	d9c02b15 	stw	r7,172(sp)
    a030:	dbc02a15 	stw	r15,168(sp)
    a034:	00094140 	call	9414 <__sprint_r.part.0>
    a038:	d9c02b17 	ldw	r7,172(sp)
    a03c:	dbc02a17 	ldw	r15,168(sp)
    a040:	1000631e 	bne	r2,zero,a1d0 <___vfiprintf_internal_r+0xca8>
    a044:	d9801b17 	ldw	r6,108(sp)
    a048:	d8801c17 	ldw	r2,112(sp)
    a04c:	d811883a 	mov	r8,sp
    a050:	31400044 	addi	r5,r6,1
    a054:	003e4d06 	br	998c <___vfiprintf_internal_r+0x464>
    a058:	d9401b17 	ldw	r5,108(sp)
    a05c:	d8801c17 	ldw	r2,112(sp)
    a060:	29000044 	addi	r4,r5,1
    a064:	d8c01d87 	ldb	r3,118(sp)
    a068:	183e6726 	beq	r3,zero,9a08 <___vfiprintf_internal_r+0x4e0>
    a06c:	00c00044 	movi	r3,1
    a070:	d9401d84 	addi	r5,sp,118
    a074:	10c5883a 	add	r2,r2,r3
    a078:	41400015 	stw	r5,0(r8)
    a07c:	40c00115 	stw	r3,4(r8)
    a080:	d8801c15 	stw	r2,112(sp)
    a084:	d9001b15 	stw	r4,108(sp)
    a088:	014001c4 	movi	r5,7
    a08c:	2900ab16 	blt	r5,r4,a33c <___vfiprintf_internal_r+0xe14>
    a090:	200b883a 	mov	r5,r4
    a094:	42000204 	addi	r8,r8,8
    a098:	21000044 	addi	r4,r4,1
    a09c:	003e5a06 	br	9a08 <___vfiprintf_internal_r+0x4e0>
    a0a0:	d9002017 	ldw	r4,128(sp)
    a0a4:	d9402117 	ldw	r5,132(sp)
    a0a8:	d9801a04 	addi	r6,sp,104
    a0ac:	d9c02b15 	stw	r7,172(sp)
    a0b0:	db402a15 	stw	r13,168(sp)
    a0b4:	00094140 	call	9414 <__sprint_r.part.0>
    a0b8:	d9c02b17 	ldw	r7,172(sp)
    a0bc:	db402a17 	ldw	r13,168(sp)
    a0c0:	1000431e 	bne	r2,zero,a1d0 <___vfiprintf_internal_r+0xca8>
    a0c4:	d9401b17 	ldw	r5,108(sp)
    a0c8:	d8801c17 	ldw	r2,112(sp)
    a0cc:	d811883a 	mov	r8,sp
    a0d0:	29000044 	addi	r4,r5,1
    a0d4:	003e6706 	br	9a74 <___vfiprintf_internal_r+0x54c>
    a0d8:	10803fcc 	andi	r2,r2,255
    a0dc:	00c00044 	movi	r3,1
    a0e0:	10fdfa1e 	bne	r2,r3,98cc <___vfiprintf_internal_r+0x3a4>
    a0e4:	6800021e 	bne	r13,zero,a0f0 <___vfiprintf_internal_r+0xbc8>
    a0e8:	00800244 	movi	r2,9
    a0ec:	1580222e 	bgeu	r2,r22,a178 <___vfiprintf_internal_r+0xc50>
    a0f0:	dc802415 	stw	r18,144(sp)
    a0f4:	dc002515 	stw	r16,148(sp)
    a0f8:	dc401a04 	addi	r17,sp,104
    a0fc:	b021883a 	mov	r16,r22
    a100:	4827883a 	mov	r19,r9
    a104:	4029883a 	mov	r20,r8
    a108:	702d883a 	mov	r22,r14
    a10c:	6825883a 	mov	r18,r13
    a110:	8009883a 	mov	r4,r16
    a114:	900b883a 	mov	r5,r18
    a118:	01800284 	movi	r6,10
    a11c:	000f883a 	mov	r7,zero
    a120:	000b7900 	call	b790 <__umoddi3>
    a124:	10800c04 	addi	r2,r2,48
    a128:	8c7fffc4 	addi	r17,r17,-1
    a12c:	8009883a 	mov	r4,r16
    a130:	900b883a 	mov	r5,r18
    a134:	01800284 	movi	r6,10
    a138:	000f883a 	mov	r7,zero
    a13c:	88800005 	stb	r2,0(r17)
    a140:	000b1d00 	call	b1d0 <__udivdi3>
    a144:	1021883a 	mov	r16,r2
    a148:	10c4b03a 	or	r2,r2,r3
    a14c:	1825883a 	mov	r18,r3
    a150:	103fef1e 	bne	r2,zero,a110 <___vfiprintf_internal_r+0xbe8>
    a154:	dc802417 	ldw	r18,144(sp)
    a158:	dc002517 	ldw	r16,148(sp)
    a15c:	a011883a 	mov	r8,r20
    a160:	9813883a 	mov	r9,r19
    a164:	b01d883a 	mov	r14,r22
    a168:	8829883a 	mov	r20,r17
    a16c:	d8c01e17 	ldw	r3,120(sp)
    a170:	1d27c83a 	sub	r19,r3,r20
    a174:	003de606 	br	9910 <___vfiprintf_internal_r+0x3e8>
    a178:	b5800c04 	addi	r22,r22,48
    a17c:	dd8019c5 	stb	r22,103(sp)
    a180:	dcc02717 	ldw	r19,156(sp)
    a184:	dd0019c4 	addi	r20,sp,103
    a188:	003de106 	br	9910 <___vfiprintf_internal_r+0x3e8>
    a18c:	d9002017 	ldw	r4,128(sp)
    a190:	d9402117 	ldw	r5,132(sp)
    a194:	d9801a04 	addi	r6,sp,104
    a198:	00094140 	call	9414 <__sprint_r.part.0>
    a19c:	10000c1e 	bne	r2,zero,a1d0 <___vfiprintf_internal_r+0xca8>
    a1a0:	d8801c17 	ldw	r2,112(sp)
    a1a4:	8c80010e 	bge	r17,r18,a1ac <___vfiprintf_internal_r+0xc84>
    a1a8:	9023883a 	mov	r17,r18
    a1ac:	d8c02317 	ldw	r3,140(sp)
    a1b0:	1c47883a 	add	r3,r3,r17
    a1b4:	d8c02315 	stw	r3,140(sp)
    a1b8:	103e7e26 	beq	r2,zero,9bb4 <___vfiprintf_internal_r+0x68c>
    a1bc:	d9002017 	ldw	r4,128(sp)
    a1c0:	d9402117 	ldw	r5,132(sp)
    a1c4:	d9801a04 	addi	r6,sp,104
    a1c8:	00094140 	call	9414 <__sprint_r.part.0>
    a1cc:	103e7926 	beq	r2,zero,9bb4 <___vfiprintf_internal_r+0x68c>
    a1d0:	dd402117 	ldw	r21,132(sp)
    a1d4:	a880030b 	ldhu	r2,12(r21)
    a1d8:	1080100c 	andi	r2,r2,64
    a1dc:	103e881e 	bne	r2,zero,9c00 <___vfiprintf_internal_r+0x6d8>
    a1e0:	d8802317 	ldw	r2,140(sp)
    a1e4:	003e8706 	br	9c04 <___vfiprintf_internal_r+0x6dc>
    a1e8:	d9402117 	ldw	r5,132(sp)
    a1ec:	b009883a 	mov	r4,r22
    a1f0:	d9801a04 	addi	r6,sp,104
    a1f4:	00094140 	call	9414 <__sprint_r.part.0>
    a1f8:	103ff51e 	bne	r2,zero,a1d0 <___vfiprintf_internal_r+0xca8>
    a1fc:	d9001b17 	ldw	r4,108(sp)
    a200:	d8801c17 	ldw	r2,112(sp)
    a204:	d811883a 	mov	r8,sp
    a208:	21400044 	addi	r5,r4,1
    a20c:	003e4d06 	br	9b44 <___vfiprintf_internal_r+0x61c>
    a210:	1000aa1e 	bne	r2,zero,a4bc <___vfiprintf_internal_r+0xf94>
    a214:	00c00044 	movi	r3,1
    a218:	9805883a 	mov	r2,r19
    a21c:	dd000015 	stw	r20,0(sp)
    a220:	dcc00115 	stw	r19,4(sp)
    a224:	dcc01c15 	stw	r19,112(sp)
    a228:	d8c01b15 	stw	r3,108(sp)
    a22c:	d811883a 	mov	r8,sp
    a230:	42000204 	addi	r8,r8,8
    a234:	aac0010c 	andi	r11,r21,4
    a238:	583fda26 	beq	r11,zero,a1a4 <___vfiprintf_internal_r+0xc7c>
    a23c:	9467c83a 	sub	r19,r18,r17
    a240:	04fe3316 	blt	zero,r19,9b10 <___vfiprintf_internal_r+0x5e8>
    a244:	003fd706 	br	a1a4 <___vfiprintf_internal_r+0xc7c>
    a248:	946dc83a 	sub	r22,r18,r17
    a24c:	05bdfd0e 	bge	zero,r22,9a44 <___vfiprintf_internal_r+0x51c>
    a250:	00c00074 	movhi	r3,1
    a254:	18c4d004 	addi	r3,r3,4928
    a258:	01c00404 	movi	r7,16
    a25c:	d8c02415 	stw	r3,144(sp)
    a260:	3d81530e 	bge	r7,r22,a7b0 <___vfiprintf_internal_r+0x1288>
    a264:	8007883a 	mov	r3,r16
    a268:	034001c4 	movi	r13,7
    a26c:	b021883a 	mov	r16,r22
    a270:	da402515 	stw	r9,148(sp)
    a274:	182d883a 	mov	r22,r3
    a278:	00000506 	br	a290 <___vfiprintf_internal_r+0xd68>
    a27c:	29800084 	addi	r6,r5,2
    a280:	42000204 	addi	r8,r8,8
    a284:	180b883a 	mov	r5,r3
    a288:	843ffc04 	addi	r16,r16,-16
    a28c:	3c000d0e 	bge	r7,r16,a2c4 <___vfiprintf_internal_r+0xd9c>
    a290:	10800404 	addi	r2,r2,16
    a294:	28c00044 	addi	r3,r5,1
    a298:	45c00015 	stw	r23,0(r8)
    a29c:	41c00115 	stw	r7,4(r8)
    a2a0:	d8801c15 	stw	r2,112(sp)
    a2a4:	d8c01b15 	stw	r3,108(sp)
    a2a8:	68fff40e 	bge	r13,r3,a27c <___vfiprintf_internal_r+0xd54>
    a2ac:	1000151e 	bne	r2,zero,a304 <___vfiprintf_internal_r+0xddc>
    a2b0:	843ffc04 	addi	r16,r16,-16
    a2b4:	01800044 	movi	r6,1
    a2b8:	000b883a 	mov	r5,zero
    a2bc:	d811883a 	mov	r8,sp
    a2c0:	3c3ff316 	blt	r7,r16,a290 <___vfiprintf_internal_r+0xd68>
    a2c4:	da402517 	ldw	r9,148(sp)
    a2c8:	b007883a 	mov	r3,r22
    a2cc:	802d883a 	mov	r22,r16
    a2d0:	1821883a 	mov	r16,r3
    a2d4:	d8c02417 	ldw	r3,144(sp)
    a2d8:	1585883a 	add	r2,r2,r22
    a2dc:	45800115 	stw	r22,4(r8)
    a2e0:	40c00015 	stw	r3,0(r8)
    a2e4:	d8801c15 	stw	r2,112(sp)
    a2e8:	d9801b15 	stw	r6,108(sp)
    a2ec:	00c001c4 	movi	r3,7
    a2f0:	19806d16 	blt	r3,r6,a4a8 <___vfiprintf_internal_r+0xf80>
    a2f4:	42000204 	addi	r8,r8,8
    a2f8:	31000044 	addi	r4,r6,1
    a2fc:	300b883a 	mov	r5,r6
    a300:	003dd006 	br	9a44 <___vfiprintf_internal_r+0x51c>
    a304:	d9002017 	ldw	r4,128(sp)
    a308:	d9402117 	ldw	r5,132(sp)
    a30c:	d9801a04 	addi	r6,sp,104
    a310:	d9c02b15 	stw	r7,172(sp)
    a314:	db402a15 	stw	r13,168(sp)
    a318:	00094140 	call	9414 <__sprint_r.part.0>
    a31c:	d9c02b17 	ldw	r7,172(sp)
    a320:	db402a17 	ldw	r13,168(sp)
    a324:	103faa1e 	bne	r2,zero,a1d0 <___vfiprintf_internal_r+0xca8>
    a328:	d9401b17 	ldw	r5,108(sp)
    a32c:	d8801c17 	ldw	r2,112(sp)
    a330:	d811883a 	mov	r8,sp
    a334:	29800044 	addi	r6,r5,1
    a338:	003fd306 	br	a288 <___vfiprintf_internal_r+0xd60>
    a33c:	1000401e 	bne	r2,zero,a440 <___vfiprintf_internal_r+0xf18>
    a340:	68003b26 	beq	r13,zero,a430 <___vfiprintf_internal_r+0xf08>
    a344:	d9001d04 	addi	r4,sp,116
    a348:	00800084 	movi	r2,2
    a34c:	d9000015 	stw	r4,0(sp)
    a350:	d8800115 	stw	r2,4(sp)
    a354:	1809883a 	mov	r4,r3
    a358:	d811883a 	mov	r8,sp
    a35c:	003db406 	br	9a30 <___vfiprintf_internal_r+0x508>
    a360:	1000451e 	bne	r2,zero,a478 <___vfiprintf_internal_r+0xf50>
    a364:	01000044 	movi	r4,1
    a368:	000b883a 	mov	r5,zero
    a36c:	d811883a 	mov	r8,sp
    a370:	003db206 	br	9a3c <___vfiprintf_internal_r+0x514>
    a374:	10803fcc 	andi	r2,r2,255
    a378:	1000071e 	bne	r2,zero,a398 <___vfiprintf_internal_r+0xe70>
    a37c:	a880004c 	andi	r2,r21,1
    a380:	10000526 	beq	r2,zero,a398 <___vfiprintf_internal_r+0xe70>
    a384:	00800c04 	movi	r2,48
    a388:	d88019c5 	stb	r2,103(sp)
    a38c:	dcc02717 	ldw	r19,156(sp)
    a390:	dd0019c4 	addi	r20,sp,103
    a394:	003d5e06 	br	9910 <___vfiprintf_internal_r+0x3e8>
    a398:	dd001a04 	addi	r20,sp,104
    a39c:	003d5c06 	br	9910 <___vfiprintf_internal_r+0x3e8>
    a3a0:	1000971e 	bne	r2,zero,a600 <___vfiprintf_internal_r+0x10d8>
    a3a4:	d8c01d87 	ldb	r3,118(sp)
    a3a8:	18005826 	beq	r3,zero,a50c <___vfiprintf_internal_r+0xfe4>
    a3ac:	00800044 	movi	r2,1
    a3b0:	d8c01d84 	addi	r3,sp,118
    a3b4:	1009883a 	mov	r4,r2
    a3b8:	d8c00015 	stw	r3,0(sp)
    a3bc:	d8800115 	stw	r2,4(sp)
    a3c0:	d811883a 	mov	r8,sp
    a3c4:	003f3206 	br	a090 <___vfiprintf_internal_r+0xb68>
    a3c8:	8023883a 	mov	r17,r16
    a3cc:	003ca706 	br	966c <___vfiprintf_internal_r+0x144>
    a3d0:	d9002017 	ldw	r4,128(sp)
    a3d4:	d9402117 	ldw	r5,132(sp)
    a3d8:	d9801a04 	addi	r6,sp,104
    a3dc:	00094140 	call	9414 <__sprint_r.part.0>
    a3e0:	103f7b1e 	bne	r2,zero,a1d0 <___vfiprintf_internal_r+0xca8>
    a3e4:	d8801c17 	ldw	r2,112(sp)
    a3e8:	d811883a 	mov	r8,sp
    a3ec:	003f9106 	br	a234 <___vfiprintf_internal_r+0xd0c>
    a3f0:	00800084 	movi	r2,2
    a3f4:	b348b03a 	or	r4,r22,r13
    a3f8:	003d2906 	br	98a0 <___vfiprintf_internal_r+0x378>
    a3fc:	d8802217 	ldw	r2,136(sp)
    a400:	001b883a 	mov	r13,zero
    a404:	15800017 	ldw	r22,0(r2)
    a408:	10800104 	addi	r2,r2,4
    a40c:	d8802215 	stw	r2,136(sp)
    a410:	003ea706 	br	9eb0 <___vfiprintf_internal_r+0x988>
    a414:	d9002017 	ldw	r4,128(sp)
    a418:	d9402117 	ldw	r5,132(sp)
    a41c:	d9801a04 	addi	r6,sp,104
    a420:	00094140 	call	9414 <__sprint_r.part.0>
    a424:	103f6a1e 	bne	r2,zero,a1d0 <___vfiprintf_internal_r+0xca8>
    a428:	d811883a 	mov	r8,sp
    a42c:	003cff06 	br	982c <___vfiprintf_internal_r+0x304>
    a430:	000b883a 	mov	r5,zero
    a434:	1809883a 	mov	r4,r3
    a438:	d811883a 	mov	r8,sp
    a43c:	003d7f06 	br	9a3c <___vfiprintf_internal_r+0x514>
    a440:	d9002017 	ldw	r4,128(sp)
    a444:	d9402117 	ldw	r5,132(sp)
    a448:	d9801a04 	addi	r6,sp,104
    a44c:	da402b15 	stw	r9,172(sp)
    a450:	db402a15 	stw	r13,168(sp)
    a454:	00094140 	call	9414 <__sprint_r.part.0>
    a458:	da402b17 	ldw	r9,172(sp)
    a45c:	db402a17 	ldw	r13,168(sp)
    a460:	103f5b1e 	bne	r2,zero,a1d0 <___vfiprintf_internal_r+0xca8>
    a464:	d9401b17 	ldw	r5,108(sp)
    a468:	d8801c17 	ldw	r2,112(sp)
    a46c:	d811883a 	mov	r8,sp
    a470:	29000044 	addi	r4,r5,1
    a474:	003d6406 	br	9a08 <___vfiprintf_internal_r+0x4e0>
    a478:	d9002017 	ldw	r4,128(sp)
    a47c:	d9402117 	ldw	r5,132(sp)
    a480:	d9801a04 	addi	r6,sp,104
    a484:	da402b15 	stw	r9,172(sp)
    a488:	00094140 	call	9414 <__sprint_r.part.0>
    a48c:	da402b17 	ldw	r9,172(sp)
    a490:	103f4f1e 	bne	r2,zero,a1d0 <___vfiprintf_internal_r+0xca8>
    a494:	d9401b17 	ldw	r5,108(sp)
    a498:	d8801c17 	ldw	r2,112(sp)
    a49c:	d811883a 	mov	r8,sp
    a4a0:	29000044 	addi	r4,r5,1
    a4a4:	003d6506 	br	9a3c <___vfiprintf_internal_r+0x514>
    a4a8:	10009a1e 	bne	r2,zero,a714 <___vfiprintf_internal_r+0x11ec>
    a4ac:	01000044 	movi	r4,1
    a4b0:	000b883a 	mov	r5,zero
    a4b4:	d811883a 	mov	r8,sp
    a4b8:	003d6206 	br	9a44 <___vfiprintf_internal_r+0x51c>
    a4bc:	d9002017 	ldw	r4,128(sp)
    a4c0:	d9402117 	ldw	r5,132(sp)
    a4c4:	d9801a04 	addi	r6,sp,104
    a4c8:	00094140 	call	9414 <__sprint_r.part.0>
    a4cc:	103f401e 	bne	r2,zero,a1d0 <___vfiprintf_internal_r+0xca8>
    a4d0:	d9001b17 	ldw	r4,108(sp)
    a4d4:	d8801c17 	ldw	r2,112(sp)
    a4d8:	d811883a 	mov	r8,sp
    a4dc:	21000044 	addi	r4,r4,1
    a4e0:	003d7d06 	br	9ad8 <___vfiprintf_internal_r+0x5b0>
    a4e4:	05adc83a 	sub	r22,zero,r22
    a4e8:	b004c03a 	cmpne	r2,r22,zero
    a4ec:	035bc83a 	sub	r13,zero,r13
    a4f0:	689bc83a 	sub	r13,r13,r2
    a4f4:	03800b44 	movi	r14,45
    a4f8:	db801d85 	stb	r14,118(sp)
    a4fc:	4827883a 	mov	r19,r9
    a500:	00800044 	movi	r2,1
    a504:	b348b03a 	or	r4,r22,r13
    a508:	003ce806 	br	98ac <___vfiprintf_internal_r+0x384>
    a50c:	000b883a 	mov	r5,zero
    a510:	01000044 	movi	r4,1
    a514:	d811883a 	mov	r8,sp
    a518:	683d4826 	beq	r13,zero,9a3c <___vfiprintf_internal_r+0x514>
    a51c:	00800084 	movi	r2,2
    a520:	d8c01d04 	addi	r3,sp,116
    a524:	d8c00015 	stw	r3,0(sp)
    a528:	d8800115 	stw	r2,4(sp)
    a52c:	003d4006 	br	9a30 <___vfiprintf_internal_r+0x508>
    a530:	00800084 	movi	r2,2
    a534:	003cda06 	br	98a0 <___vfiprintf_internal_r+0x378>
    a538:	a880100c 	andi	r2,r21,64
    a53c:	10004226 	beq	r2,zero,a648 <___vfiprintf_internal_r+0x1120>
    a540:	d8802217 	ldw	r2,136(sp)
    a544:	001b883a 	mov	r13,zero
    a548:	1580000b 	ldhu	r22,0(r2)
    a54c:	10800104 	addi	r2,r2,4
    a550:	d8802215 	stw	r2,136(sp)
    a554:	b009883a 	mov	r4,r22
    a558:	0005883a 	mov	r2,zero
    a55c:	003cd006 	br	98a0 <___vfiprintf_internal_r+0x378>
    a560:	80c00007 	ldb	r3,0(r16)
    a564:	8005883a 	mov	r2,r16
    a568:	003c4d06 	br	96a0 <___vfiprintf_internal_r+0x178>
    a56c:	a880100c 	andi	r2,r21,64
    a570:	10004426 	beq	r2,zero,a684 <___vfiprintf_internal_r+0x115c>
    a574:	d8c02217 	ldw	r3,136(sp)
    a578:	001b883a 	mov	r13,zero
    a57c:	00800044 	movi	r2,1
    a580:	1d80000b 	ldhu	r22,0(r3)
    a584:	18c00104 	addi	r3,r3,4
    a588:	d8c02215 	stw	r3,136(sp)
    a58c:	b009883a 	mov	r4,r22
    a590:	003cc306 	br	98a0 <___vfiprintf_internal_r+0x378>
    a594:	a880040c 	andi	r2,r21,16
    a598:	1000091e 	bne	r2,zero,a5c0 <___vfiprintf_internal_r+0x1098>
    a59c:	aac0100c 	andi	r11,r21,64
    a5a0:	58000726 	beq	r11,zero,a5c0 <___vfiprintf_internal_r+0x1098>
    a5a4:	d8c02217 	ldw	r3,136(sp)
    a5a8:	d9002317 	ldw	r4,140(sp)
    a5ac:	18800017 	ldw	r2,0(r3)
    a5b0:	18c00104 	addi	r3,r3,4
    a5b4:	d8c02215 	stw	r3,136(sp)
    a5b8:	1100000d 	sth	r4,0(r2)
    a5bc:	003c0e06 	br	95f8 <___vfiprintf_internal_r+0xd0>
    a5c0:	d8c02217 	ldw	r3,136(sp)
    a5c4:	d9002317 	ldw	r4,140(sp)
    a5c8:	18800017 	ldw	r2,0(r3)
    a5cc:	18c00104 	addi	r3,r3,4
    a5d0:	d8c02215 	stw	r3,136(sp)
    a5d4:	11000015 	stw	r4,0(r2)
    a5d8:	003c0706 	br	95f8 <___vfiprintf_internal_r+0xd0>
    a5dc:	a880100c 	andi	r2,r21,64
    a5e0:	10002126 	beq	r2,zero,a668 <___vfiprintf_internal_r+0x1140>
    a5e4:	1d80000f 	ldh	r22,0(r3)
    a5e8:	d8c02217 	ldw	r3,136(sp)
    a5ec:	b01bd7fa 	srai	r13,r22,31
    a5f0:	18c00104 	addi	r3,r3,4
    a5f4:	d8c02215 	stw	r3,136(sp)
    a5f8:	6805883a 	mov	r2,r13
    a5fc:	003dc406 	br	9d10 <___vfiprintf_internal_r+0x7e8>
    a600:	d9002017 	ldw	r4,128(sp)
    a604:	d9402117 	ldw	r5,132(sp)
    a608:	d9801a04 	addi	r6,sp,104
    a60c:	da402b15 	stw	r9,172(sp)
    a610:	db402a15 	stw	r13,168(sp)
    a614:	00094140 	call	9414 <__sprint_r.part.0>
    a618:	da402b17 	ldw	r9,172(sp)
    a61c:	db402a17 	ldw	r13,168(sp)
    a620:	103eeb1e 	bne	r2,zero,a1d0 <___vfiprintf_internal_r+0xca8>
    a624:	d9401b17 	ldw	r5,108(sp)
    a628:	d8801c17 	ldw	r2,112(sp)
    a62c:	d811883a 	mov	r8,sp
    a630:	29000044 	addi	r4,r5,1
    a634:	003e8b06 	br	a064 <___vfiprintf_internal_r+0xb3c>
    a638:	9023883a 	mov	r17,r18
    a63c:	003d5a06 	br	9ba8 <___vfiprintf_internal_r+0x680>
    a640:	4827883a 	mov	r19,r9
    a644:	003e3506 	br	9f1c <___vfiprintf_internal_r+0x9f4>
    a648:	d8c02217 	ldw	r3,136(sp)
    a64c:	001b883a 	mov	r13,zero
    a650:	0005883a 	mov	r2,zero
    a654:	1d800017 	ldw	r22,0(r3)
    a658:	18c00104 	addi	r3,r3,4
    a65c:	d8c02215 	stw	r3,136(sp)
    a660:	b009883a 	mov	r4,r22
    a664:	003c8e06 	br	98a0 <___vfiprintf_internal_r+0x378>
    a668:	1d800017 	ldw	r22,0(r3)
    a66c:	d9002217 	ldw	r4,136(sp)
    a670:	b01bd7fa 	srai	r13,r22,31
    a674:	21000104 	addi	r4,r4,4
    a678:	d9002215 	stw	r4,136(sp)
    a67c:	6805883a 	mov	r2,r13
    a680:	003da306 	br	9d10 <___vfiprintf_internal_r+0x7e8>
    a684:	d9002217 	ldw	r4,136(sp)
    a688:	001b883a 	mov	r13,zero
    a68c:	00800044 	movi	r2,1
    a690:	25800017 	ldw	r22,0(r4)
    a694:	21000104 	addi	r4,r4,4
    a698:	d9002215 	stw	r4,136(sp)
    a69c:	b009883a 	mov	r4,r22
    a6a0:	003c7f06 	br	98a0 <___vfiprintf_internal_r+0x378>
    a6a4:	00c00074 	movhi	r3,1
    a6a8:	18c4d004 	addi	r3,r3,4928
    a6ac:	d8c02415 	stw	r3,144(sp)
    a6b0:	003cff06 	br	9ab0 <___vfiprintf_internal_r+0x588>
    a6b4:	d8801c17 	ldw	r2,112(sp)
    a6b8:	dd402117 	ldw	r21,132(sp)
    a6bc:	103ec526 	beq	r2,zero,a1d4 <___vfiprintf_internal_r+0xcac>
    a6c0:	d9002017 	ldw	r4,128(sp)
    a6c4:	a80b883a 	mov	r5,r21
    a6c8:	d9801a04 	addi	r6,sp,104
    a6cc:	00094140 	call	9414 <__sprint_r.part.0>
    a6d0:	003ec006 	br	a1d4 <___vfiprintf_internal_r+0xcac>
    a6d4:	80800044 	addi	r2,r16,1
    a6d8:	ad400814 	ori	r21,r21,32
    a6dc:	80c00047 	ldb	r3,1(r16)
    a6e0:	003bef06 	br	96a0 <___vfiprintf_internal_r+0x178>
    a6e4:	04a5c83a 	sub	r18,zero,r18
    a6e8:	8005883a 	mov	r2,r16
    a6ec:	d8c02215 	stw	r3,136(sp)
    a6f0:	003d5306 	br	9c40 <___vfiprintf_internal_r+0x718>
    a6f4:	da002a15 	stw	r8,168(sp)
    a6f8:	00029ac0 	call	29ac <strlen>
    a6fc:	1027883a 	mov	r19,r2
    a700:	db801d83 	ldbu	r14,118(sp)
    a704:	dd802215 	stw	r22,136(sp)
    a708:	0013883a 	mov	r9,zero
    a70c:	da002a17 	ldw	r8,168(sp)
    a710:	003c7f06 	br	9910 <___vfiprintf_internal_r+0x3e8>
    a714:	d9002017 	ldw	r4,128(sp)
    a718:	d9402117 	ldw	r5,132(sp)
    a71c:	d9801a04 	addi	r6,sp,104
    a720:	da402b15 	stw	r9,172(sp)
    a724:	00094140 	call	9414 <__sprint_r.part.0>
    a728:	da402b17 	ldw	r9,172(sp)
    a72c:	103ea81e 	bne	r2,zero,a1d0 <___vfiprintf_internal_r+0xca8>
    a730:	d9401b17 	ldw	r5,108(sp)
    a734:	d8801c17 	ldw	r2,112(sp)
    a738:	d811883a 	mov	r8,sp
    a73c:	29000044 	addi	r4,r5,1
    a740:	003cc006 	br	9a44 <___vfiprintf_internal_r+0x51c>
    a744:	d9401b17 	ldw	r5,108(sp)
    a748:	01000074 	movhi	r4,1
    a74c:	2104d404 	addi	r4,r4,4944
    a750:	d9002415 	stw	r4,144(sp)
    a754:	29400044 	addi	r5,r5,1
    a758:	003c9f06 	br	99d8 <___vfiprintf_internal_r+0x4b0>
    a75c:	00800184 	movi	r2,6
    a760:	1240012e 	bgeu	r2,r9,a768 <___vfiprintf_internal_r+0x1240>
    a764:	1013883a 	mov	r9,r2
    a768:	4827883a 	mov	r19,r9
    a76c:	4823883a 	mov	r17,r9
    a770:	48001116 	blt	r9,zero,a7b8 <___vfiprintf_internal_r+0x1290>
    a774:	05000074 	movhi	r20,1
    a778:	dd802215 	stw	r22,136(sp)
    a77c:	a5047404 	addi	r20,r20,4560
    a780:	003db106 	br	9e48 <___vfiprintf_internal_r+0x920>
    a784:	d9401b17 	ldw	r5,108(sp)
    a788:	01000074 	movhi	r4,1
    a78c:	2104d404 	addi	r4,r4,4944
    a790:	d9002415 	stw	r4,144(sp)
    a794:	29400044 	addi	r5,r5,1
    a798:	003cf906 	br	9b80 <___vfiprintf_internal_r+0x658>
    a79c:	4827883a 	mov	r19,r9
    a7a0:	db801d83 	ldbu	r14,118(sp)
    a7a4:	dd802215 	stw	r22,136(sp)
    a7a8:	0013883a 	mov	r9,zero
    a7ac:	003c5806 	br	9910 <___vfiprintf_internal_r+0x3e8>
    a7b0:	200d883a 	mov	r6,r4
    a7b4:	003ec706 	br	a2d4 <___vfiprintf_internal_r+0xdac>
    a7b8:	0023883a 	mov	r17,zero
    a7bc:	003fed06 	br	a774 <___vfiprintf_internal_r+0x124c>
    a7c0:	d9002217 	ldw	r4,136(sp)
    a7c4:	22400017 	ldw	r9,0(r4)
    a7c8:	20c00104 	addi	r3,r4,4
    a7cc:	d8c02215 	stw	r3,136(sp)
    a7d0:	483fc20e 	bge	r9,zero,a6dc <___vfiprintf_internal_r+0x11b4>
    a7d4:	027fffc4 	movi	r9,-1
    a7d8:	80c00047 	ldb	r3,1(r16)
    a7dc:	003bb006 	br	96a0 <___vfiprintf_internal_r+0x178>
    a7e0:	8c80010e 	bge	r17,r18,a7e8 <___vfiprintf_internal_r+0x12c0>
    a7e4:	9023883a 	mov	r17,r18
    a7e8:	d8802317 	ldw	r2,140(sp)
    a7ec:	1445883a 	add	r2,r2,r17
    a7f0:	d8802315 	stw	r2,140(sp)
    a7f4:	003cef06 	br	9bb4 <___vfiprintf_internal_r+0x68c>

0000a7f8 <__vfiprintf_internal>:
    a7f8:	2007883a 	mov	r3,r4
    a7fc:	01000074 	movhi	r4,1
    a800:	210bd104 	addi	r4,r4,12100
    a804:	21000017 	ldw	r4,0(r4)
    a808:	2805883a 	mov	r2,r5
    a80c:	300f883a 	mov	r7,r6
    a810:	180b883a 	mov	r5,r3
    a814:	100d883a 	mov	r6,r2
    a818:	00095281 	jmpi	9528 <___vfiprintf_internal_r>

0000a81c <__sbprintf>:
    a81c:	2880030b 	ldhu	r2,12(r5)
    a820:	2ac01917 	ldw	r11,100(r5)
    a824:	2a80038b 	ldhu	r10,14(r5)
    a828:	2a400717 	ldw	r9,28(r5)
    a82c:	2a000917 	ldw	r8,36(r5)
    a830:	defee204 	addi	sp,sp,-1144
    a834:	00c10004 	movi	r3,1024
    a838:	dc011a15 	stw	r16,1128(sp)
    a83c:	10bfff4c 	andi	r2,r2,65533
    a840:	2821883a 	mov	r16,r5
    a844:	d8cb883a 	add	r5,sp,r3
    a848:	dc811c15 	stw	r18,1136(sp)
    a84c:	dc411b15 	stw	r17,1132(sp)
    a850:	dfc11d15 	stw	ra,1140(sp)
    a854:	2025883a 	mov	r18,r4
    a858:	d881030d 	sth	r2,1036(sp)
    a85c:	dac11915 	stw	r11,1124(sp)
    a860:	da81038d 	sth	r10,1038(sp)
    a864:	da410715 	stw	r9,1052(sp)
    a868:	da010915 	stw	r8,1060(sp)
    a86c:	dec10015 	stw	sp,1024(sp)
    a870:	dec10415 	stw	sp,1040(sp)
    a874:	d8c10215 	stw	r3,1032(sp)
    a878:	d8c10515 	stw	r3,1044(sp)
    a87c:	d8010615 	stw	zero,1048(sp)
    a880:	00095280 	call	9528 <___vfiprintf_internal_r>
    a884:	1023883a 	mov	r17,r2
    a888:	10000416 	blt	r2,zero,a89c <__sbprintf+0x80>
    a88c:	9009883a 	mov	r4,r18
    a890:	d9410004 	addi	r5,sp,1024
    a894:	00066f80 	call	66f8 <_fflush_r>
    a898:	10000d1e 	bne	r2,zero,a8d0 <__sbprintf+0xb4>
    a89c:	d8c1030b 	ldhu	r3,1036(sp)
    a8a0:	18c0100c 	andi	r3,r3,64
    a8a4:	18000326 	beq	r3,zero,a8b4 <__sbprintf+0x98>
    a8a8:	8080030b 	ldhu	r2,12(r16)
    a8ac:	10801014 	ori	r2,r2,64
    a8b0:	8080030d 	sth	r2,12(r16)
    a8b4:	8805883a 	mov	r2,r17
    a8b8:	dfc11d17 	ldw	ra,1140(sp)
    a8bc:	dc811c17 	ldw	r18,1136(sp)
    a8c0:	dc411b17 	ldw	r17,1132(sp)
    a8c4:	dc011a17 	ldw	r16,1128(sp)
    a8c8:	dec11e04 	addi	sp,sp,1144
    a8cc:	f800283a 	ret
    a8d0:	047fffc4 	movi	r17,-1
    a8d4:	003ff106 	br	a89c <__sbprintf+0x80>

0000a8d8 <_write_r>:
    a8d8:	defffd04 	addi	sp,sp,-12
    a8dc:	dc000015 	stw	r16,0(sp)
    a8e0:	04000074 	movhi	r16,1
    a8e4:	dc400115 	stw	r17,4(sp)
    a8e8:	8412a604 	addi	r16,r16,19096
    a8ec:	2023883a 	mov	r17,r4
    a8f0:	2809883a 	mov	r4,r5
    a8f4:	300b883a 	mov	r5,r6
    a8f8:	380d883a 	mov	r6,r7
    a8fc:	dfc00215 	stw	ra,8(sp)
    a900:	80000015 	stw	zero,0(r16)
    a904:	000ebfc0 	call	ebfc <write>
    a908:	00ffffc4 	movi	r3,-1
    a90c:	10c00526 	beq	r2,r3,a924 <_write_r+0x4c>
    a910:	dfc00217 	ldw	ra,8(sp)
    a914:	dc400117 	ldw	r17,4(sp)
    a918:	dc000017 	ldw	r16,0(sp)
    a91c:	dec00304 	addi	sp,sp,12
    a920:	f800283a 	ret
    a924:	80c00017 	ldw	r3,0(r16)
    a928:	183ff926 	beq	r3,zero,a910 <_write_r+0x38>
    a92c:	88c00015 	stw	r3,0(r17)
    a930:	003ff706 	br	a910 <_write_r+0x38>

0000a934 <_close_r>:
    a934:	defffd04 	addi	sp,sp,-12
    a938:	dc000015 	stw	r16,0(sp)
    a93c:	04000074 	movhi	r16,1
    a940:	dc400115 	stw	r17,4(sp)
    a944:	8412a604 	addi	r16,r16,19096
    a948:	2023883a 	mov	r17,r4
    a94c:	2809883a 	mov	r4,r5
    a950:	dfc00215 	stw	ra,8(sp)
    a954:	80000015 	stw	zero,0(r16)
    a958:	000e3700 	call	e370 <close>
    a95c:	00ffffc4 	movi	r3,-1
    a960:	10c00526 	beq	r2,r3,a978 <_close_r+0x44>
    a964:	dfc00217 	ldw	ra,8(sp)
    a968:	dc400117 	ldw	r17,4(sp)
    a96c:	dc000017 	ldw	r16,0(sp)
    a970:	dec00304 	addi	sp,sp,12
    a974:	f800283a 	ret
    a978:	80c00017 	ldw	r3,0(r16)
    a97c:	183ff926 	beq	r3,zero,a964 <_close_r+0x30>
    a980:	88c00015 	stw	r3,0(r17)
    a984:	003ff706 	br	a964 <_close_r+0x30>

0000a988 <_calloc_r>:
    a988:	298b383a 	mul	r5,r5,r6
    a98c:	defffe04 	addi	sp,sp,-8
    a990:	dc000015 	stw	r16,0(sp)
    a994:	dfc00115 	stw	ra,4(sp)
    a998:	000208c0 	call	208c <_malloc_r>
    a99c:	1021883a 	mov	r16,r2
    a9a0:	10002826 	beq	r2,zero,aa44 <_calloc_r+0xbc>
    a9a4:	11bfff17 	ldw	r6,-4(r2)
    a9a8:	00bfff04 	movi	r2,-4
    a9ac:	00c00904 	movi	r3,36
    a9b0:	308c703a 	and	r6,r6,r2
    a9b4:	308d883a 	add	r6,r6,r2
    a9b8:	19801436 	bltu	r3,r6,aa0c <_calloc_r+0x84>
    a9bc:	008004c4 	movi	r2,19
    a9c0:	11800936 	bltu	r2,r6,a9e8 <_calloc_r+0x60>
    a9c4:	8005883a 	mov	r2,r16
    a9c8:	10000015 	stw	zero,0(r2)
    a9cc:	10000115 	stw	zero,4(r2)
    a9d0:	10000215 	stw	zero,8(r2)
    a9d4:	8005883a 	mov	r2,r16
    a9d8:	dfc00117 	ldw	ra,4(sp)
    a9dc:	dc000017 	ldw	r16,0(sp)
    a9e0:	dec00204 	addi	sp,sp,8
    a9e4:	f800283a 	ret
    a9e8:	80000015 	stw	zero,0(r16)
    a9ec:	80000115 	stw	zero,4(r16)
    a9f0:	008006c4 	movi	r2,27
    a9f4:	11800d2e 	bgeu	r2,r6,aa2c <_calloc_r+0xa4>
    a9f8:	80000215 	stw	zero,8(r16)
    a9fc:	80000315 	stw	zero,12(r16)
    aa00:	30c00c26 	beq	r6,r3,aa34 <_calloc_r+0xac>
    aa04:	80800404 	addi	r2,r16,16
    aa08:	003fef06 	br	a9c8 <_calloc_r+0x40>
    aa0c:	8009883a 	mov	r4,r16
    aa10:	000b883a 	mov	r5,zero
    aa14:	0007b940 	call	7b94 <memset>
    aa18:	8005883a 	mov	r2,r16
    aa1c:	dfc00117 	ldw	ra,4(sp)
    aa20:	dc000017 	ldw	r16,0(sp)
    aa24:	dec00204 	addi	sp,sp,8
    aa28:	f800283a 	ret
    aa2c:	80800204 	addi	r2,r16,8
    aa30:	003fe506 	br	a9c8 <_calloc_r+0x40>
    aa34:	80000415 	stw	zero,16(r16)
    aa38:	80800604 	addi	r2,r16,24
    aa3c:	80000515 	stw	zero,20(r16)
    aa40:	003fe106 	br	a9c8 <_calloc_r+0x40>
    aa44:	0005883a 	mov	r2,zero
    aa48:	003fe306 	br	a9d8 <_calloc_r+0x50>

0000aa4c <_fclose_r>:
    aa4c:	28003926 	beq	r5,zero,ab34 <_fclose_r+0xe8>
    aa50:	defffc04 	addi	sp,sp,-16
    aa54:	dc400115 	stw	r17,4(sp)
    aa58:	dc000015 	stw	r16,0(sp)
    aa5c:	dfc00315 	stw	ra,12(sp)
    aa60:	dc800215 	stw	r18,8(sp)
    aa64:	2023883a 	mov	r17,r4
    aa68:	2821883a 	mov	r16,r5
    aa6c:	20000226 	beq	r4,zero,aa78 <_fclose_r+0x2c>
    aa70:	20800e17 	ldw	r2,56(r4)
    aa74:	10002726 	beq	r2,zero,ab14 <_fclose_r+0xc8>
    aa78:	8080030f 	ldh	r2,12(r16)
    aa7c:	1000071e 	bne	r2,zero,aa9c <_fclose_r+0x50>
    aa80:	0005883a 	mov	r2,zero
    aa84:	dfc00317 	ldw	ra,12(sp)
    aa88:	dc800217 	ldw	r18,8(sp)
    aa8c:	dc400117 	ldw	r17,4(sp)
    aa90:	dc000017 	ldw	r16,0(sp)
    aa94:	dec00404 	addi	sp,sp,16
    aa98:	f800283a 	ret
    aa9c:	8809883a 	mov	r4,r17
    aaa0:	800b883a 	mov	r5,r16
    aaa4:	00064f00 	call	64f0 <__sflush_r>
    aaa8:	1025883a 	mov	r18,r2
    aaac:	80800b17 	ldw	r2,44(r16)
    aab0:	10000426 	beq	r2,zero,aac4 <_fclose_r+0x78>
    aab4:	81400717 	ldw	r5,28(r16)
    aab8:	8809883a 	mov	r4,r17
    aabc:	103ee83a 	callr	r2
    aac0:	10001616 	blt	r2,zero,ab1c <_fclose_r+0xd0>
    aac4:	8080030b 	ldhu	r2,12(r16)
    aac8:	1080200c 	andi	r2,r2,128
    aacc:	1000151e 	bne	r2,zero,ab24 <_fclose_r+0xd8>
    aad0:	81400c17 	ldw	r5,48(r16)
    aad4:	28000526 	beq	r5,zero,aaec <_fclose_r+0xa0>
    aad8:	80801004 	addi	r2,r16,64
    aadc:	28800226 	beq	r5,r2,aae8 <_fclose_r+0x9c>
    aae0:	8809883a 	mov	r4,r17
    aae4:	0006c480 	call	6c48 <_free_r>
    aae8:	80000c15 	stw	zero,48(r16)
    aaec:	81401117 	ldw	r5,68(r16)
    aaf0:	28000326 	beq	r5,zero,ab00 <_fclose_r+0xb4>
    aaf4:	8809883a 	mov	r4,r17
    aaf8:	0006c480 	call	6c48 <_free_r>
    aafc:	80001115 	stw	zero,68(r16)
    ab00:	0006ae40 	call	6ae4 <__sfp_lock_acquire>
    ab04:	8000030d 	sth	zero,12(r16)
    ab08:	0006ae80 	call	6ae8 <__sfp_lock_release>
    ab0c:	9005883a 	mov	r2,r18
    ab10:	003fdc06 	br	aa84 <_fclose_r+0x38>
    ab14:	0006ad40 	call	6ad4 <__sinit>
    ab18:	003fd706 	br	aa78 <_fclose_r+0x2c>
    ab1c:	04bfffc4 	movi	r18,-1
    ab20:	003fe806 	br	aac4 <_fclose_r+0x78>
    ab24:	81400417 	ldw	r5,16(r16)
    ab28:	8809883a 	mov	r4,r17
    ab2c:	0006c480 	call	6c48 <_free_r>
    ab30:	003fe706 	br	aad0 <_fclose_r+0x84>
    ab34:	0005883a 	mov	r2,zero
    ab38:	f800283a 	ret

0000ab3c <fclose>:
    ab3c:	00800074 	movhi	r2,1
    ab40:	108bd104 	addi	r2,r2,12100
    ab44:	200b883a 	mov	r5,r4
    ab48:	11000017 	ldw	r4,0(r2)
    ab4c:	000aa4c1 	jmpi	aa4c <_fclose_r>

0000ab50 <_fputwc_r>:
    ab50:	3080030b 	ldhu	r2,12(r6)
    ab54:	defff804 	addi	sp,sp,-32
    ab58:	dcc00415 	stw	r19,16(sp)
    ab5c:	dc800315 	stw	r18,12(sp)
    ab60:	dc000115 	stw	r16,4(sp)
    ab64:	dfc00715 	stw	ra,28(sp)
    ab68:	dd400615 	stw	r21,24(sp)
    ab6c:	dd000515 	stw	r20,20(sp)
    ab70:	dc400215 	stw	r17,8(sp)
    ab74:	10c8000c 	andi	r3,r2,8192
    ab78:	3021883a 	mov	r16,r6
    ab7c:	2027883a 	mov	r19,r4
    ab80:	2825883a 	mov	r18,r5
    ab84:	1800051e 	bne	r3,zero,ab9c <_fputwc_r+0x4c>
    ab88:	30c01917 	ldw	r3,100(r6)
    ab8c:	10880014 	ori	r2,r2,8192
    ab90:	3080030d 	sth	r2,12(r6)
    ab94:	18880014 	ori	r2,r3,8192
    ab98:	30801915 	stw	r2,100(r6)
    ab9c:	00076080 	call	7608 <__locale_mb_cur_max>
    aba0:	00c00044 	movi	r3,1
    aba4:	10c03e26 	beq	r2,r3,aca0 <_fputwc_r+0x150>
    aba8:	9809883a 	mov	r4,r19
    abac:	d80b883a 	mov	r5,sp
    abb0:	900d883a 	mov	r6,r18
    abb4:	81c01704 	addi	r7,r16,92
    abb8:	000afe80 	call	afe8 <_wcrtomb_r>
    abbc:	1029883a 	mov	r20,r2
    abc0:	00bfffc4 	movi	r2,-1
    abc4:	a0802026 	beq	r20,r2,ac48 <_fputwc_r+0xf8>
    abc8:	d9400003 	ldbu	r5,0(sp)
    abcc:	a0001c26 	beq	r20,zero,ac40 <_fputwc_r+0xf0>
    abd0:	0023883a 	mov	r17,zero
    abd4:	05400284 	movi	r21,10
    abd8:	00000906 	br	ac00 <_fputwc_r+0xb0>
    abdc:	80800017 	ldw	r2,0(r16)
    abe0:	11400005 	stb	r5,0(r2)
    abe4:	80c00017 	ldw	r3,0(r16)
    abe8:	18c00044 	addi	r3,r3,1
    abec:	80c00015 	stw	r3,0(r16)
    abf0:	8c400044 	addi	r17,r17,1
    abf4:	dc45883a 	add	r2,sp,r17
    abf8:	8d00112e 	bgeu	r17,r20,ac40 <_fputwc_r+0xf0>
    abfc:	11400003 	ldbu	r5,0(r2)
    ac00:	80c00217 	ldw	r3,8(r16)
    ac04:	18ffffc4 	addi	r3,r3,-1
    ac08:	80c00215 	stw	r3,8(r16)
    ac0c:	183ff30e 	bge	r3,zero,abdc <_fputwc_r+0x8c>
    ac10:	80800617 	ldw	r2,24(r16)
    ac14:	18801916 	blt	r3,r2,ac7c <_fputwc_r+0x12c>
    ac18:	80800017 	ldw	r2,0(r16)
    ac1c:	11400005 	stb	r5,0(r2)
    ac20:	80800017 	ldw	r2,0(r16)
    ac24:	10c00003 	ldbu	r3,0(r2)
    ac28:	10800044 	addi	r2,r2,1
    ac2c:	1d402326 	beq	r3,r21,acbc <_fputwc_r+0x16c>
    ac30:	80800015 	stw	r2,0(r16)
    ac34:	8c400044 	addi	r17,r17,1
    ac38:	dc45883a 	add	r2,sp,r17
    ac3c:	8d3fef36 	bltu	r17,r20,abfc <_fputwc_r+0xac>
    ac40:	9005883a 	mov	r2,r18
    ac44:	00000406 	br	ac58 <_fputwc_r+0x108>
    ac48:	80c0030b 	ldhu	r3,12(r16)
    ac4c:	a005883a 	mov	r2,r20
    ac50:	18c01014 	ori	r3,r3,64
    ac54:	80c0030d 	sth	r3,12(r16)
    ac58:	dfc00717 	ldw	ra,28(sp)
    ac5c:	dd400617 	ldw	r21,24(sp)
    ac60:	dd000517 	ldw	r20,20(sp)
    ac64:	dcc00417 	ldw	r19,16(sp)
    ac68:	dc800317 	ldw	r18,12(sp)
    ac6c:	dc400217 	ldw	r17,8(sp)
    ac70:	dc000117 	ldw	r16,4(sp)
    ac74:	dec00804 	addi	sp,sp,32
    ac78:	f800283a 	ret
    ac7c:	9809883a 	mov	r4,r19
    ac80:	29403fcc 	andi	r5,r5,255
    ac84:	800d883a 	mov	r6,r16
    ac88:	000ae940 	call	ae94 <__swbuf_r>
    ac8c:	10bfffe0 	cmpeqi	r2,r2,-1
    ac90:	10803fcc 	andi	r2,r2,255
    ac94:	103fd626 	beq	r2,zero,abf0 <_fputwc_r+0xa0>
    ac98:	00bfffc4 	movi	r2,-1
    ac9c:	003fee06 	br	ac58 <_fputwc_r+0x108>
    aca0:	90ffffc4 	addi	r3,r18,-1
    aca4:	01003f84 	movi	r4,254
    aca8:	20ffbf36 	bltu	r4,r3,aba8 <_fputwc_r+0x58>
    acac:	900b883a 	mov	r5,r18
    acb0:	dc800005 	stb	r18,0(sp)
    acb4:	1029883a 	mov	r20,r2
    acb8:	003fc506 	br	abd0 <_fputwc_r+0x80>
    acbc:	9809883a 	mov	r4,r19
    acc0:	a80b883a 	mov	r5,r21
    acc4:	800d883a 	mov	r6,r16
    acc8:	000ae940 	call	ae94 <__swbuf_r>
    accc:	10bfffe0 	cmpeqi	r2,r2,-1
    acd0:	003fef06 	br	ac90 <_fputwc_r+0x140>

0000acd4 <fputwc>:
    acd4:	00800074 	movhi	r2,1
    acd8:	defffc04 	addi	sp,sp,-16
    acdc:	108bd104 	addi	r2,r2,12100
    ace0:	dc000115 	stw	r16,4(sp)
    ace4:	14000017 	ldw	r16,0(r2)
    ace8:	dc400215 	stw	r17,8(sp)
    acec:	dfc00315 	stw	ra,12(sp)
    acf0:	2023883a 	mov	r17,r4
    acf4:	280d883a 	mov	r6,r5
    acf8:	80000626 	beq	r16,zero,ad14 <fputwc+0x40>
    acfc:	80800e17 	ldw	r2,56(r16)
    ad00:	1000041e 	bne	r2,zero,ad14 <fputwc+0x40>
    ad04:	8009883a 	mov	r4,r16
    ad08:	d9400015 	stw	r5,0(sp)
    ad0c:	0006ad40 	call	6ad4 <__sinit>
    ad10:	d9800017 	ldw	r6,0(sp)
    ad14:	8009883a 	mov	r4,r16
    ad18:	880b883a 	mov	r5,r17
    ad1c:	dfc00317 	ldw	ra,12(sp)
    ad20:	dc400217 	ldw	r17,8(sp)
    ad24:	dc000117 	ldw	r16,4(sp)
    ad28:	dec00404 	addi	sp,sp,16
    ad2c:	000ab501 	jmpi	ab50 <_fputwc_r>

0000ad30 <_fstat_r>:
    ad30:	defffd04 	addi	sp,sp,-12
    ad34:	dc000015 	stw	r16,0(sp)
    ad38:	04000074 	movhi	r16,1
    ad3c:	dc400115 	stw	r17,4(sp)
    ad40:	8412a604 	addi	r16,r16,19096
    ad44:	2023883a 	mov	r17,r4
    ad48:	2809883a 	mov	r4,r5
    ad4c:	300b883a 	mov	r5,r6
    ad50:	dfc00215 	stw	ra,8(sp)
    ad54:	80000015 	stw	zero,0(r16)
    ad58:	000e4bc0 	call	e4bc <fstat>
    ad5c:	00ffffc4 	movi	r3,-1
    ad60:	10c00526 	beq	r2,r3,ad78 <_fstat_r+0x48>
    ad64:	dfc00217 	ldw	ra,8(sp)
    ad68:	dc400117 	ldw	r17,4(sp)
    ad6c:	dc000017 	ldw	r16,0(sp)
    ad70:	dec00304 	addi	sp,sp,12
    ad74:	f800283a 	ret
    ad78:	80c00017 	ldw	r3,0(r16)
    ad7c:	183ff926 	beq	r3,zero,ad64 <_fstat_r+0x34>
    ad80:	88c00015 	stw	r3,0(r17)
    ad84:	003ff706 	br	ad64 <_fstat_r+0x34>

0000ad88 <_isatty_r>:
    ad88:	defffd04 	addi	sp,sp,-12
    ad8c:	dc000015 	stw	r16,0(sp)
    ad90:	04000074 	movhi	r16,1
    ad94:	dc400115 	stw	r17,4(sp)
    ad98:	8412a604 	addi	r16,r16,19096
    ad9c:	2023883a 	mov	r17,r4
    ada0:	2809883a 	mov	r4,r5
    ada4:	dfc00215 	stw	ra,8(sp)
    ada8:	80000015 	stw	zero,0(r16)
    adac:	000e5bc0 	call	e5bc <isatty>
    adb0:	00ffffc4 	movi	r3,-1
    adb4:	10c00526 	beq	r2,r3,adcc <_isatty_r+0x44>
    adb8:	dfc00217 	ldw	ra,8(sp)
    adbc:	dc400117 	ldw	r17,4(sp)
    adc0:	dc000017 	ldw	r16,0(sp)
    adc4:	dec00304 	addi	sp,sp,12
    adc8:	f800283a 	ret
    adcc:	80c00017 	ldw	r3,0(r16)
    add0:	183ff926 	beq	r3,zero,adb8 <_isatty_r+0x30>
    add4:	88c00015 	stw	r3,0(r17)
    add8:	003ff706 	br	adb8 <_isatty_r+0x30>

0000addc <_lseek_r>:
    addc:	defffd04 	addi	sp,sp,-12
    ade0:	dc000015 	stw	r16,0(sp)
    ade4:	04000074 	movhi	r16,1
    ade8:	dc400115 	stw	r17,4(sp)
    adec:	8412a604 	addi	r16,r16,19096
    adf0:	2023883a 	mov	r17,r4
    adf4:	2809883a 	mov	r4,r5
    adf8:	300b883a 	mov	r5,r6
    adfc:	380d883a 	mov	r6,r7
    ae00:	dfc00215 	stw	ra,8(sp)
    ae04:	80000015 	stw	zero,0(r16)
    ae08:	000e7940 	call	e794 <lseek>
    ae0c:	00ffffc4 	movi	r3,-1
    ae10:	10c00526 	beq	r2,r3,ae28 <_lseek_r+0x4c>
    ae14:	dfc00217 	ldw	ra,8(sp)
    ae18:	dc400117 	ldw	r17,4(sp)
    ae1c:	dc000017 	ldw	r16,0(sp)
    ae20:	dec00304 	addi	sp,sp,12
    ae24:	f800283a 	ret
    ae28:	80c00017 	ldw	r3,0(r16)
    ae2c:	183ff926 	beq	r3,zero,ae14 <_lseek_r+0x38>
    ae30:	88c00015 	stw	r3,0(r17)
    ae34:	003ff706 	br	ae14 <_lseek_r+0x38>

0000ae38 <_read_r>:
    ae38:	defffd04 	addi	sp,sp,-12
    ae3c:	dc000015 	stw	r16,0(sp)
    ae40:	04000074 	movhi	r16,1
    ae44:	dc400115 	stw	r17,4(sp)
    ae48:	8412a604 	addi	r16,r16,19096
    ae4c:	2023883a 	mov	r17,r4
    ae50:	2809883a 	mov	r4,r5
    ae54:	300b883a 	mov	r5,r6
    ae58:	380d883a 	mov	r6,r7
    ae5c:	dfc00215 	stw	ra,8(sp)
    ae60:	80000015 	stw	zero,0(r16)
    ae64:	000e9700 	call	e970 <read>
    ae68:	00ffffc4 	movi	r3,-1
    ae6c:	10c00526 	beq	r2,r3,ae84 <_read_r+0x4c>
    ae70:	dfc00217 	ldw	ra,8(sp)
    ae74:	dc400117 	ldw	r17,4(sp)
    ae78:	dc000017 	ldw	r16,0(sp)
    ae7c:	dec00304 	addi	sp,sp,12
    ae80:	f800283a 	ret
    ae84:	80c00017 	ldw	r3,0(r16)
    ae88:	183ff926 	beq	r3,zero,ae70 <_read_r+0x38>
    ae8c:	88c00015 	stw	r3,0(r17)
    ae90:	003ff706 	br	ae70 <_read_r+0x38>

0000ae94 <__swbuf_r>:
    ae94:	defffc04 	addi	sp,sp,-16
    ae98:	dc800215 	stw	r18,8(sp)
    ae9c:	dc400115 	stw	r17,4(sp)
    aea0:	dc000015 	stw	r16,0(sp)
    aea4:	dfc00315 	stw	ra,12(sp)
    aea8:	2025883a 	mov	r18,r4
    aeac:	2823883a 	mov	r17,r5
    aeb0:	3021883a 	mov	r16,r6
    aeb4:	20000226 	beq	r4,zero,aec0 <__swbuf_r+0x2c>
    aeb8:	20800e17 	ldw	r2,56(r4)
    aebc:	10004126 	beq	r2,zero,afc4 <__swbuf_r+0x130>
    aec0:	80c00617 	ldw	r3,24(r16)
    aec4:	8180030b 	ldhu	r6,12(r16)
    aec8:	80c00215 	stw	r3,8(r16)
    aecc:	30c0020c 	andi	r3,r6,8
    aed0:	18003526 	beq	r3,zero,afa8 <__swbuf_r+0x114>
    aed4:	80c00417 	ldw	r3,16(r16)
    aed8:	18003326 	beq	r3,zero,afa8 <__swbuf_r+0x114>
    aedc:	3088000c 	andi	r2,r6,8192
    aee0:	8c403fcc 	andi	r17,r17,255
    aee4:	10001726 	beq	r2,zero,af44 <__swbuf_r+0xb0>
    aee8:	80800017 	ldw	r2,0(r16)
    aeec:	81000517 	ldw	r4,20(r16)
    aef0:	10c7c83a 	sub	r3,r2,r3
    aef4:	19001d0e 	bge	r3,r4,af6c <__swbuf_r+0xd8>
    aef8:	18c00044 	addi	r3,r3,1
    aefc:	81400217 	ldw	r5,8(r16)
    af00:	11000044 	addi	r4,r2,1
    af04:	81000015 	stw	r4,0(r16)
    af08:	297fffc4 	addi	r5,r5,-1
    af0c:	81400215 	stw	r5,8(r16)
    af10:	14400005 	stb	r17,0(r2)
    af14:	80800517 	ldw	r2,20(r16)
    af18:	10c01d26 	beq	r2,r3,af90 <__swbuf_r+0xfc>
    af1c:	8080030b 	ldhu	r2,12(r16)
    af20:	1080004c 	andi	r2,r2,1
    af24:	1000181e 	bne	r2,zero,af88 <__swbuf_r+0xf4>
    af28:	8805883a 	mov	r2,r17
    af2c:	dfc00317 	ldw	ra,12(sp)
    af30:	dc800217 	ldw	r18,8(sp)
    af34:	dc400117 	ldw	r17,4(sp)
    af38:	dc000017 	ldw	r16,0(sp)
    af3c:	dec00404 	addi	sp,sp,16
    af40:	f800283a 	ret
    af44:	81001917 	ldw	r4,100(r16)
    af48:	00b7ffc4 	movi	r2,-8193
    af4c:	31880014 	ori	r6,r6,8192
    af50:	2084703a 	and	r2,r4,r2
    af54:	80801915 	stw	r2,100(r16)
    af58:	80800017 	ldw	r2,0(r16)
    af5c:	81000517 	ldw	r4,20(r16)
    af60:	8180030d 	sth	r6,12(r16)
    af64:	10c7c83a 	sub	r3,r2,r3
    af68:	193fe316 	blt	r3,r4,aef8 <__swbuf_r+0x64>
    af6c:	9009883a 	mov	r4,r18
    af70:	800b883a 	mov	r5,r16
    af74:	00066f80 	call	66f8 <_fflush_r>
    af78:	1000091e 	bne	r2,zero,afa0 <__swbuf_r+0x10c>
    af7c:	80800017 	ldw	r2,0(r16)
    af80:	00c00044 	movi	r3,1
    af84:	003fdd06 	br	aefc <__swbuf_r+0x68>
    af88:	00800284 	movi	r2,10
    af8c:	88bfe61e 	bne	r17,r2,af28 <__swbuf_r+0x94>
    af90:	9009883a 	mov	r4,r18
    af94:	800b883a 	mov	r5,r16
    af98:	00066f80 	call	66f8 <_fflush_r>
    af9c:	103fe226 	beq	r2,zero,af28 <__swbuf_r+0x94>
    afa0:	00bfffc4 	movi	r2,-1
    afa4:	003fe106 	br	af2c <__swbuf_r+0x98>
    afa8:	9009883a 	mov	r4,r18
    afac:	800b883a 	mov	r5,r16
    afb0:	0004a740 	call	4a74 <__swsetup_r>
    afb4:	103ffa1e 	bne	r2,zero,afa0 <__swbuf_r+0x10c>
    afb8:	8180030b 	ldhu	r6,12(r16)
    afbc:	80c00417 	ldw	r3,16(r16)
    afc0:	003fc606 	br	aedc <__swbuf_r+0x48>
    afc4:	0006ad40 	call	6ad4 <__sinit>
    afc8:	003fbd06 	br	aec0 <__swbuf_r+0x2c>

0000afcc <__swbuf>:
    afcc:	00c00074 	movhi	r3,1
    afd0:	18cbd104 	addi	r3,r3,12100
    afd4:	2005883a 	mov	r2,r4
    afd8:	19000017 	ldw	r4,0(r3)
    afdc:	280d883a 	mov	r6,r5
    afe0:	100b883a 	mov	r5,r2
    afe4:	000ae941 	jmpi	ae94 <__swbuf_r>

0000afe8 <_wcrtomb_r>:
    afe8:	defff604 	addi	sp,sp,-40
    afec:	00800074 	movhi	r2,1
    aff0:	dc800815 	stw	r18,32(sp)
    aff4:	dc400715 	stw	r17,28(sp)
    aff8:	dc000615 	stw	r16,24(sp)
    affc:	108bd304 	addi	r2,r2,12108
    b000:	dfc00915 	stw	ra,36(sp)
    b004:	2021883a 	mov	r16,r4
    b008:	3823883a 	mov	r17,r7
    b00c:	14800017 	ldw	r18,0(r2)
    b010:	28001426 	beq	r5,zero,b064 <_wcrtomb_r+0x7c>
    b014:	d9400415 	stw	r5,16(sp)
    b018:	d9800515 	stw	r6,20(sp)
    b01c:	00075fc0 	call	75fc <__locale_charset>
    b020:	d9400417 	ldw	r5,16(sp)
    b024:	d9800517 	ldw	r6,20(sp)
    b028:	8009883a 	mov	r4,r16
    b02c:	dc400015 	stw	r17,0(sp)
    b030:	100f883a 	mov	r7,r2
    b034:	903ee83a 	callr	r18
    b038:	00ffffc4 	movi	r3,-1
    b03c:	10c0031e 	bne	r2,r3,b04c <_wcrtomb_r+0x64>
    b040:	88000015 	stw	zero,0(r17)
    b044:	00c02284 	movi	r3,138
    b048:	80c00015 	stw	r3,0(r16)
    b04c:	dfc00917 	ldw	ra,36(sp)
    b050:	dc800817 	ldw	r18,32(sp)
    b054:	dc400717 	ldw	r17,28(sp)
    b058:	dc000617 	ldw	r16,24(sp)
    b05c:	dec00a04 	addi	sp,sp,40
    b060:	f800283a 	ret
    b064:	00075fc0 	call	75fc <__locale_charset>
    b068:	8009883a 	mov	r4,r16
    b06c:	dc400015 	stw	r17,0(sp)
    b070:	d9400104 	addi	r5,sp,4
    b074:	000d883a 	mov	r6,zero
    b078:	100f883a 	mov	r7,r2
    b07c:	903ee83a 	callr	r18
    b080:	003fed06 	br	b038 <_wcrtomb_r+0x50>

0000b084 <wcrtomb>:
    b084:	defff604 	addi	sp,sp,-40
    b088:	00800074 	movhi	r2,1
    b08c:	dc800615 	stw	r18,24(sp)
    b090:	dc400515 	stw	r17,20(sp)
    b094:	dc000415 	stw	r16,16(sp)
    b098:	108bd104 	addi	r2,r2,12100
    b09c:	dfc00915 	stw	ra,36(sp)
    b0a0:	dd000815 	stw	r20,32(sp)
    b0a4:	dcc00715 	stw	r19,28(sp)
    b0a8:	2021883a 	mov	r16,r4
    b0ac:	3025883a 	mov	r18,r6
    b0b0:	14400017 	ldw	r17,0(r2)
    b0b4:	20001826 	beq	r4,zero,b118 <wcrtomb+0x94>
    b0b8:	00800074 	movhi	r2,1
    b0bc:	108bd304 	addi	r2,r2,12108
    b0c0:	15000017 	ldw	r20,0(r2)
    b0c4:	2827883a 	mov	r19,r5
    b0c8:	00075fc0 	call	75fc <__locale_charset>
    b0cc:	8809883a 	mov	r4,r17
    b0d0:	dc800015 	stw	r18,0(sp)
    b0d4:	800b883a 	mov	r5,r16
    b0d8:	980d883a 	mov	r6,r19
    b0dc:	100f883a 	mov	r7,r2
    b0e0:	a03ee83a 	callr	r20
    b0e4:	00ffffc4 	movi	r3,-1
    b0e8:	10c0031e 	bne	r2,r3,b0f8 <wcrtomb+0x74>
    b0ec:	90000015 	stw	zero,0(r18)
    b0f0:	00c02284 	movi	r3,138
    b0f4:	88c00015 	stw	r3,0(r17)
    b0f8:	dfc00917 	ldw	ra,36(sp)
    b0fc:	dd000817 	ldw	r20,32(sp)
    b100:	dcc00717 	ldw	r19,28(sp)
    b104:	dc800617 	ldw	r18,24(sp)
    b108:	dc400517 	ldw	r17,20(sp)
    b10c:	dc000417 	ldw	r16,16(sp)
    b110:	dec00a04 	addi	sp,sp,40
    b114:	f800283a 	ret
    b118:	00800074 	movhi	r2,1
    b11c:	108bd304 	addi	r2,r2,12108
    b120:	14000017 	ldw	r16,0(r2)
    b124:	00075fc0 	call	75fc <__locale_charset>
    b128:	8809883a 	mov	r4,r17
    b12c:	dc800015 	stw	r18,0(sp)
    b130:	d9400104 	addi	r5,sp,4
    b134:	000d883a 	mov	r6,zero
    b138:	100f883a 	mov	r7,r2
    b13c:	803ee83a 	callr	r16
    b140:	003fe806 	br	b0e4 <wcrtomb+0x60>

0000b144 <__ascii_wctomb>:
    b144:	28000526 	beq	r5,zero,b15c <__ascii_wctomb+0x18>
    b148:	00803fc4 	movi	r2,255
    b14c:	11800536 	bltu	r2,r6,b164 <__ascii_wctomb+0x20>
    b150:	29800005 	stb	r6,0(r5)
    b154:	00800044 	movi	r2,1
    b158:	f800283a 	ret
    b15c:	0005883a 	mov	r2,zero
    b160:	f800283a 	ret
    b164:	00802284 	movi	r2,138
    b168:	20800015 	stw	r2,0(r4)
    b16c:	00bfffc4 	movi	r2,-1
    b170:	f800283a 	ret

0000b174 <_wctomb_r>:
    b174:	00800074 	movhi	r2,1
    b178:	defff904 	addi	sp,sp,-28
    b17c:	108bd304 	addi	r2,r2,12108
    b180:	dfc00615 	stw	ra,24(sp)
    b184:	dc400515 	stw	r17,20(sp)
    b188:	dc000415 	stw	r16,16(sp)
    b18c:	3823883a 	mov	r17,r7
    b190:	14000017 	ldw	r16,0(r2)
    b194:	d9000115 	stw	r4,4(sp)
    b198:	d9400215 	stw	r5,8(sp)
    b19c:	d9800315 	stw	r6,12(sp)
    b1a0:	00075fc0 	call	75fc <__locale_charset>
    b1a4:	d9000117 	ldw	r4,4(sp)
    b1a8:	d9400217 	ldw	r5,8(sp)
    b1ac:	d9800317 	ldw	r6,12(sp)
    b1b0:	dc400015 	stw	r17,0(sp)
    b1b4:	100f883a 	mov	r7,r2
    b1b8:	803ee83a 	callr	r16
    b1bc:	dfc00617 	ldw	ra,24(sp)
    b1c0:	dc400517 	ldw	r17,20(sp)
    b1c4:	dc000417 	ldw	r16,16(sp)
    b1c8:	dec00704 	addi	sp,sp,28
    b1cc:	f800283a 	ret

0000b1d0 <__udivdi3>:
    b1d0:	defff504 	addi	sp,sp,-44
    b1d4:	dcc00415 	stw	r19,16(sp)
    b1d8:	dc000115 	stw	r16,4(sp)
    b1dc:	dfc00a15 	stw	ra,40(sp)
    b1e0:	df000915 	stw	fp,36(sp)
    b1e4:	ddc00815 	stw	r23,32(sp)
    b1e8:	dd800715 	stw	r22,28(sp)
    b1ec:	dd400615 	stw	r21,24(sp)
    b1f0:	dd000515 	stw	r20,20(sp)
    b1f4:	dc800315 	stw	r18,12(sp)
    b1f8:	dc400215 	stw	r17,8(sp)
    b1fc:	2027883a 	mov	r19,r4
    b200:	2821883a 	mov	r16,r5
    b204:	3800421e 	bne	r7,zero,b310 <__udivdi3+0x140>
    b208:	3025883a 	mov	r18,r6
    b20c:	2023883a 	mov	r17,r4
    b210:	2980542e 	bgeu	r5,r6,b364 <__udivdi3+0x194>
    b214:	00bfffd4 	movui	r2,65535
    b218:	282d883a 	mov	r22,r5
    b21c:	1180a836 	bltu	r2,r6,b4c0 <__udivdi3+0x2f0>
    b220:	00803fc4 	movi	r2,255
    b224:	1181422e 	bgeu	r2,r6,b730 <__udivdi3+0x560>
    b228:	00800204 	movi	r2,8
    b22c:	1007883a 	mov	r3,r2
    b230:	3084d83a 	srl	r2,r6,r2
    b234:	01000074 	movhi	r4,1
    b238:	2104d804 	addi	r4,r4,4960
    b23c:	2085883a 	add	r2,r4,r2
    b240:	10800003 	ldbu	r2,0(r2)
    b244:	10c7883a 	add	r3,r2,r3
    b248:	00800804 	movi	r2,32
    b24c:	10c5c83a 	sub	r2,r2,r3
    b250:	10000526 	beq	r2,zero,b268 <__udivdi3+0x98>
    b254:	80a0983a 	sll	r16,r16,r2
    b258:	98c6d83a 	srl	r3,r19,r3
    b25c:	30a4983a 	sll	r18,r6,r2
    b260:	98a2983a 	sll	r17,r19,r2
    b264:	80ecb03a 	or	r22,r16,r3
    b268:	902ad43a 	srli	r21,r18,16
    b26c:	b009883a 	mov	r4,r22
    b270:	953fffcc 	andi	r20,r18,65535
    b274:	a80b883a 	mov	r5,r21
    b278:	000205c0 	call	205c <__umodsi3>
    b27c:	b009883a 	mov	r4,r22
    b280:	a80b883a 	mov	r5,r21
    b284:	1027883a 	mov	r19,r2
    b288:	00020540 	call	2054 <__udivsi3>
    b28c:	1021883a 	mov	r16,r2
    b290:	8806d43a 	srli	r3,r17,16
    b294:	9804943a 	slli	r2,r19,16
    b298:	8527383a 	mul	r19,r16,r20
    b29c:	10c4b03a 	or	r2,r2,r3
    b2a0:	14c0052e 	bgeu	r2,r19,b2b8 <__udivdi3+0xe8>
    b2a4:	1485883a 	add	r2,r2,r18
    b2a8:	80ffffc4 	addi	r3,r16,-1
    b2ac:	14800136 	bltu	r2,r18,b2b4 <__udivdi3+0xe4>
    b2b0:	14c13436 	bltu	r2,r19,b784 <__udivdi3+0x5b4>
    b2b4:	1821883a 	mov	r16,r3
    b2b8:	14e7c83a 	sub	r19,r2,r19
    b2bc:	9809883a 	mov	r4,r19
    b2c0:	a80b883a 	mov	r5,r21
    b2c4:	000205c0 	call	205c <__umodsi3>
    b2c8:	102d883a 	mov	r22,r2
    b2cc:	9809883a 	mov	r4,r19
    b2d0:	a80b883a 	mov	r5,r21
    b2d4:	00020540 	call	2054 <__udivsi3>
    b2d8:	b02c943a 	slli	r22,r22,16
    b2dc:	1529383a 	mul	r20,r2,r20
    b2e0:	8c7fffcc 	andi	r17,r17,65535
    b2e4:	b462b03a 	or	r17,r22,r17
    b2e8:	8d00052e 	bgeu	r17,r20,b300 <__udivdi3+0x130>
    b2ec:	8ca3883a 	add	r17,r17,r18
    b2f0:	10ffffc4 	addi	r3,r2,-1
    b2f4:	8c80f636 	bltu	r17,r18,b6d0 <__udivdi3+0x500>
    b2f8:	8d00f52e 	bgeu	r17,r20,b6d0 <__udivdi3+0x500>
    b2fc:	10bfff84 	addi	r2,r2,-2
    b300:	8020943a 	slli	r16,r16,16
    b304:	0007883a 	mov	r3,zero
    b308:	1404b03a 	or	r2,r2,r16
    b30c:	00005b06 	br	b47c <__udivdi3+0x2ac>
    b310:	29c05836 	bltu	r5,r7,b474 <__udivdi3+0x2a4>
    b314:	00bfffd4 	movui	r2,65535
    b318:	11c0642e 	bgeu	r2,r7,b4ac <__udivdi3+0x2dc>
    b31c:	00804034 	movhi	r2,256
    b320:	10bfffc4 	addi	r2,r2,-1
    b324:	11c0f32e 	bgeu	r2,r7,b6f4 <__udivdi3+0x524>
    b328:	00c00604 	movi	r3,24
    b32c:	180b883a 	mov	r5,r3
    b330:	38c6d83a 	srl	r3,r7,r3
    b334:	00800074 	movhi	r2,1
    b338:	1084d804 	addi	r2,r2,4960
    b33c:	10c7883a 	add	r3,r2,r3
    b340:	18c00003 	ldbu	r3,0(r3)
    b344:	01000804 	movi	r4,32
    b348:	1947883a 	add	r3,r3,r5
    b34c:	20e5c83a 	sub	r18,r4,r3
    b350:	9000661e 	bne	r18,zero,b4ec <__udivdi3+0x31c>
    b354:	3c00f936 	bltu	r7,r16,b73c <__udivdi3+0x56c>
    b358:	9985403a 	cmpgeu	r2,r19,r6
    b35c:	0007883a 	mov	r3,zero
    b360:	00004606 	br	b47c <__udivdi3+0x2ac>
    b364:	3000041e 	bne	r6,zero,b378 <__udivdi3+0x1a8>
    b368:	01000044 	movi	r4,1
    b36c:	000b883a 	mov	r5,zero
    b370:	00020540 	call	2054 <__udivsi3>
    b374:	1025883a 	mov	r18,r2
    b378:	00bfffd4 	movui	r2,65535
    b37c:	1480562e 	bgeu	r2,r18,b4d8 <__udivdi3+0x308>
    b380:	00804034 	movhi	r2,256
    b384:	10bfffc4 	addi	r2,r2,-1
    b388:	1480e32e 	bgeu	r2,r18,b718 <__udivdi3+0x548>
    b38c:	00800604 	movi	r2,24
    b390:	1007883a 	mov	r3,r2
    b394:	9084d83a 	srl	r2,r18,r2
    b398:	01000074 	movhi	r4,1
    b39c:	2104d804 	addi	r4,r4,4960
    b3a0:	2085883a 	add	r2,r4,r2
    b3a4:	10800003 	ldbu	r2,0(r2)
    b3a8:	10c5883a 	add	r2,r2,r3
    b3ac:	00c00804 	movi	r3,32
    b3b0:	1887c83a 	sub	r3,r3,r2
    b3b4:	1800911e 	bne	r3,zero,b5fc <__udivdi3+0x42c>
    b3b8:	9028d43a 	srli	r20,r18,16
    b3bc:	84a1c83a 	sub	r16,r16,r18
    b3c0:	957fffcc 	andi	r21,r18,65535
    b3c4:	00c00044 	movi	r3,1
    b3c8:	8009883a 	mov	r4,r16
    b3cc:	a00b883a 	mov	r5,r20
    b3d0:	d8c00015 	stw	r3,0(sp)
    b3d4:	000205c0 	call	205c <__umodsi3>
    b3d8:	8009883a 	mov	r4,r16
    b3dc:	a00b883a 	mov	r5,r20
    b3e0:	1027883a 	mov	r19,r2
    b3e4:	00020540 	call	2054 <__udivsi3>
    b3e8:	1021883a 	mov	r16,r2
    b3ec:	880cd43a 	srli	r6,r17,16
    b3f0:	9804943a 	slli	r2,r19,16
    b3f4:	8567383a 	mul	r19,r16,r21
    b3f8:	d8c00017 	ldw	r3,0(sp)
    b3fc:	1188b03a 	or	r4,r2,r6
    b400:	24c0052e 	bgeu	r4,r19,b418 <__udivdi3+0x248>
    b404:	2489883a 	add	r4,r4,r18
    b408:	80bfffc4 	addi	r2,r16,-1
    b40c:	24800136 	bltu	r4,r18,b414 <__udivdi3+0x244>
    b410:	24c0d936 	bltu	r4,r19,b778 <__udivdi3+0x5a8>
    b414:	1021883a 	mov	r16,r2
    b418:	24e7c83a 	sub	r19,r4,r19
    b41c:	9809883a 	mov	r4,r19
    b420:	a00b883a 	mov	r5,r20
    b424:	d8c00015 	stw	r3,0(sp)
    b428:	000205c0 	call	205c <__umodsi3>
    b42c:	102d883a 	mov	r22,r2
    b430:	9809883a 	mov	r4,r19
    b434:	a00b883a 	mov	r5,r20
    b438:	00020540 	call	2054 <__udivsi3>
    b43c:	b02c943a 	slli	r22,r22,16
    b440:	156b383a 	mul	r21,r2,r21
    b444:	8c7fffcc 	andi	r17,r17,65535
    b448:	b462b03a 	or	r17,r22,r17
    b44c:	d8c00017 	ldw	r3,0(sp)
    b450:	8d40052e 	bgeu	r17,r21,b468 <__udivdi3+0x298>
    b454:	8ca3883a 	add	r17,r17,r18
    b458:	113fffc4 	addi	r4,r2,-1
    b45c:	8c809a36 	bltu	r17,r18,b6c8 <__udivdi3+0x4f8>
    b460:	8d40992e 	bgeu	r17,r21,b6c8 <__udivdi3+0x4f8>
    b464:	10bfff84 	addi	r2,r2,-2
    b468:	8020943a 	slli	r16,r16,16
    b46c:	1404b03a 	or	r2,r2,r16
    b470:	00000206 	br	b47c <__udivdi3+0x2ac>
    b474:	0007883a 	mov	r3,zero
    b478:	0005883a 	mov	r2,zero
    b47c:	dfc00a17 	ldw	ra,40(sp)
    b480:	df000917 	ldw	fp,36(sp)
    b484:	ddc00817 	ldw	r23,32(sp)
    b488:	dd800717 	ldw	r22,28(sp)
    b48c:	dd400617 	ldw	r21,24(sp)
    b490:	dd000517 	ldw	r20,20(sp)
    b494:	dcc00417 	ldw	r19,16(sp)
    b498:	dc800317 	ldw	r18,12(sp)
    b49c:	dc400217 	ldw	r17,8(sp)
    b4a0:	dc000117 	ldw	r16,4(sp)
    b4a4:	dec00b04 	addi	sp,sp,44
    b4a8:	f800283a 	ret
    b4ac:	00803fc4 	movi	r2,255
    b4b0:	11c0932e 	bgeu	r2,r7,b700 <__udivdi3+0x530>
    b4b4:	00c00204 	movi	r3,8
    b4b8:	180b883a 	mov	r5,r3
    b4bc:	003f9c06 	br	b330 <__udivdi3+0x160>
    b4c0:	00804034 	movhi	r2,256
    b4c4:	10bfffc4 	addi	r2,r2,-1
    b4c8:	1180902e 	bgeu	r2,r6,b70c <__udivdi3+0x53c>
    b4cc:	00800604 	movi	r2,24
    b4d0:	1007883a 	mov	r3,r2
    b4d4:	003f5606 	br	b230 <__udivdi3+0x60>
    b4d8:	00803fc4 	movi	r2,255
    b4dc:	1480912e 	bgeu	r2,r18,b724 <__udivdi3+0x554>
    b4e0:	00800204 	movi	r2,8
    b4e4:	1007883a 	mov	r3,r2
    b4e8:	003faa06 	br	b394 <__udivdi3+0x1c4>
    b4ec:	30eed83a 	srl	r23,r6,r3
    b4f0:	3c8e983a 	sll	r7,r7,r18
    b4f4:	80f8d83a 	srl	fp,r16,r3
    b4f8:	98c6d83a 	srl	r3,r19,r3
    b4fc:	3deeb03a 	or	r23,r7,r23
    b500:	b828d43a 	srli	r20,r23,16
    b504:	84a0983a 	sll	r16,r16,r18
    b508:	e009883a 	mov	r4,fp
    b50c:	a00b883a 	mov	r5,r20
    b510:	80e2b03a 	or	r17,r16,r3
    b514:	34aa983a 	sll	r21,r6,r18
    b518:	000205c0 	call	205c <__umodsi3>
    b51c:	e009883a 	mov	r4,fp
    b520:	a00b883a 	mov	r5,r20
    b524:	102d883a 	mov	r22,r2
    b528:	00020540 	call	2054 <__udivsi3>
    b52c:	1021883a 	mov	r16,r2
    b530:	bf3fffcc 	andi	fp,r23,65535
    b534:	b004943a 	slli	r2,r22,16
    b538:	8808d43a 	srli	r4,r17,16
    b53c:	872d383a 	mul	r22,r16,fp
    b540:	1104b03a 	or	r2,r2,r4
    b544:	1580042e 	bgeu	r2,r22,b558 <__udivdi3+0x388>
    b548:	15c5883a 	add	r2,r2,r23
    b54c:	80ffffc4 	addi	r3,r16,-1
    b550:	15c0812e 	bgeu	r2,r23,b758 <__udivdi3+0x588>
    b554:	1821883a 	mov	r16,r3
    b558:	15adc83a 	sub	r22,r2,r22
    b55c:	b009883a 	mov	r4,r22
    b560:	a00b883a 	mov	r5,r20
    b564:	000205c0 	call	205c <__umodsi3>
    b568:	a00b883a 	mov	r5,r20
    b56c:	b009883a 	mov	r4,r22
    b570:	d8800015 	stw	r2,0(sp)
    b574:	00020540 	call	2054 <__udivsi3>
    b578:	d8c00017 	ldw	r3,0(sp)
    b57c:	170b383a 	mul	r5,r2,fp
    b580:	8c7fffcc 	andi	r17,r17,65535
    b584:	1806943a 	slli	r3,r3,16
    b588:	1c46b03a 	or	r3,r3,r17
    b58c:	1940042e 	bgeu	r3,r5,b5a0 <__udivdi3+0x3d0>
    b590:	1dc7883a 	add	r3,r3,r23
    b594:	113fffc4 	addi	r4,r2,-1
    b598:	1dc06b2e 	bgeu	r3,r23,b748 <__udivdi3+0x578>
    b59c:	2005883a 	mov	r2,r4
    b5a0:	8020943a 	slli	r16,r16,16
    b5a4:	a9ffffcc 	andi	r7,r21,65535
    b5a8:	a82ad43a 	srli	r21,r21,16
    b5ac:	1404b03a 	or	r2,r2,r16
    b5b0:	113fffcc 	andi	r4,r2,65535
    b5b4:	100cd43a 	srli	r6,r2,16
    b5b8:	21d3383a 	mul	r9,r4,r7
    b5bc:	2549383a 	mul	r4,r4,r21
    b5c0:	31cf383a 	mul	r7,r6,r7
    b5c4:	4810d43a 	srli	r8,r9,16
    b5c8:	1947c83a 	sub	r3,r3,r5
    b5cc:	3909883a 	add	r4,r7,r4
    b5d0:	2209883a 	add	r4,r4,r8
    b5d4:	354d383a 	mul	r6,r6,r21
    b5d8:	21c0022e 	bgeu	r4,r7,b5e4 <__udivdi3+0x414>
    b5dc:	01400074 	movhi	r5,1
    b5e0:	314d883a 	add	r6,r6,r5
    b5e4:	202ad43a 	srli	r21,r4,16
    b5e8:	354d883a 	add	r6,r6,r21
    b5ec:	19803f36 	bltu	r3,r6,b6ec <__udivdi3+0x51c>
    b5f0:	19803926 	beq	r3,r6,b6d8 <__udivdi3+0x508>
    b5f4:	0007883a 	mov	r3,zero
    b5f8:	003fa006 	br	b47c <__udivdi3+0x2ac>
    b5fc:	90e4983a 	sll	r18,r18,r3
    b600:	80aad83a 	srl	r21,r16,r2
    b604:	80e0983a 	sll	r16,r16,r3
    b608:	9028d43a 	srli	r20,r18,16
    b60c:	9884d83a 	srl	r2,r19,r2
    b610:	a809883a 	mov	r4,r21
    b614:	a00b883a 	mov	r5,r20
    b618:	80acb03a 	or	r22,r16,r2
    b61c:	98e2983a 	sll	r17,r19,r3
    b620:	000205c0 	call	205c <__umodsi3>
    b624:	a809883a 	mov	r4,r21
    b628:	a00b883a 	mov	r5,r20
    b62c:	1021883a 	mov	r16,r2
    b630:	00020540 	call	2054 <__udivsi3>
    b634:	957fffcc 	andi	r21,r18,65535
    b638:	8020943a 	slli	r16,r16,16
    b63c:	b00ad43a 	srli	r5,r22,16
    b640:	1567383a 	mul	r19,r2,r21
    b644:	102f883a 	mov	r23,r2
    b648:	8148b03a 	or	r4,r16,r5
    b64c:	24c0062e 	bgeu	r4,r19,b668 <__udivdi3+0x498>
    b650:	2489883a 	add	r4,r4,r18
    b654:	10bfffc4 	addi	r2,r2,-1
    b658:	24804536 	bltu	r4,r18,b770 <__udivdi3+0x5a0>
    b65c:	24c0442e 	bgeu	r4,r19,b770 <__udivdi3+0x5a0>
    b660:	bdffff84 	addi	r23,r23,-2
    b664:	2489883a 	add	r4,r4,r18
    b668:	24e7c83a 	sub	r19,r4,r19
    b66c:	9809883a 	mov	r4,r19
    b670:	a00b883a 	mov	r5,r20
    b674:	000205c0 	call	205c <__umodsi3>
    b678:	1021883a 	mov	r16,r2
    b67c:	9809883a 	mov	r4,r19
    b680:	a00b883a 	mov	r5,r20
    b684:	00020540 	call	2054 <__udivsi3>
    b688:	8020943a 	slli	r16,r16,16
    b68c:	1007883a 	mov	r3,r2
    b690:	1545383a 	mul	r2,r2,r21
    b694:	b13fffcc 	andi	r4,r22,65535
    b698:	8108b03a 	or	r4,r16,r4
    b69c:	2080062e 	bgeu	r4,r2,b6b8 <__udivdi3+0x4e8>
    b6a0:	2489883a 	add	r4,r4,r18
    b6a4:	197fffc4 	addi	r5,r3,-1
    b6a8:	24802f36 	bltu	r4,r18,b768 <__udivdi3+0x598>
    b6ac:	20802e2e 	bgeu	r4,r2,b768 <__udivdi3+0x598>
    b6b0:	18ffff84 	addi	r3,r3,-2
    b6b4:	2489883a 	add	r4,r4,r18
    b6b8:	b82e943a 	slli	r23,r23,16
    b6bc:	20a1c83a 	sub	r16,r4,r2
    b6c0:	1dc6b03a 	or	r3,r3,r23
    b6c4:	003f4006 	br	b3c8 <__udivdi3+0x1f8>
    b6c8:	2005883a 	mov	r2,r4
    b6cc:	003f6606 	br	b468 <__udivdi3+0x298>
    b6d0:	1805883a 	mov	r2,r3
    b6d4:	003f0a06 	br	b300 <__udivdi3+0x130>
    b6d8:	2006943a 	slli	r3,r4,16
    b6dc:	9c88983a 	sll	r4,r19,r18
    b6e0:	4a7fffcc 	andi	r9,r9,65535
    b6e4:	1a47883a 	add	r3,r3,r9
    b6e8:	20ffc22e 	bgeu	r4,r3,b5f4 <__udivdi3+0x424>
    b6ec:	10bfffc4 	addi	r2,r2,-1
    b6f0:	003fc006 	br	b5f4 <__udivdi3+0x424>
    b6f4:	00c00404 	movi	r3,16
    b6f8:	180b883a 	mov	r5,r3
    b6fc:	003f0c06 	br	b330 <__udivdi3+0x160>
    b700:	0007883a 	mov	r3,zero
    b704:	000b883a 	mov	r5,zero
    b708:	003f0906 	br	b330 <__udivdi3+0x160>
    b70c:	00800404 	movi	r2,16
    b710:	1007883a 	mov	r3,r2
    b714:	003ec606 	br	b230 <__udivdi3+0x60>
    b718:	00800404 	movi	r2,16
    b71c:	1007883a 	mov	r3,r2
    b720:	003f1c06 	br	b394 <__udivdi3+0x1c4>
    b724:	0005883a 	mov	r2,zero
    b728:	0007883a 	mov	r3,zero
    b72c:	003f1906 	br	b394 <__udivdi3+0x1c4>
    b730:	0005883a 	mov	r2,zero
    b734:	0007883a 	mov	r3,zero
    b738:	003ebd06 	br	b230 <__udivdi3+0x60>
    b73c:	0007883a 	mov	r3,zero
    b740:	00800044 	movi	r2,1
    b744:	003f4d06 	br	b47c <__udivdi3+0x2ac>
    b748:	197f942e 	bgeu	r3,r5,b59c <__udivdi3+0x3cc>
    b74c:	10bfff84 	addi	r2,r2,-2
    b750:	1dc7883a 	add	r3,r3,r23
    b754:	003f9206 	br	b5a0 <__udivdi3+0x3d0>
    b758:	15bf7e2e 	bgeu	r2,r22,b554 <__udivdi3+0x384>
    b75c:	843fff84 	addi	r16,r16,-2
    b760:	15c5883a 	add	r2,r2,r23
    b764:	003f7c06 	br	b558 <__udivdi3+0x388>
    b768:	2807883a 	mov	r3,r5
    b76c:	003fd206 	br	b6b8 <__udivdi3+0x4e8>
    b770:	102f883a 	mov	r23,r2
    b774:	003fbc06 	br	b668 <__udivdi3+0x498>
    b778:	843fff84 	addi	r16,r16,-2
    b77c:	2489883a 	add	r4,r4,r18
    b780:	003f2506 	br	b418 <__udivdi3+0x248>
    b784:	843fff84 	addi	r16,r16,-2
    b788:	1485883a 	add	r2,r2,r18
    b78c:	003eca06 	br	b2b8 <__udivdi3+0xe8>

0000b790 <__umoddi3>:
    b790:	defff404 	addi	sp,sp,-48
    b794:	ddc00915 	stw	r23,36(sp)
    b798:	dc400315 	stw	r17,12(sp)
    b79c:	dc000215 	stw	r16,8(sp)
    b7a0:	dfc00b15 	stw	ra,44(sp)
    b7a4:	df000a15 	stw	fp,40(sp)
    b7a8:	dd800815 	stw	r22,32(sp)
    b7ac:	dd400715 	stw	r21,28(sp)
    b7b0:	dd000615 	stw	r20,24(sp)
    b7b4:	dcc00515 	stw	r19,20(sp)
    b7b8:	dc800415 	stw	r18,16(sp)
    b7bc:	2021883a 	mov	r16,r4
    b7c0:	2823883a 	mov	r17,r5
    b7c4:	282f883a 	mov	r23,r5
    b7c8:	3800381e 	bne	r7,zero,b8ac <__umoddi3+0x11c>
    b7cc:	3027883a 	mov	r19,r6
    b7d0:	2029883a 	mov	r20,r4
    b7d4:	29804e2e 	bgeu	r5,r6,b910 <__umoddi3+0x180>
    b7d8:	00bfffd4 	movui	r2,65535
    b7dc:	11809c36 	bltu	r2,r6,ba50 <__umoddi3+0x2c0>
    b7e0:	00803fc4 	movi	r2,255
    b7e4:	11813b2e 	bgeu	r2,r6,bcd4 <__umoddi3+0x544>
    b7e8:	01400204 	movi	r5,8
    b7ec:	2805883a 	mov	r2,r5
    b7f0:	314ad83a 	srl	r5,r6,r5
    b7f4:	00c00074 	movhi	r3,1
    b7f8:	18c4d804 	addi	r3,r3,4960
    b7fc:	194b883a 	add	r5,r3,r5
    b800:	29000003 	ldbu	r4,0(r5)
    b804:	2089883a 	add	r4,r4,r2
    b808:	00800804 	movi	r2,32
    b80c:	1105c83a 	sub	r2,r2,r4
    b810:	1000ec26 	beq	r2,zero,bbc4 <__umoddi3+0x434>
    b814:	88a2983a 	sll	r17,r17,r2
    b818:	8108d83a 	srl	r4,r16,r4
    b81c:	30a6983a 	sll	r19,r6,r2
    b820:	80a8983a 	sll	r20,r16,r2
    b824:	1025883a 	mov	r18,r2
    b828:	892eb03a 	or	r23,r17,r4
    b82c:	982cd43a 	srli	r22,r19,16
    b830:	b809883a 	mov	r4,r23
    b834:	9d7fffcc 	andi	r21,r19,65535
    b838:	b00b883a 	mov	r5,r22
    b83c:	000205c0 	call	205c <__umodsi3>
    b840:	b809883a 	mov	r4,r23
    b844:	b00b883a 	mov	r5,r22
    b848:	1021883a 	mov	r16,r2
    b84c:	00020540 	call	2054 <__udivsi3>
    b850:	8020943a 	slli	r16,r16,16
    b854:	a00cd43a 	srli	r6,r20,16
    b858:	1545383a 	mul	r2,r2,r21
    b85c:	8188b03a 	or	r4,r16,r6
    b860:	2080042e 	bgeu	r4,r2,b874 <__umoddi3+0xe4>
    b864:	24c9883a 	add	r4,r4,r19
    b868:	24c00236 	bltu	r4,r19,b874 <__umoddi3+0xe4>
    b86c:	2080012e 	bgeu	r4,r2,b874 <__umoddi3+0xe4>
    b870:	24c9883a 	add	r4,r4,r19
    b874:	20a3c83a 	sub	r17,r4,r2
    b878:	8809883a 	mov	r4,r17
    b87c:	b00b883a 	mov	r5,r22
    b880:	000205c0 	call	205c <__umodsi3>
    b884:	8809883a 	mov	r4,r17
    b888:	b00b883a 	mov	r5,r22
    b88c:	1021883a 	mov	r16,r2
    b890:	00020540 	call	2054 <__udivsi3>
    b894:	8006943a 	slli	r3,r16,16
    b898:	1545383a 	mul	r2,r2,r21
    b89c:	a13fffcc 	andi	r4,r20,65535
    b8a0:	1906b03a 	or	r3,r3,r4
    b8a4:	1880532e 	bgeu	r3,r2,b9f4 <__umoddi3+0x264>
    b8a8:	00004e06 	br	b9e4 <__umoddi3+0x254>
    b8ac:	29c05536 	bltu	r5,r7,ba04 <__umoddi3+0x274>
    b8b0:	00bfffd4 	movui	r2,65535
    b8b4:	11c0612e 	bgeu	r2,r7,ba3c <__umoddi3+0x2ac>
    b8b8:	00804034 	movhi	r2,256
    b8bc:	10bfffc4 	addi	r2,r2,-1
    b8c0:	11c0f82e 	bgeu	r2,r7,bca4 <__umoddi3+0x514>
    b8c4:	01400604 	movi	r5,24
    b8c8:	282b883a 	mov	r21,r5
    b8cc:	394ad83a 	srl	r5,r7,r5
    b8d0:	00c00074 	movhi	r3,1
    b8d4:	18c4d804 	addi	r3,r3,4960
    b8d8:	194b883a 	add	r5,r3,r5
    b8dc:	28800003 	ldbu	r2,0(r5)
    b8e0:	00c00804 	movi	r3,32
    b8e4:	156b883a 	add	r21,r2,r21
    b8e8:	1d69c83a 	sub	r20,r3,r21
    b8ec:	a000631e 	bne	r20,zero,ba7c <__umoddi3+0x2ec>
    b8f0:	3c400136 	bltu	r7,r17,b8f8 <__umoddi3+0x168>
    b8f4:	81810436 	bltu	r16,r6,bd08 <__umoddi3+0x578>
    b8f8:	8185c83a 	sub	r2,r16,r6
    b8fc:	89e3c83a 	sub	r17,r17,r7
    b900:	8087803a 	cmpltu	r3,r16,r2
    b904:	88efc83a 	sub	r23,r17,r3
    b908:	b807883a 	mov	r3,r23
    b90c:	00003f06 	br	ba0c <__umoddi3+0x27c>
    b910:	3000041e 	bne	r6,zero,b924 <__umoddi3+0x194>
    b914:	01000044 	movi	r4,1
    b918:	000b883a 	mov	r5,zero
    b91c:	00020540 	call	2054 <__udivsi3>
    b920:	1027883a 	mov	r19,r2
    b924:	00bfffd4 	movui	r2,65535
    b928:	14c04f2e 	bgeu	r2,r19,ba68 <__umoddi3+0x2d8>
    b92c:	00804034 	movhi	r2,256
    b930:	10bfffc4 	addi	r2,r2,-1
    b934:	14c0e42e 	bgeu	r2,r19,bcc8 <__umoddi3+0x538>
    b938:	00800604 	movi	r2,24
    b93c:	1007883a 	mov	r3,r2
    b940:	9884d83a 	srl	r2,r19,r2
    b944:	01000074 	movhi	r4,1
    b948:	2104d804 	addi	r4,r4,4960
    b94c:	2085883a 	add	r2,r4,r2
    b950:	11000003 	ldbu	r4,0(r2)
    b954:	00800804 	movi	r2,32
    b958:	20c7883a 	add	r3,r4,r3
    b95c:	10c5c83a 	sub	r2,r2,r3
    b960:	10009a1e 	bne	r2,zero,bbcc <__umoddi3+0x43c>
    b964:	982cd43a 	srli	r22,r19,16
    b968:	8ce3c83a 	sub	r17,r17,r19
    b96c:	9c3fffcc 	andi	r16,r19,65535
    b970:	0025883a 	mov	r18,zero
    b974:	8809883a 	mov	r4,r17
    b978:	b00b883a 	mov	r5,r22
    b97c:	000205c0 	call	205c <__umodsi3>
    b980:	8809883a 	mov	r4,r17
    b984:	b00b883a 	mov	r5,r22
    b988:	102b883a 	mov	r21,r2
    b98c:	00020540 	call	2054 <__udivsi3>
    b990:	a806943a 	slli	r3,r21,16
    b994:	a008d43a 	srli	r4,r20,16
    b998:	1405383a 	mul	r2,r2,r16
    b99c:	190cb03a 	or	r6,r3,r4
    b9a0:	3080032e 	bgeu	r6,r2,b9b0 <__umoddi3+0x220>
    b9a4:	34cd883a 	add	r6,r6,r19
    b9a8:	34c00136 	bltu	r6,r19,b9b0 <__umoddi3+0x220>
    b9ac:	3080d436 	bltu	r6,r2,bd00 <__umoddi3+0x570>
    b9b0:	30abc83a 	sub	r21,r6,r2
    b9b4:	a809883a 	mov	r4,r21
    b9b8:	b00b883a 	mov	r5,r22
    b9bc:	000205c0 	call	205c <__umodsi3>
    b9c0:	1023883a 	mov	r17,r2
    b9c4:	a809883a 	mov	r4,r21
    b9c8:	b00b883a 	mov	r5,r22
    b9cc:	00020540 	call	2054 <__udivsi3>
    b9d0:	8822943a 	slli	r17,r17,16
    b9d4:	1405383a 	mul	r2,r2,r16
    b9d8:	a13fffcc 	andi	r4,r20,65535
    b9dc:	8906b03a 	or	r3,r17,r4
    b9e0:	1880042e 	bgeu	r3,r2,b9f4 <__umoddi3+0x264>
    b9e4:	1cc7883a 	add	r3,r3,r19
    b9e8:	1cc00236 	bltu	r3,r19,b9f4 <__umoddi3+0x264>
    b9ec:	1880012e 	bgeu	r3,r2,b9f4 <__umoddi3+0x264>
    b9f0:	1cc7883a 	add	r3,r3,r19
    b9f4:	1887c83a 	sub	r3,r3,r2
    b9f8:	1c84d83a 	srl	r2,r3,r18
    b9fc:	0007883a 	mov	r3,zero
    ba00:	00000206 	br	ba0c <__umoddi3+0x27c>
    ba04:	2005883a 	mov	r2,r4
    ba08:	2807883a 	mov	r3,r5
    ba0c:	dfc00b17 	ldw	ra,44(sp)
    ba10:	df000a17 	ldw	fp,40(sp)
    ba14:	ddc00917 	ldw	r23,36(sp)
    ba18:	dd800817 	ldw	r22,32(sp)
    ba1c:	dd400717 	ldw	r21,28(sp)
    ba20:	dd000617 	ldw	r20,24(sp)
    ba24:	dcc00517 	ldw	r19,20(sp)
    ba28:	dc800417 	ldw	r18,16(sp)
    ba2c:	dc400317 	ldw	r17,12(sp)
    ba30:	dc000217 	ldw	r16,8(sp)
    ba34:	dec00c04 	addi	sp,sp,48
    ba38:	f800283a 	ret
    ba3c:	00803fc4 	movi	r2,255
    ba40:	11c0952e 	bgeu	r2,r7,bc98 <__umoddi3+0x508>
    ba44:	01400204 	movi	r5,8
    ba48:	282b883a 	mov	r21,r5
    ba4c:	003f9f06 	br	b8cc <__umoddi3+0x13c>
    ba50:	00804034 	movhi	r2,256
    ba54:	10bfffc4 	addi	r2,r2,-1
    ba58:	1180952e 	bgeu	r2,r6,bcb0 <__umoddi3+0x520>
    ba5c:	01400604 	movi	r5,24
    ba60:	2805883a 	mov	r2,r5
    ba64:	003f6206 	br	b7f0 <__umoddi3+0x60>
    ba68:	00803fc4 	movi	r2,255
    ba6c:	14c0932e 	bgeu	r2,r19,bcbc <__umoddi3+0x52c>
    ba70:	00800204 	movi	r2,8
    ba74:	1007883a 	mov	r3,r2
    ba78:	003fb106 	br	b940 <__umoddi3+0x1b0>
    ba7c:	3548d83a 	srl	r4,r6,r21
    ba80:	3d0e983a 	sll	r7,r7,r20
    ba84:	8d10983a 	sll	r8,r17,r20
    ba88:	8d6cd83a 	srl	r22,r17,r21
    ba8c:	3922b03a 	or	r17,r7,r4
    ba90:	882ed43a 	srli	r23,r17,16
    ba94:	8564d83a 	srl	r18,r16,r21
    ba98:	b009883a 	mov	r4,r22
    ba9c:	b80b883a 	mov	r5,r23
    baa0:	44a4b03a 	or	r18,r8,r18
    baa4:	3526983a 	sll	r19,r6,r20
    baa8:	000205c0 	call	205c <__umodsi3>
    baac:	b009883a 	mov	r4,r22
    bab0:	b80b883a 	mov	r5,r23
    bab4:	1039883a 	mov	fp,r2
    bab8:	00020540 	call	2054 <__udivsi3>
    babc:	102d883a 	mov	r22,r2
    bac0:	8a3fffcc 	andi	r8,r17,65535
    bac4:	e004943a 	slli	r2,fp,16
    bac8:	900cd43a 	srli	r6,r18,16
    bacc:	b239383a 	mul	fp,r22,r8
    bad0:	8520983a 	sll	r16,r16,r20
    bad4:	118ab03a 	or	r5,r2,r6
    bad8:	2f00042e 	bgeu	r5,fp,baec <__umoddi3+0x35c>
    badc:	2c4b883a 	add	r5,r5,r17
    bae0:	b0bfffc4 	addi	r2,r22,-1
    bae4:	2c40822e 	bgeu	r5,r17,bcf0 <__umoddi3+0x560>
    bae8:	102d883a 	mov	r22,r2
    baec:	2f39c83a 	sub	fp,r5,fp
    baf0:	e009883a 	mov	r4,fp
    baf4:	b80b883a 	mov	r5,r23
    baf8:	da000115 	stw	r8,4(sp)
    bafc:	000205c0 	call	205c <__umodsi3>
    bb00:	e009883a 	mov	r4,fp
    bb04:	b80b883a 	mov	r5,r23
    bb08:	d8800015 	stw	r2,0(sp)
    bb0c:	00020540 	call	2054 <__udivsi3>
    bb10:	d9800017 	ldw	r6,0(sp)
    bb14:	da000117 	ldw	r8,4(sp)
    bb18:	94bfffcc 	andi	r18,r18,65535
    bb1c:	300c943a 	slli	r6,r6,16
    bb20:	1209383a 	mul	r4,r2,r8
    bb24:	3490b03a 	or	r8,r6,r18
    bb28:	4100042e 	bgeu	r8,r4,bb3c <__umoddi3+0x3ac>
    bb2c:	4451883a 	add	r8,r8,r17
    bb30:	10ffffc4 	addi	r3,r2,-1
    bb34:	44406a2e 	bgeu	r8,r17,bce0 <__umoddi3+0x550>
    bb38:	1805883a 	mov	r2,r3
    bb3c:	b012943a 	slli	r9,r22,16
    bb40:	9abfffcc 	andi	r10,r19,65535
    bb44:	980ed43a 	srli	r7,r19,16
    bb48:	124ab03a 	or	r5,r2,r9
    bb4c:	2a7fffcc 	andi	r9,r5,65535
    bb50:	280ad43a 	srli	r5,r5,16
    bb54:	4a8d383a 	mul	r6,r9,r10
    bb58:	49d3383a 	mul	r9,r9,r7
    bb5c:	2a95383a 	mul	r10,r5,r10
    bb60:	3004d43a 	srli	r2,r6,16
    bb64:	4111c83a 	sub	r8,r8,r4
    bb68:	5253883a 	add	r9,r10,r9
    bb6c:	4893883a 	add	r9,r9,r2
    bb70:	29cb383a 	mul	r5,r5,r7
    bb74:	4a80022e 	bgeu	r9,r10,bb80 <__umoddi3+0x3f0>
    bb78:	00800074 	movhi	r2,1
    bb7c:	288b883a 	add	r5,r5,r2
    bb80:	4808d43a 	srli	r4,r9,16
    bb84:	4812943a 	slli	r9,r9,16
    bb88:	31bfffcc 	andi	r6,r6,65535
    bb8c:	290b883a 	add	r5,r5,r4
    bb90:	498d883a 	add	r6,r9,r6
    bb94:	41403a36 	bltu	r8,r5,bc80 <__umoddi3+0x4f0>
    bb98:	41405d26 	beq	r8,r5,bd10 <__umoddi3+0x580>
    bb9c:	4149c83a 	sub	r4,r8,r5
    bba0:	300f883a 	mov	r7,r6
    bba4:	81cfc83a 	sub	r7,r16,r7
    bba8:	81c7803a 	cmpltu	r3,r16,r7
    bbac:	20c7c83a 	sub	r3,r4,r3
    bbb0:	1d44983a 	sll	r2,r3,r21
    bbb4:	3d0ed83a 	srl	r7,r7,r20
    bbb8:	1d06d83a 	srl	r3,r3,r20
    bbbc:	11c4b03a 	or	r2,r2,r7
    bbc0:	003f9206 	br	ba0c <__umoddi3+0x27c>
    bbc4:	0025883a 	mov	r18,zero
    bbc8:	003f1806 	br	b82c <__umoddi3+0x9c>
    bbcc:	98a6983a 	sll	r19,r19,r2
    bbd0:	88e8d83a 	srl	r20,r17,r3
    bbd4:	80c6d83a 	srl	r3,r16,r3
    bbd8:	982cd43a 	srli	r22,r19,16
    bbdc:	88a2983a 	sll	r17,r17,r2
    bbe0:	a009883a 	mov	r4,r20
    bbe4:	b00b883a 	mov	r5,r22
    bbe8:	88eab03a 	or	r21,r17,r3
    bbec:	1025883a 	mov	r18,r2
    bbf0:	000205c0 	call	205c <__umodsi3>
    bbf4:	a009883a 	mov	r4,r20
    bbf8:	b00b883a 	mov	r5,r22
    bbfc:	1023883a 	mov	r17,r2
    bc00:	00020540 	call	2054 <__udivsi3>
    bc04:	9f3fffcc 	andi	fp,r19,65535
    bc08:	8822943a 	slli	r17,r17,16
    bc0c:	a80ad43a 	srli	r5,r21,16
    bc10:	1705383a 	mul	r2,r2,fp
    bc14:	84a8983a 	sll	r20,r16,r18
    bc18:	8948b03a 	or	r4,r17,r5
    bc1c:	2080042e 	bgeu	r4,r2,bc30 <__umoddi3+0x4a0>
    bc20:	24c9883a 	add	r4,r4,r19
    bc24:	24c00236 	bltu	r4,r19,bc30 <__umoddi3+0x4a0>
    bc28:	2080012e 	bgeu	r4,r2,bc30 <__umoddi3+0x4a0>
    bc2c:	24c9883a 	add	r4,r4,r19
    bc30:	20afc83a 	sub	r23,r4,r2
    bc34:	b809883a 	mov	r4,r23
    bc38:	b00b883a 	mov	r5,r22
    bc3c:	000205c0 	call	205c <__umodsi3>
    bc40:	1023883a 	mov	r17,r2
    bc44:	b809883a 	mov	r4,r23
    bc48:	b00b883a 	mov	r5,r22
    bc4c:	00020540 	call	2054 <__udivsi3>
    bc50:	8822943a 	slli	r17,r17,16
    bc54:	1705383a 	mul	r2,r2,fp
    bc58:	a93fffcc 	andi	r4,r21,65535
    bc5c:	8908b03a 	or	r4,r17,r4
    bc60:	2080042e 	bgeu	r4,r2,bc74 <__umoddi3+0x4e4>
    bc64:	24c9883a 	add	r4,r4,r19
    bc68:	24c00236 	bltu	r4,r19,bc74 <__umoddi3+0x4e4>
    bc6c:	2080012e 	bgeu	r4,r2,bc74 <__umoddi3+0x4e4>
    bc70:	24c9883a 	add	r4,r4,r19
    bc74:	20a3c83a 	sub	r17,r4,r2
    bc78:	e021883a 	mov	r16,fp
    bc7c:	003f3d06 	br	b974 <__umoddi3+0x1e4>
    bc80:	34cfc83a 	sub	r7,r6,r19
    bc84:	2c4bc83a 	sub	r5,r5,r17
    bc88:	31cd803a 	cmpltu	r6,r6,r7
    bc8c:	298dc83a 	sub	r6,r5,r6
    bc90:	4189c83a 	sub	r4,r8,r6
    bc94:	003fc306 	br	bba4 <__umoddi3+0x414>
    bc98:	000b883a 	mov	r5,zero
    bc9c:	002b883a 	mov	r21,zero
    bca0:	003f0a06 	br	b8cc <__umoddi3+0x13c>
    bca4:	01400404 	movi	r5,16
    bca8:	282b883a 	mov	r21,r5
    bcac:	003f0706 	br	b8cc <__umoddi3+0x13c>
    bcb0:	01400404 	movi	r5,16
    bcb4:	2805883a 	mov	r2,r5
    bcb8:	003ecd06 	br	b7f0 <__umoddi3+0x60>
    bcbc:	0005883a 	mov	r2,zero
    bcc0:	0007883a 	mov	r3,zero
    bcc4:	003f1e06 	br	b940 <__umoddi3+0x1b0>
    bcc8:	00800404 	movi	r2,16
    bccc:	1007883a 	mov	r3,r2
    bcd0:	003f1b06 	br	b940 <__umoddi3+0x1b0>
    bcd4:	000b883a 	mov	r5,zero
    bcd8:	0005883a 	mov	r2,zero
    bcdc:	003ec406 	br	b7f0 <__umoddi3+0x60>
    bce0:	413f952e 	bgeu	r8,r4,bb38 <__umoddi3+0x3a8>
    bce4:	10bfff84 	addi	r2,r2,-2
    bce8:	4451883a 	add	r8,r8,r17
    bcec:	003f9306 	br	bb3c <__umoddi3+0x3ac>
    bcf0:	2f3f7d2e 	bgeu	r5,fp,bae8 <__umoddi3+0x358>
    bcf4:	b5bfff84 	addi	r22,r22,-2
    bcf8:	2c4b883a 	add	r5,r5,r17
    bcfc:	003f7b06 	br	baec <__umoddi3+0x35c>
    bd00:	34cd883a 	add	r6,r6,r19
    bd04:	003f2a06 	br	b9b0 <__umoddi3+0x220>
    bd08:	8005883a 	mov	r2,r16
    bd0c:	003efe06 	br	b908 <__umoddi3+0x178>
    bd10:	81bfdb36 	bltu	r16,r6,bc80 <__umoddi3+0x4f0>
    bd14:	300f883a 	mov	r7,r6
    bd18:	0009883a 	mov	r4,zero
    bd1c:	003fa106 	br	bba4 <__umoddi3+0x414>

0000bd20 <__adddf3>:
    bd20:	02000434 	movhi	r8,16
    bd24:	423fffc4 	addi	r8,r8,-1
    bd28:	defffb04 	addi	sp,sp,-20
    bd2c:	2a12703a 	and	r9,r5,r8
    bd30:	2806d7fa 	srli	r3,r5,31
    bd34:	3a10703a 	and	r8,r7,r8
    bd38:	3804d53a 	srli	r2,r7,20
    bd3c:	3014d77a 	srli	r10,r6,29
    bd40:	dc000015 	stw	r16,0(sp)
    bd44:	481290fa 	slli	r9,r9,3
    bd48:	2820d53a 	srli	r16,r5,20
    bd4c:	401090fa 	slli	r8,r8,3
    bd50:	200ad77a 	srli	r5,r4,29
    bd54:	380ed7fa 	srli	r7,r7,31
    bd58:	dc800215 	stw	r18,8(sp)
    bd5c:	dc400115 	stw	r17,4(sp)
    bd60:	dfc00415 	stw	ra,16(sp)
    bd64:	dcc00315 	stw	r19,12(sp)
    bd68:	1c803fcc 	andi	r18,r3,255
    bd6c:	8401ffcc 	andi	r16,r16,2047
    bd70:	494ab03a 	or	r5,r9,r5
    bd74:	202290fa 	slli	r17,r4,3
    bd78:	1081ffcc 	andi	r2,r2,2047
    bd7c:	4290b03a 	or	r8,r8,r10
    bd80:	300c90fa 	slli	r6,r6,3
    bd84:	91c07026 	beq	r18,r7,bf48 <__adddf3+0x228>
    bd88:	8087c83a 	sub	r3,r16,r2
    bd8c:	00c0b30e 	bge	zero,r3,c05c <__adddf3+0x33c>
    bd90:	10002a1e 	bne	r2,zero,be3c <__adddf3+0x11c>
    bd94:	4184b03a 	or	r2,r8,r6
    bd98:	1000991e 	bne	r2,zero,c000 <__adddf3+0x2e0>
    bd9c:	888001cc 	andi	r2,r17,7
    bda0:	10005b26 	beq	r2,zero,bf10 <__adddf3+0x1f0>
    bda4:	88c003cc 	andi	r3,r17,15
    bda8:	00800104 	movi	r2,4
    bdac:	18805826 	beq	r3,r2,bf10 <__adddf3+0x1f0>
    bdb0:	89800104 	addi	r6,r17,4
    bdb4:	3463803a 	cmpltu	r17,r6,r17
    bdb8:	2c4b883a 	add	r5,r5,r17
    bdbc:	2880202c 	andhi	r2,r5,128
    bdc0:	9007883a 	mov	r3,r18
    bdc4:	3023883a 	mov	r17,r6
    bdc8:	10005426 	beq	r2,zero,bf1c <__adddf3+0x1fc>
    bdcc:	84000044 	addi	r16,r16,1
    bdd0:	0081ffc4 	movi	r2,2047
    bdd4:	8080c126 	beq	r16,r2,c0dc <__adddf3+0x3bc>
    bdd8:	013fe034 	movhi	r4,65408
    bddc:	213fffc4 	addi	r4,r4,-1
    bde0:	290a703a 	and	r5,r5,r4
    bde4:	2804977a 	slli	r2,r5,29
    bde8:	280a927a 	slli	r5,r5,9
    bdec:	8822d0fa 	srli	r17,r17,3
    bdf0:	8401ffcc 	andi	r16,r16,2047
    bdf4:	2808d33a 	srli	r4,r5,12
    bdf8:	1444b03a 	or	r2,r2,r17
    bdfc:	8401ffcc 	andi	r16,r16,2047
    be00:	800a953a 	slli	r5,r16,20
    be04:	18c03fcc 	andi	r3,r3,255
    be08:	04000434 	movhi	r16,16
    be0c:	180697fa 	slli	r3,r3,31
    be10:	843fffc4 	addi	r16,r16,-1
    be14:	2420703a 	and	r16,r4,r16
    be18:	8160b03a 	or	r16,r16,r5
    be1c:	80c6b03a 	or	r3,r16,r3
    be20:	dfc00417 	ldw	ra,16(sp)
    be24:	dcc00317 	ldw	r19,12(sp)
    be28:	dc800217 	ldw	r18,8(sp)
    be2c:	dc400117 	ldw	r17,4(sp)
    be30:	dc000017 	ldw	r16,0(sp)
    be34:	dec00504 	addi	sp,sp,20
    be38:	f800283a 	ret
    be3c:	0081ffc4 	movi	r2,2047
    be40:	80bfd626 	beq	r16,r2,bd9c <__adddf3+0x7c>
    be44:	42002034 	orhi	r8,r8,128
    be48:	00800e04 	movi	r2,56
    be4c:	10c0a616 	blt	r2,r3,c0e8 <__adddf3+0x3c8>
    be50:	008007c4 	movi	r2,31
    be54:	10c0c916 	blt	r2,r3,c17c <__adddf3+0x45c>
    be58:	00800804 	movi	r2,32
    be5c:	10c5c83a 	sub	r2,r2,r3
    be60:	408e983a 	sll	r7,r8,r2
    be64:	30c8d83a 	srl	r4,r6,r3
    be68:	3084983a 	sll	r2,r6,r2
    be6c:	40c6d83a 	srl	r3,r8,r3
    be70:	390cb03a 	or	r6,r7,r4
    be74:	1004c03a 	cmpne	r2,r2,zero
    be78:	308cb03a 	or	r6,r6,r2
    be7c:	898dc83a 	sub	r6,r17,r6
    be80:	89a3803a 	cmpltu	r17,r17,r6
    be84:	28cbc83a 	sub	r5,r5,r3
    be88:	2c4bc83a 	sub	r5,r5,r17
    be8c:	3023883a 	mov	r17,r6
    be90:	2880202c 	andhi	r2,r5,128
    be94:	10006d26 	beq	r2,zero,c04c <__adddf3+0x32c>
    be98:	04c02034 	movhi	r19,128
    be9c:	9cffffc4 	addi	r19,r19,-1
    bea0:	2ce6703a 	and	r19,r5,r19
    bea4:	98007e26 	beq	r19,zero,c0a0 <__adddf3+0x380>
    bea8:	9809883a 	mov	r4,r19
    beac:	000e2bc0 	call	e2bc <__clzsi2>
    beb0:	10fffe04 	addi	r3,r2,-8
    beb4:	010007c4 	movi	r4,31
    beb8:	20c07f16 	blt	r4,r3,c0b8 <__adddf3+0x398>
    bebc:	01400a04 	movi	r5,40
    bec0:	2885c83a 	sub	r2,r5,r2
    bec4:	888ad83a 	srl	r5,r17,r2
    bec8:	98e6983a 	sll	r19,r19,r3
    becc:	88e2983a 	sll	r17,r17,r3
    bed0:	2ce6b03a 	or	r19,r5,r19
    bed4:	1c007c16 	blt	r3,r16,c0c8 <__adddf3+0x3a8>
    bed8:	1c21c83a 	sub	r16,r3,r16
    bedc:	81400044 	addi	r5,r16,1
    bee0:	00c007c4 	movi	r3,31
    bee4:	19409816 	blt	r3,r5,c148 <__adddf3+0x428>
    bee8:	1c21c83a 	sub	r16,r3,r16
    beec:	8c08983a 	sll	r4,r17,r16
    bef0:	8946d83a 	srl	r3,r17,r5
    bef4:	9c20983a 	sll	r16,r19,r16
    bef8:	2008c03a 	cmpne	r4,r4,zero
    befc:	994ad83a 	srl	r5,r19,r5
    bf00:	1c06b03a 	or	r3,r3,r16
    bf04:	1922b03a 	or	r17,r3,r4
    bf08:	0021883a 	mov	r16,zero
    bf0c:	003fa306 	br	bd9c <__adddf3+0x7c>
    bf10:	2880202c 	andhi	r2,r5,128
    bf14:	9007883a 	mov	r3,r18
    bf18:	103fac1e 	bne	r2,zero,bdcc <__adddf3+0xac>
    bf1c:	2804977a 	slli	r2,r5,29
    bf20:	8822d0fa 	srli	r17,r17,3
    bf24:	0101ffc4 	movi	r4,2047
    bf28:	280ad0fa 	srli	r5,r5,3
    bf2c:	1444b03a 	or	r2,r2,r17
    bf30:	81002c26 	beq	r16,r4,bfe4 <__adddf3+0x2c4>
    bf34:	8120703a 	and	r16,r16,r4
    bf38:	01000434 	movhi	r4,16
    bf3c:	213fffc4 	addi	r4,r4,-1
    bf40:	2908703a 	and	r4,r5,r4
    bf44:	003fad06 	br	bdfc <__adddf3+0xdc>
    bf48:	8089c83a 	sub	r4,r16,r2
    bf4c:	01006a0e 	bge	zero,r4,c0f8 <__adddf3+0x3d8>
    bf50:	10003326 	beq	r2,zero,c020 <__adddf3+0x300>
    bf54:	0081ffc4 	movi	r2,2047
    bf58:	80bf9026 	beq	r16,r2,bd9c <__adddf3+0x7c>
    bf5c:	42002034 	orhi	r8,r8,128
    bf60:	00800e04 	movi	r2,56
    bf64:	1100b116 	blt	r2,r4,c22c <__adddf3+0x50c>
    bf68:	008007c4 	movi	r2,31
    bf6c:	1100e216 	blt	r2,r4,c2f8 <__adddf3+0x5d8>
    bf70:	00800804 	movi	r2,32
    bf74:	1105c83a 	sub	r2,r2,r4
    bf78:	4092983a 	sll	r9,r8,r2
    bf7c:	310ed83a 	srl	r7,r6,r4
    bf80:	3084983a 	sll	r2,r6,r2
    bf84:	4110d83a 	srl	r8,r8,r4
    bf88:	49ccb03a 	or	r6,r9,r7
    bf8c:	1004c03a 	cmpne	r2,r2,zero
    bf90:	308cb03a 	or	r6,r6,r2
    bf94:	344d883a 	add	r6,r6,r17
    bf98:	3463803a 	cmpltu	r17,r6,r17
    bf9c:	414b883a 	add	r5,r8,r5
    bfa0:	2c4b883a 	add	r5,r5,r17
    bfa4:	3023883a 	mov	r17,r6
    bfa8:	2880202c 	andhi	r2,r5,128
    bfac:	10002726 	beq	r2,zero,c04c <__adddf3+0x32c>
    bfb0:	84000044 	addi	r16,r16,1
    bfb4:	0081ffc4 	movi	r2,2047
    bfb8:	8080ae26 	beq	r16,r2,c274 <__adddf3+0x554>
    bfbc:	00bfe034 	movhi	r2,65408
    bfc0:	10bfffc4 	addi	r2,r2,-1
    bfc4:	288a703a 	and	r5,r5,r2
    bfc8:	880cd07a 	srli	r6,r17,1
    bfcc:	280897fa 	slli	r4,r5,31
    bfd0:	88c0004c 	andi	r3,r17,1
    bfd4:	30e2b03a 	or	r17,r6,r3
    bfd8:	280ad07a 	srli	r5,r5,1
    bfdc:	8922b03a 	or	r17,r17,r4
    bfe0:	003f6e06 	br	bd9c <__adddf3+0x7c>
    bfe4:	1148b03a 	or	r4,r2,r5
    bfe8:	20003c26 	beq	r4,zero,c0dc <__adddf3+0x3bc>
    bfec:	29000234 	orhi	r4,r5,8
    bff0:	01400434 	movhi	r5,16
    bff4:	297fffc4 	addi	r5,r5,-1
    bff8:	2148703a 	and	r4,r4,r5
    bffc:	003f7f06 	br	bdfc <__adddf3+0xdc>
    c000:	18ffffc4 	addi	r3,r3,-1
    c004:	18004d1e 	bne	r3,zero,c13c <__adddf3+0x41c>
    c008:	898dc83a 	sub	r6,r17,r6
    c00c:	89a3803a 	cmpltu	r17,r17,r6
    c010:	2a0bc83a 	sub	r5,r5,r8
    c014:	2c4bc83a 	sub	r5,r5,r17
    c018:	3023883a 	mov	r17,r6
    c01c:	003f9c06 	br	be90 <__adddf3+0x170>
    c020:	4184b03a 	or	r2,r8,r6
    c024:	103f5d26 	beq	r2,zero,bd9c <__adddf3+0x7c>
    c028:	213fffc4 	addi	r4,r4,-1
    c02c:	203fd926 	beq	r4,zero,bf94 <__adddf3+0x274>
    c030:	0081ffc4 	movi	r2,2047
    c034:	80bfca1e 	bne	r16,r2,bf60 <__adddf3+0x240>
    c038:	003f5806 	br	bd9c <__adddf3+0x7c>
    c03c:	10c8b03a 	or	r4,r2,r3
    c040:	20008b26 	beq	r4,zero,c270 <__adddf3+0x550>
    c044:	100b883a 	mov	r5,r2
    c048:	1823883a 	mov	r17,r3
    c04c:	888001cc 	andi	r2,r17,7
    c050:	103f541e 	bne	r2,zero,bda4 <__adddf3+0x84>
    c054:	9007883a 	mov	r3,r18
    c058:	003fb006 	br	bf1c <__adddf3+0x1fc>
    c05c:	1800531e 	bne	r3,zero,c1ac <__adddf3+0x48c>
    c060:	80800044 	addi	r2,r16,1
    c064:	1081ffcc 	andi	r2,r2,2047
    c068:	00c00044 	movi	r3,1
    c06c:	1880990e 	bge	r3,r2,c2d4 <__adddf3+0x5b4>
    c070:	8985c83a 	sub	r2,r17,r6
    c074:	8887803a 	cmpltu	r3,r17,r2
    c078:	2a27c83a 	sub	r19,r5,r8
    c07c:	98e7c83a 	sub	r19,r19,r3
    c080:	98c0202c 	andhi	r3,r19,128
    c084:	18006226 	beq	r3,zero,c210 <__adddf3+0x4f0>
    c088:	3463c83a 	sub	r17,r6,r17
    c08c:	4151c83a 	sub	r8,r8,r5
    c090:	344d803a 	cmpltu	r6,r6,r17
    c094:	41a7c83a 	sub	r19,r8,r6
    c098:	3825883a 	mov	r18,r7
    c09c:	983f821e 	bne	r19,zero,bea8 <__adddf3+0x188>
    c0a0:	8809883a 	mov	r4,r17
    c0a4:	000e2bc0 	call	e2bc <__clzsi2>
    c0a8:	10800804 	addi	r2,r2,32
    c0ac:	10fffe04 	addi	r3,r2,-8
    c0b0:	010007c4 	movi	r4,31
    c0b4:	20ff810e 	bge	r4,r3,bebc <__adddf3+0x19c>
    c0b8:	14fff604 	addi	r19,r2,-40
    c0bc:	8ce6983a 	sll	r19,r17,r19
    c0c0:	0023883a 	mov	r17,zero
    c0c4:	1c3f840e 	bge	r3,r16,bed8 <__adddf3+0x1b8>
    c0c8:	017fe034 	movhi	r5,65408
    c0cc:	297fffc4 	addi	r5,r5,-1
    c0d0:	80e1c83a 	sub	r16,r16,r3
    c0d4:	994a703a 	and	r5,r19,r5
    c0d8:	003f3006 	br	bd9c <__adddf3+0x7c>
    c0dc:	0009883a 	mov	r4,zero
    c0e0:	0005883a 	mov	r2,zero
    c0e4:	003f4506 	br	bdfc <__adddf3+0xdc>
    c0e8:	418cb03a 	or	r6,r8,r6
    c0ec:	300cc03a 	cmpne	r6,r6,zero
    c0f0:	0007883a 	mov	r3,zero
    c0f4:	003f6106 	br	be7c <__adddf3+0x15c>
    c0f8:	2000921e 	bne	r4,zero,c344 <__adddf3+0x624>
    c0fc:	80800044 	addi	r2,r16,1
    c100:	11c1ffcc 	andi	r7,r2,2047
    c104:	01000044 	movi	r4,1
    c108:	21c0610e 	bge	r4,r7,c290 <__adddf3+0x570>
    c10c:	0101ffc4 	movi	r4,2047
    c110:	1100a326 	beq	r2,r4,c3a0 <__adddf3+0x680>
    c114:	344d883a 	add	r6,r6,r17
    c118:	3463803a 	cmpltu	r17,r6,r17
    c11c:	414b883a 	add	r5,r8,r5
    c120:	2c4b883a 	add	r5,r5,r17
    c124:	282297fa 	slli	r17,r5,31
    c128:	300cd07a 	srli	r6,r6,1
    c12c:	280ad07a 	srli	r5,r5,1
    c130:	1021883a 	mov	r16,r2
    c134:	89a2b03a 	or	r17,r17,r6
    c138:	003f1806 	br	bd9c <__adddf3+0x7c>
    c13c:	0081ffc4 	movi	r2,2047
    c140:	80bf411e 	bne	r16,r2,be48 <__adddf3+0x128>
    c144:	003f1506 	br	bd9c <__adddf3+0x7c>
    c148:	80bff844 	addi	r2,r16,-31
    c14c:	00c00804 	movi	r3,32
    c150:	9884d83a 	srl	r2,r19,r2
    c154:	28c04a26 	beq	r5,r3,c280 <__adddf3+0x560>
    c158:	00c00fc4 	movi	r3,63
    c15c:	1c21c83a 	sub	r16,r3,r16
    c160:	9c26983a 	sll	r19,r19,r16
    c164:	9c62b03a 	or	r17,r19,r17
    c168:	8822c03a 	cmpne	r17,r17,zero
    c16c:	88a2b03a 	or	r17,r17,r2
    c170:	000b883a 	mov	r5,zero
    c174:	0021883a 	mov	r16,zero
    c178:	003fb406 	br	c04c <__adddf3+0x32c>
    c17c:	18bff804 	addi	r2,r3,-32
    c180:	01000804 	movi	r4,32
    c184:	4084d83a 	srl	r2,r8,r2
    c188:	19003f26 	beq	r3,r4,c288 <__adddf3+0x568>
    c18c:	01001004 	movi	r4,64
    c190:	20c7c83a 	sub	r3,r4,r3
    c194:	40d0983a 	sll	r8,r8,r3
    c198:	418cb03a 	or	r6,r8,r6
    c19c:	300cc03a 	cmpne	r6,r6,zero
    c1a0:	308cb03a 	or	r6,r6,r2
    c1a4:	0007883a 	mov	r3,zero
    c1a8:	003f3406 	br	be7c <__adddf3+0x15c>
    c1ac:	80002326 	beq	r16,zero,c23c <__adddf3+0x51c>
    c1b0:	0101ffc4 	movi	r4,2047
    c1b4:	11005e26 	beq	r2,r4,c330 <__adddf3+0x610>
    c1b8:	00c7c83a 	sub	r3,zero,r3
    c1bc:	29402034 	orhi	r5,r5,128
    c1c0:	01000e04 	movi	r4,56
    c1c4:	20c07216 	blt	r4,r3,c390 <__adddf3+0x670>
    c1c8:	010007c4 	movi	r4,31
    c1cc:	20c0ce16 	blt	r4,r3,c508 <__adddf3+0x7e8>
    c1d0:	01000804 	movi	r4,32
    c1d4:	20c9c83a 	sub	r4,r4,r3
    c1d8:	2914983a 	sll	r10,r5,r4
    c1dc:	88d2d83a 	srl	r9,r17,r3
    c1e0:	8908983a 	sll	r4,r17,r4
    c1e4:	28c6d83a 	srl	r3,r5,r3
    c1e8:	5262b03a 	or	r17,r10,r9
    c1ec:	2008c03a 	cmpne	r4,r4,zero
    c1f0:	8922b03a 	or	r17,r17,r4
    c1f4:	3463c83a 	sub	r17,r6,r17
    c1f8:	40c7c83a 	sub	r3,r8,r3
    c1fc:	344d803a 	cmpltu	r6,r6,r17
    c200:	198bc83a 	sub	r5,r3,r6
    c204:	1021883a 	mov	r16,r2
    c208:	3825883a 	mov	r18,r7
    c20c:	003f2006 	br	be90 <__adddf3+0x170>
    c210:	9886b03a 	or	r3,r19,r2
    c214:	1800141e 	bne	r3,zero,c268 <__adddf3+0x548>
    c218:	0007883a 	mov	r3,zero
    c21c:	000b883a 	mov	r5,zero
    c220:	0023883a 	mov	r17,zero
    c224:	0021883a 	mov	r16,zero
    c228:	003f3c06 	br	bf1c <__adddf3+0x1fc>
    c22c:	418cb03a 	or	r6,r8,r6
    c230:	300cc03a 	cmpne	r6,r6,zero
    c234:	0011883a 	mov	r8,zero
    c238:	003f5606 	br	bf94 <__adddf3+0x274>
    c23c:	2c48b03a 	or	r4,r5,r17
    c240:	20003b26 	beq	r4,zero,c330 <__adddf3+0x610>
    c244:	00c6303a 	nor	r3,zero,r3
    c248:	1800371e 	bne	r3,zero,c328 <__adddf3+0x608>
    c24c:	3463c83a 	sub	r17,r6,r17
    c250:	414bc83a 	sub	r5,r8,r5
    c254:	344d803a 	cmpltu	r6,r6,r17
    c258:	298bc83a 	sub	r5,r5,r6
    c25c:	1021883a 	mov	r16,r2
    c260:	3825883a 	mov	r18,r7
    c264:	003f0a06 	br	be90 <__adddf3+0x170>
    c268:	1023883a 	mov	r17,r2
    c26c:	003f0d06 	br	bea4 <__adddf3+0x184>
    c270:	0007883a 	mov	r3,zero
    c274:	000b883a 	mov	r5,zero
    c278:	0023883a 	mov	r17,zero
    c27c:	003f2706 	br	bf1c <__adddf3+0x1fc>
    c280:	0027883a 	mov	r19,zero
    c284:	003fb706 	br	c164 <__adddf3+0x444>
    c288:	0011883a 	mov	r8,zero
    c28c:	003fc206 	br	c198 <__adddf3+0x478>
    c290:	2c44b03a 	or	r2,r5,r17
    c294:	8000871e 	bne	r16,zero,c4b4 <__adddf3+0x794>
    c298:	1000b126 	beq	r2,zero,c560 <__adddf3+0x840>
    c29c:	4184b03a 	or	r2,r8,r6
    c2a0:	103ebe26 	beq	r2,zero,bd9c <__adddf3+0x7c>
    c2a4:	3445883a 	add	r2,r6,r17
    c2a8:	1463803a 	cmpltu	r17,r2,r17
    c2ac:	414b883a 	add	r5,r8,r5
    c2b0:	2c4b883a 	add	r5,r5,r17
    c2b4:	28c0202c 	andhi	r3,r5,128
    c2b8:	1023883a 	mov	r17,r2
    c2bc:	183f6326 	beq	r3,zero,c04c <__adddf3+0x32c>
    c2c0:	00bfe034 	movhi	r2,65408
    c2c4:	10bfffc4 	addi	r2,r2,-1
    c2c8:	2021883a 	mov	r16,r4
    c2cc:	288a703a 	and	r5,r5,r2
    c2d0:	003eb206 	br	bd9c <__adddf3+0x7c>
    c2d4:	2c44b03a 	or	r2,r5,r17
    c2d8:	8000251e 	bne	r16,zero,c370 <__adddf3+0x650>
    c2dc:	10004b1e 	bne	r2,zero,c40c <__adddf3+0x6ec>
    c2e0:	4184b03a 	or	r2,r8,r6
    c2e4:	103fe226 	beq	r2,zero,c270 <__adddf3+0x550>
    c2e8:	400b883a 	mov	r5,r8
    c2ec:	3023883a 	mov	r17,r6
    c2f0:	3825883a 	mov	r18,r7
    c2f4:	003ea906 	br	bd9c <__adddf3+0x7c>
    c2f8:	20bff804 	addi	r2,r4,-32
    c2fc:	01c00804 	movi	r7,32
    c300:	4084d83a 	srl	r2,r8,r2
    c304:	21c07e26 	beq	r4,r7,c500 <__adddf3+0x7e0>
    c308:	01c01004 	movi	r7,64
    c30c:	3909c83a 	sub	r4,r7,r4
    c310:	4110983a 	sll	r8,r8,r4
    c314:	418cb03a 	or	r6,r8,r6
    c318:	300cc03a 	cmpne	r6,r6,zero
    c31c:	308cb03a 	or	r6,r6,r2
    c320:	0011883a 	mov	r8,zero
    c324:	003f1b06 	br	bf94 <__adddf3+0x274>
    c328:	0101ffc4 	movi	r4,2047
    c32c:	113fa41e 	bne	r2,r4,c1c0 <__adddf3+0x4a0>
    c330:	400b883a 	mov	r5,r8
    c334:	3023883a 	mov	r17,r6
    c338:	1021883a 	mov	r16,r2
    c33c:	3825883a 	mov	r18,r7
    c340:	003e9606 	br	bd9c <__adddf3+0x7c>
    c344:	80001a1e 	bne	r16,zero,c3b0 <__adddf3+0x690>
    c348:	2c4eb03a 	or	r7,r5,r17
    c34c:	38005526 	beq	r7,zero,c4a4 <__adddf3+0x784>
    c350:	0108303a 	nor	r4,zero,r4
    c354:	2000511e 	bne	r4,zero,c49c <__adddf3+0x77c>
    c358:	89a3883a 	add	r17,r17,r6
    c35c:	414b883a 	add	r5,r8,r5
    c360:	898d803a 	cmpltu	r6,r17,r6
    c364:	298b883a 	add	r5,r5,r6
    c368:	1021883a 	mov	r16,r2
    c36c:	003f0e06 	br	bfa8 <__adddf3+0x288>
    c370:	1000341e 	bne	r2,zero,c444 <__adddf3+0x724>
    c374:	4184b03a 	or	r2,r8,r6
    c378:	10006f26 	beq	r2,zero,c538 <__adddf3+0x818>
    c37c:	400b883a 	mov	r5,r8
    c380:	3023883a 	mov	r17,r6
    c384:	3825883a 	mov	r18,r7
    c388:	0401ffc4 	movi	r16,2047
    c38c:	003e8306 	br	bd9c <__adddf3+0x7c>
    c390:	2c62b03a 	or	r17,r5,r17
    c394:	8822c03a 	cmpne	r17,r17,zero
    c398:	0007883a 	mov	r3,zero
    c39c:	003f9506 	br	c1f4 <__adddf3+0x4d4>
    c3a0:	1021883a 	mov	r16,r2
    c3a4:	000b883a 	mov	r5,zero
    c3a8:	0023883a 	mov	r17,zero
    c3ac:	003edb06 	br	bf1c <__adddf3+0x1fc>
    c3b0:	01c1ffc4 	movi	r7,2047
    c3b4:	11c03b26 	beq	r2,r7,c4a4 <__adddf3+0x784>
    c3b8:	0109c83a 	sub	r4,zero,r4
    c3bc:	29402034 	orhi	r5,r5,128
    c3c0:	01c00e04 	movi	r7,56
    c3c4:	39006216 	blt	r7,r4,c550 <__adddf3+0x830>
    c3c8:	01c007c4 	movi	r7,31
    c3cc:	39006b16 	blt	r7,r4,c57c <__adddf3+0x85c>
    c3d0:	01c00804 	movi	r7,32
    c3d4:	390fc83a 	sub	r7,r7,r4
    c3d8:	29d4983a 	sll	r10,r5,r7
    c3dc:	8912d83a 	srl	r9,r17,r4
    c3e0:	89ce983a 	sll	r7,r17,r7
    c3e4:	2908d83a 	srl	r4,r5,r4
    c3e8:	5262b03a 	or	r17,r10,r9
    c3ec:	380ac03a 	cmpne	r5,r7,zero
    c3f0:	8962b03a 	or	r17,r17,r5
    c3f4:	89a3883a 	add	r17,r17,r6
    c3f8:	2211883a 	add	r8,r4,r8
    c3fc:	898d803a 	cmpltu	r6,r17,r6
    c400:	418b883a 	add	r5,r8,r6
    c404:	1021883a 	mov	r16,r2
    c408:	003ee706 	br	bfa8 <__adddf3+0x288>
    c40c:	4184b03a 	or	r2,r8,r6
    c410:	103e6226 	beq	r2,zero,bd9c <__adddf3+0x7c>
    c414:	8987c83a 	sub	r3,r17,r6
    c418:	88c9803a 	cmpltu	r4,r17,r3
    c41c:	2a05c83a 	sub	r2,r5,r8
    c420:	1105c83a 	sub	r2,r2,r4
    c424:	1100202c 	andhi	r4,r2,128
    c428:	203f0426 	beq	r4,zero,c03c <__adddf3+0x31c>
    c42c:	3463c83a 	sub	r17,r6,r17
    c430:	414bc83a 	sub	r5,r8,r5
    c434:	344d803a 	cmpltu	r6,r6,r17
    c438:	298bc83a 	sub	r5,r5,r6
    c43c:	3825883a 	mov	r18,r7
    c440:	003e5606 	br	bd9c <__adddf3+0x7c>
    c444:	4184b03a 	or	r2,r8,r6
    c448:	10002b26 	beq	r2,zero,c4f8 <__adddf3+0x7d8>
    c44c:	2804d0fa 	srli	r2,r5,3
    c450:	8822d0fa 	srli	r17,r17,3
    c454:	280a977a 	slli	r5,r5,29
    c458:	10c0022c 	andhi	r3,r2,8
    c45c:	2c62b03a 	or	r17,r5,r17
    c460:	18000826 	beq	r3,zero,c484 <__adddf3+0x764>
    c464:	4008d0fa 	srli	r4,r8,3
    c468:	20c0022c 	andhi	r3,r4,8
    c46c:	1800051e 	bne	r3,zero,c484 <__adddf3+0x764>
    c470:	300cd0fa 	srli	r6,r6,3
    c474:	4010977a 	slli	r8,r8,29
    c478:	2005883a 	mov	r2,r4
    c47c:	3825883a 	mov	r18,r7
    c480:	41a2b03a 	or	r17,r8,r6
    c484:	880ad77a 	srli	r5,r17,29
    c488:	100490fa 	slli	r2,r2,3
    c48c:	882290fa 	slli	r17,r17,3
    c490:	0401ffc4 	movi	r16,2047
    c494:	288ab03a 	or	r5,r5,r2
    c498:	003e4006 	br	bd9c <__adddf3+0x7c>
    c49c:	01c1ffc4 	movi	r7,2047
    c4a0:	11ffc71e 	bne	r2,r7,c3c0 <__adddf3+0x6a0>
    c4a4:	400b883a 	mov	r5,r8
    c4a8:	3023883a 	mov	r17,r6
    c4ac:	1021883a 	mov	r16,r2
    c4b0:	003e3a06 	br	bd9c <__adddf3+0x7c>
    c4b4:	10002d26 	beq	r2,zero,c56c <__adddf3+0x84c>
    c4b8:	4184b03a 	or	r2,r8,r6
    c4bc:	10000e26 	beq	r2,zero,c4f8 <__adddf3+0x7d8>
    c4c0:	2804d0fa 	srli	r2,r5,3
    c4c4:	8822d0fa 	srli	r17,r17,3
    c4c8:	280a977a 	slli	r5,r5,29
    c4cc:	10c0022c 	andhi	r3,r2,8
    c4d0:	2c62b03a 	or	r17,r5,r17
    c4d4:	183feb26 	beq	r3,zero,c484 <__adddf3+0x764>
    c4d8:	4008d0fa 	srli	r4,r8,3
    c4dc:	20c0022c 	andhi	r3,r4,8
    c4e0:	183fe81e 	bne	r3,zero,c484 <__adddf3+0x764>
    c4e4:	300cd0fa 	srli	r6,r6,3
    c4e8:	4010977a 	slli	r8,r8,29
    c4ec:	2005883a 	mov	r2,r4
    c4f0:	41a2b03a 	or	r17,r8,r6
    c4f4:	003fe306 	br	c484 <__adddf3+0x764>
    c4f8:	0401ffc4 	movi	r16,2047
    c4fc:	003e2706 	br	bd9c <__adddf3+0x7c>
    c500:	0011883a 	mov	r8,zero
    c504:	003f8306 	br	c314 <__adddf3+0x5f4>
    c508:	193ff804 	addi	r4,r3,-32
    c50c:	02400804 	movi	r9,32
    c510:	2908d83a 	srl	r4,r5,r4
    c514:	1a402526 	beq	r3,r9,c5ac <__adddf3+0x88c>
    c518:	02401004 	movi	r9,64
    c51c:	48c7c83a 	sub	r3,r9,r3
    c520:	28ca983a 	sll	r5,r5,r3
    c524:	2c62b03a 	or	r17,r5,r17
    c528:	8822c03a 	cmpne	r17,r17,zero
    c52c:	8922b03a 	or	r17,r17,r4
    c530:	0007883a 	mov	r3,zero
    c534:	003f2f06 	br	c1f4 <__adddf3+0x4d4>
    c538:	01402034 	movhi	r5,128
    c53c:	0007883a 	mov	r3,zero
    c540:	297fffc4 	addi	r5,r5,-1
    c544:	047ffe04 	movi	r17,-8
    c548:	0401ffc4 	movi	r16,2047
    c54c:	003e7306 	br	bf1c <__adddf3+0x1fc>
    c550:	2c62b03a 	or	r17,r5,r17
    c554:	8822c03a 	cmpne	r17,r17,zero
    c558:	0009883a 	mov	r4,zero
    c55c:	003fa506 	br	c3f4 <__adddf3+0x6d4>
    c560:	400b883a 	mov	r5,r8
    c564:	3023883a 	mov	r17,r6
    c568:	003e0c06 	br	bd9c <__adddf3+0x7c>
    c56c:	400b883a 	mov	r5,r8
    c570:	3023883a 	mov	r17,r6
    c574:	0401ffc4 	movi	r16,2047
    c578:	003e0806 	br	bd9c <__adddf3+0x7c>
    c57c:	21fff804 	addi	r7,r4,-32
    c580:	02400804 	movi	r9,32
    c584:	29ced83a 	srl	r7,r5,r7
    c588:	22400a26 	beq	r4,r9,c5b4 <__adddf3+0x894>
    c58c:	02401004 	movi	r9,64
    c590:	4909c83a 	sub	r4,r9,r4
    c594:	290a983a 	sll	r5,r5,r4
    c598:	2c62b03a 	or	r17,r5,r17
    c59c:	8822c03a 	cmpne	r17,r17,zero
    c5a0:	89e2b03a 	or	r17,r17,r7
    c5a4:	0009883a 	mov	r4,zero
    c5a8:	003f9206 	br	c3f4 <__adddf3+0x6d4>
    c5ac:	000b883a 	mov	r5,zero
    c5b0:	003fdc06 	br	c524 <__adddf3+0x804>
    c5b4:	000b883a 	mov	r5,zero
    c5b8:	003ff706 	br	c598 <__adddf3+0x878>

0000c5bc <__divdf3>:
    c5bc:	defff204 	addi	sp,sp,-56
    c5c0:	dd000815 	stw	r20,32(sp)
    c5c4:	2828d53a 	srli	r20,r5,20
    c5c8:	dd800a15 	stw	r22,40(sp)
    c5cc:	282cd7fa 	srli	r22,r5,31
    c5d0:	dc000415 	stw	r16,16(sp)
    c5d4:	04000434 	movhi	r16,16
    c5d8:	df000c15 	stw	fp,48(sp)
    c5dc:	dcc00715 	stw	r19,28(sp)
    c5e0:	dc800615 	stw	r18,24(sp)
    c5e4:	dc400515 	stw	r17,20(sp)
    c5e8:	843fffc4 	addi	r16,r16,-1
    c5ec:	dfc00d15 	stw	ra,52(sp)
    c5f0:	ddc00b15 	stw	r23,44(sp)
    c5f4:	dd400915 	stw	r21,36(sp)
    c5f8:	a501ffcc 	andi	r20,r20,2047
    c5fc:	2025883a 	mov	r18,r4
    c600:	2027883a 	mov	r19,r4
    c604:	2c22703a 	and	r17,r5,r16
    c608:	b7003fcc 	andi	fp,r22,255
    c60c:	a0005e26 	beq	r20,zero,c788 <__divdf3+0x1cc>
    c610:	0081ffc4 	movi	r2,2047
    c614:	a0803526 	beq	r20,r2,c6ec <__divdf3+0x130>
    c618:	8c000434 	orhi	r16,r17,16
    c61c:	2004d77a 	srli	r2,r4,29
    c620:	802090fa 	slli	r16,r16,3
    c624:	202690fa 	slli	r19,r4,3
    c628:	a53f0044 	addi	r20,r20,-1023
    c62c:	80a2b03a 	or	r17,r16,r2
    c630:	0025883a 	mov	r18,zero
    c634:	0011883a 	mov	r8,zero
    c638:	380ad53a 	srli	r5,r7,20
    c63c:	382ed7fa 	srli	r23,r7,31
    c640:	04000434 	movhi	r16,16
    c644:	843fffc4 	addi	r16,r16,-1
    c648:	2941ffcc 	andi	r5,r5,2047
    c64c:	302b883a 	mov	r21,r6
    c650:	3c20703a 	and	r16,r7,r16
    c654:	ba403fcc 	andi	r9,r23,255
    c658:	28006726 	beq	r5,zero,c7f8 <__divdf3+0x23c>
    c65c:	0081ffc4 	movi	r2,2047
    c660:	28805f26 	beq	r5,r2,c7e0 <__divdf3+0x224>
    c664:	84000434 	orhi	r16,r16,16
    c668:	3004d77a 	srli	r2,r6,29
    c66c:	802090fa 	slli	r16,r16,3
    c670:	302a90fa 	slli	r21,r6,3
    c674:	297f0044 	addi	r5,r5,-1023
    c678:	80a0b03a 	or	r16,r16,r2
    c67c:	000f883a 	mov	r7,zero
    c680:	3c86b03a 	or	r3,r7,r18
    c684:	180690ba 	slli	r3,r3,2
    c688:	00800074 	movhi	r2,1
    c68c:	10b1ab04 	addi	r2,r2,-14676
    c690:	1887883a 	add	r3,r3,r2
    c694:	18c00017 	ldw	r3,0(r3)
    c698:	b5c8f03a 	xor	r4,r22,r23
    c69c:	200d883a 	mov	r6,r4
    c6a0:	24803fcc 	andi	r18,r4,255
    c6a4:	a169c83a 	sub	r20,r20,r5
    c6a8:	1800683a 	jmp	r3
    c6ac:	0000c8f4 	movhi	zero,803
    c6b0:	0000c724 	muli	zero,zero,796
    c6b4:	0000c8b8 	rdprs	zero,zero,802
    c6b8:	0000c708 	cmpgei	zero,zero,796
    c6bc:	0000c8b8 	rdprs	zero,zero,802
    c6c0:	0000c88c 	andi	zero,zero,802
    c6c4:	0000c8b8 	rdprs	zero,zero,802
    c6c8:	0000c708 	cmpgei	zero,zero,796
    c6cc:	0000c724 	muli	zero,zero,796
    c6d0:	0000c724 	muli	zero,zero,796
    c6d4:	0000c88c 	andi	zero,zero,802
    c6d8:	0000c708 	cmpgei	zero,zero,796
    c6dc:	0000c718 	cmpnei	zero,zero,796
    c6e0:	0000c718 	cmpnei	zero,zero,796
    c6e4:	0000c718 	cmpnei	zero,zero,796
    c6e8:	0000c8c8 	cmpgei	zero,zero,803
    c6ec:	8904b03a 	or	r2,r17,r4
    c6f0:	1000631e 	bne	r2,zero,c880 <__divdf3+0x2c4>
    c6f4:	04800204 	movi	r18,8
    c6f8:	0023883a 	mov	r17,zero
    c6fc:	0027883a 	mov	r19,zero
    c700:	02000084 	movi	r8,2
    c704:	003fcc06 	br	c638 <__divdf3+0x7c>
    c708:	8023883a 	mov	r17,r16
    c70c:	a827883a 	mov	r19,r21
    c710:	4839883a 	mov	fp,r9
    c714:	3811883a 	mov	r8,r7
    c718:	00800084 	movi	r2,2
    c71c:	40812a1e 	bne	r8,r2,cbc8 <__divdf3+0x60c>
    c720:	e025883a 	mov	r18,fp
    c724:	9180004c 	andi	r6,r18,1
    c728:	0101ffc4 	movi	r4,2047
    c72c:	000b883a 	mov	r5,zero
    c730:	0027883a 	mov	r19,zero
    c734:	2008953a 	slli	r4,r4,20
    c738:	30c03fcc 	andi	r3,r6,255
    c73c:	04000434 	movhi	r16,16
    c740:	180697fa 	slli	r3,r3,31
    c744:	843fffc4 	addi	r16,r16,-1
    c748:	2c20703a 	and	r16,r5,r16
    c74c:	8120b03a 	or	r16,r16,r4
    c750:	80c6b03a 	or	r3,r16,r3
    c754:	9805883a 	mov	r2,r19
    c758:	dfc00d17 	ldw	ra,52(sp)
    c75c:	df000c17 	ldw	fp,48(sp)
    c760:	ddc00b17 	ldw	r23,44(sp)
    c764:	dd800a17 	ldw	r22,40(sp)
    c768:	dd400917 	ldw	r21,36(sp)
    c76c:	dd000817 	ldw	r20,32(sp)
    c770:	dcc00717 	ldw	r19,28(sp)
    c774:	dc800617 	ldw	r18,24(sp)
    c778:	dc400517 	ldw	r17,20(sp)
    c77c:	dc000417 	ldw	r16,16(sp)
    c780:	dec00e04 	addi	sp,sp,56
    c784:	f800283a 	ret
    c788:	8904b03a 	or	r2,r17,r4
    c78c:	10003726 	beq	r2,zero,c86c <__divdf3+0x2b0>
    c790:	88011c26 	beq	r17,zero,cc04 <__divdf3+0x648>
    c794:	8809883a 	mov	r4,r17
    c798:	d9800315 	stw	r6,12(sp)
    c79c:	d9c00115 	stw	r7,4(sp)
    c7a0:	000e2bc0 	call	e2bc <__clzsi2>
    c7a4:	d9800317 	ldw	r6,12(sp)
    c7a8:	d9c00117 	ldw	r7,4(sp)
    c7ac:	1007883a 	mov	r3,r2
    c7b0:	01000a04 	movi	r4,40
    c7b4:	1cfffe04 	addi	r19,r3,-8
    c7b8:	20c9c83a 	sub	r4,r4,r3
    c7bc:	8cca983a 	sll	r5,r17,r19
    c7c0:	9108d83a 	srl	r4,r18,r4
    c7c4:	94e6983a 	sll	r19,r18,r19
    c7c8:	2162b03a 	or	r17,r4,r5
    c7cc:	053f0344 	movi	r20,-1011
    c7d0:	a0e9c83a 	sub	r20,r20,r3
    c7d4:	0025883a 	mov	r18,zero
    c7d8:	0011883a 	mov	r8,zero
    c7dc:	003f9606 	br	c638 <__divdf3+0x7c>
    c7e0:	8184b03a 	or	r2,r16,r6
    c7e4:	10001f1e 	bne	r2,zero,c864 <__divdf3+0x2a8>
    c7e8:	0021883a 	mov	r16,zero
    c7ec:	002b883a 	mov	r21,zero
    c7f0:	01c00084 	movi	r7,2
    c7f4:	003fa206 	br	c680 <__divdf3+0xc4>
    c7f8:	8184b03a 	or	r2,r16,r6
    c7fc:	10001526 	beq	r2,zero,c854 <__divdf3+0x298>
    c800:	80010c26 	beq	r16,zero,cc34 <__divdf3+0x678>
    c804:	8009883a 	mov	r4,r16
    c808:	d9800315 	stw	r6,12(sp)
    c80c:	da000215 	stw	r8,8(sp)
    c810:	da400015 	stw	r9,0(sp)
    c814:	000e2bc0 	call	e2bc <__clzsi2>
    c818:	d9800317 	ldw	r6,12(sp)
    c81c:	da000217 	ldw	r8,8(sp)
    c820:	da400017 	ldw	r9,0(sp)
    c824:	1007883a 	mov	r3,r2
    c828:	01000a04 	movi	r4,40
    c82c:	1d7ffe04 	addi	r21,r3,-8
    c830:	20c9c83a 	sub	r4,r4,r3
    c834:	8560983a 	sll	r16,r16,r21
    c838:	3108d83a 	srl	r4,r6,r4
    c83c:	356a983a 	sll	r21,r6,r21
    c840:	2420b03a 	or	r16,r4,r16
    c844:	017f0344 	movi	r5,-1011
    c848:	28cbc83a 	sub	r5,r5,r3
    c84c:	000f883a 	mov	r7,zero
    c850:	003f8b06 	br	c680 <__divdf3+0xc4>
    c854:	0021883a 	mov	r16,zero
    c858:	002b883a 	mov	r21,zero
    c85c:	01c00044 	movi	r7,1
    c860:	003f8706 	br	c680 <__divdf3+0xc4>
    c864:	01c000c4 	movi	r7,3
    c868:	003f8506 	br	c680 <__divdf3+0xc4>
    c86c:	04800104 	movi	r18,4
    c870:	0023883a 	mov	r17,zero
    c874:	0027883a 	mov	r19,zero
    c878:	02000044 	movi	r8,1
    c87c:	003f6e06 	br	c638 <__divdf3+0x7c>
    c880:	04800304 	movi	r18,12
    c884:	020000c4 	movi	r8,3
    c888:	003f6b06 	br	c638 <__divdf3+0x7c>
    c88c:	01400434 	movhi	r5,16
    c890:	000d883a 	mov	r6,zero
    c894:	297fffc4 	addi	r5,r5,-1
    c898:	04ffffc4 	movi	r19,-1
    c89c:	0101ffc4 	movi	r4,2047
    c8a0:	003fa406 	br	c734 <__divdf3+0x178>
    c8a4:	043f0084 	movi	r16,-1022
    c8a8:	8521c83a 	sub	r16,r16,r20
    c8ac:	00800e04 	movi	r2,56
    c8b0:	1401200e 	bge	r2,r16,cd34 <__divdf3+0x778>
    c8b4:	9180004c 	andi	r6,r18,1
    c8b8:	0009883a 	mov	r4,zero
    c8bc:	000b883a 	mov	r5,zero
    c8c0:	0027883a 	mov	r19,zero
    c8c4:	003f9b06 	br	c734 <__divdf3+0x178>
    c8c8:	8880022c 	andhi	r2,r17,8
    c8cc:	1000c726 	beq	r2,zero,cbec <__divdf3+0x630>
    c8d0:	8080022c 	andhi	r2,r16,8
    c8d4:	1000c51e 	bne	r2,zero,cbec <__divdf3+0x630>
    c8d8:	00800434 	movhi	r2,16
    c8dc:	81400234 	orhi	r5,r16,8
    c8e0:	10bfffc4 	addi	r2,r2,-1
    c8e4:	b80d883a 	mov	r6,r23
    c8e8:	288a703a 	and	r5,r5,r2
    c8ec:	a827883a 	mov	r19,r21
    c8f0:	003fea06 	br	c89c <__divdf3+0x2e0>
    c8f4:	8440ea36 	bltu	r16,r17,cca0 <__divdf3+0x6e4>
    c8f8:	8c00e826 	beq	r17,r16,cc9c <__divdf3+0x6e0>
    c8fc:	a53fffc4 	addi	r20,r20,-1
    c900:	882d883a 	mov	r22,r17
    c904:	000d883a 	mov	r6,zero
    c908:	a804d63a 	srli	r2,r21,24
    c90c:	8020923a 	slli	r16,r16,8
    c910:	b009883a 	mov	r4,r22
    c914:	d9800315 	stw	r6,12(sp)
    c918:	1420b03a 	or	r16,r2,r16
    c91c:	802ed43a 	srli	r23,r16,16
    c920:	873fffcc 	andi	fp,r16,65535
    c924:	a82a923a 	slli	r21,r21,8
    c928:	b80b883a 	mov	r5,r23
    c92c:	00020540 	call	2054 <__udivsi3>
    c930:	b009883a 	mov	r4,r22
    c934:	b80b883a 	mov	r5,r23
    c938:	1023883a 	mov	r17,r2
    c93c:	000205c0 	call	205c <__umodsi3>
    c940:	1004943a 	slli	r2,r2,16
    c944:	9808d43a 	srli	r4,r19,16
    c948:	8f2d383a 	mul	r22,r17,fp
    c94c:	d9800317 	ldw	r6,12(sp)
    c950:	1106b03a 	or	r3,r2,r4
    c954:	1d80062e 	bgeu	r3,r22,c970 <__divdf3+0x3b4>
    c958:	1c07883a 	add	r3,r3,r16
    c95c:	88bfffc4 	addi	r2,r17,-1
    c960:	1c00dc36 	bltu	r3,r16,ccd4 <__divdf3+0x718>
    c964:	1d80db2e 	bgeu	r3,r22,ccd4 <__divdf3+0x718>
    c968:	8c7fff84 	addi	r17,r17,-2
    c96c:	1c07883a 	add	r3,r3,r16
    c970:	1dadc83a 	sub	r22,r3,r22
    c974:	b009883a 	mov	r4,r22
    c978:	b80b883a 	mov	r5,r23
    c97c:	d9800315 	stw	r6,12(sp)
    c980:	00020540 	call	2054 <__udivsi3>
    c984:	b009883a 	mov	r4,r22
    c988:	b80b883a 	mov	r5,r23
    c98c:	d8800015 	stw	r2,0(sp)
    c990:	000205c0 	call	205c <__umodsi3>
    c994:	da400017 	ldw	r9,0(sp)
    c998:	1004943a 	slli	r2,r2,16
    c99c:	9cffffcc 	andi	r19,r19,65535
    c9a0:	4f07383a 	mul	r3,r9,fp
    c9a4:	14c8b03a 	or	r4,r2,r19
    c9a8:	d9800317 	ldw	r6,12(sp)
    c9ac:	20c0062e 	bgeu	r4,r3,c9c8 <__divdf3+0x40c>
    c9b0:	2409883a 	add	r4,r4,r16
    c9b4:	48bfffc4 	addi	r2,r9,-1
    c9b8:	2400c436 	bltu	r4,r16,cccc <__divdf3+0x710>
    c9bc:	20c0c32e 	bgeu	r4,r3,cccc <__divdf3+0x710>
    c9c0:	4a7fff84 	addi	r9,r9,-2
    c9c4:	2409883a 	add	r4,r4,r16
    c9c8:	8822943a 	slli	r17,r17,16
    c9cc:	a80ed43a 	srli	r7,r21,16
    c9d0:	aa3fffcc 	andi	r8,r21,65535
    c9d4:	4c62b03a 	or	r17,r9,r17
    c9d8:	8816d43a 	srli	r11,r17,16
    c9dc:	897fffcc 	andi	r5,r17,65535
    c9e0:	2a15383a 	mul	r10,r5,r8
    c9e4:	5a19383a 	mul	r12,r11,r8
    c9e8:	29cb383a 	mul	r5,r5,r7
    c9ec:	5012d43a 	srli	r9,r10,16
    c9f0:	20c5c83a 	sub	r2,r4,r3
    c9f4:	614b883a 	add	r5,r12,r5
    c9f8:	2a4b883a 	add	r5,r5,r9
    c9fc:	59c7383a 	mul	r3,r11,r7
    ca00:	2b00022e 	bgeu	r5,r12,ca0c <__divdf3+0x450>
    ca04:	01000074 	movhi	r4,1
    ca08:	1907883a 	add	r3,r3,r4
    ca0c:	2808d43a 	srli	r4,r5,16
    ca10:	280a943a 	slli	r5,r5,16
    ca14:	54ffffcc 	andi	r19,r10,65535
    ca18:	1907883a 	add	r3,r3,r4
    ca1c:	2ccb883a 	add	r5,r5,r19
    ca20:	10c09336 	bltu	r2,r3,cc70 <__divdf3+0x6b4>
    ca24:	10c0ad26 	beq	r2,r3,ccdc <__divdf3+0x720>
    ca28:	10c7c83a 	sub	r3,r2,r3
    ca2c:	3167c83a 	sub	r19,r6,r5
    ca30:	34ed803a 	cmpltu	r22,r6,r19
    ca34:	1dadc83a 	sub	r22,r3,r22
    ca38:	b400b226 	beq	r22,r16,cd04 <__divdf3+0x748>
    ca3c:	b009883a 	mov	r4,r22
    ca40:	b80b883a 	mov	r5,r23
    ca44:	d9c00115 	stw	r7,4(sp)
    ca48:	da000215 	stw	r8,8(sp)
    ca4c:	00020540 	call	2054 <__udivsi3>
    ca50:	b009883a 	mov	r4,r22
    ca54:	b80b883a 	mov	r5,r23
    ca58:	d8800315 	stw	r2,12(sp)
    ca5c:	000205c0 	call	205c <__umodsi3>
    ca60:	d9800317 	ldw	r6,12(sp)
    ca64:	1004943a 	slli	r2,r2,16
    ca68:	9808d43a 	srli	r4,r19,16
    ca6c:	372d383a 	mul	r22,r6,fp
    ca70:	d9c00117 	ldw	r7,4(sp)
    ca74:	1106b03a 	or	r3,r2,r4
    ca78:	da000217 	ldw	r8,8(sp)
    ca7c:	1d80062e 	bgeu	r3,r22,ca98 <__divdf3+0x4dc>
    ca80:	1c07883a 	add	r3,r3,r16
    ca84:	30bfffc4 	addi	r2,r6,-1
    ca88:	1c00a036 	bltu	r3,r16,cd0c <__divdf3+0x750>
    ca8c:	1d809f2e 	bgeu	r3,r22,cd0c <__divdf3+0x750>
    ca90:	31bfff84 	addi	r6,r6,-2
    ca94:	1c07883a 	add	r3,r3,r16
    ca98:	1dadc83a 	sub	r22,r3,r22
    ca9c:	b009883a 	mov	r4,r22
    caa0:	b80b883a 	mov	r5,r23
    caa4:	d9800315 	stw	r6,12(sp)
    caa8:	d9c00115 	stw	r7,4(sp)
    caac:	da000215 	stw	r8,8(sp)
    cab0:	00020540 	call	2054 <__udivsi3>
    cab4:	b009883a 	mov	r4,r22
    cab8:	b80b883a 	mov	r5,r23
    cabc:	d8800015 	stw	r2,0(sp)
    cac0:	000205c0 	call	205c <__umodsi3>
    cac4:	da400017 	ldw	r9,0(sp)
    cac8:	1004943a 	slli	r2,r2,16
    cacc:	993fffcc 	andi	r4,r19,65535
    cad0:	4f39383a 	mul	fp,r9,fp
    cad4:	1106b03a 	or	r3,r2,r4
    cad8:	d9800317 	ldw	r6,12(sp)
    cadc:	d9c00117 	ldw	r7,4(sp)
    cae0:	da000217 	ldw	r8,8(sp)
    cae4:	1f00062e 	bgeu	r3,fp,cb00 <__divdf3+0x544>
    cae8:	1c07883a 	add	r3,r3,r16
    caec:	48bfffc4 	addi	r2,r9,-1
    caf0:	1c008836 	bltu	r3,r16,cd14 <__divdf3+0x758>
    caf4:	1f00872e 	bgeu	r3,fp,cd14 <__divdf3+0x758>
    caf8:	4a7fff84 	addi	r9,r9,-2
    cafc:	1c07883a 	add	r3,r3,r16
    cb00:	3008943a 	slli	r4,r6,16
    cb04:	1f07c83a 	sub	r3,r3,fp
    cb08:	4926b03a 	or	r19,r9,r4
    cb0c:	993fffcc 	andi	r4,r19,65535
    cb10:	980cd43a 	srli	r6,r19,16
    cb14:	220b383a 	mul	r5,r4,r8
    cb18:	21c5383a 	mul	r2,r4,r7
    cb1c:	3211383a 	mul	r8,r6,r8
    cb20:	2808d43a 	srli	r4,r5,16
    cb24:	31cf383a 	mul	r7,r6,r7
    cb28:	4085883a 	add	r2,r8,r2
    cb2c:	1105883a 	add	r2,r2,r4
    cb30:	1200022e 	bgeu	r2,r8,cb3c <__divdf3+0x580>
    cb34:	01000074 	movhi	r4,1
    cb38:	390f883a 	add	r7,r7,r4
    cb3c:	1008d43a 	srli	r4,r2,16
    cb40:	1004943a 	slli	r2,r2,16
    cb44:	297fffcc 	andi	r5,r5,65535
    cb48:	390f883a 	add	r7,r7,r4
    cb4c:	1145883a 	add	r2,r2,r5
    cb50:	19c06536 	bltu	r3,r7,cce8 <__divdf3+0x72c>
    cb54:	19c09f26 	beq	r3,r7,cdd4 <__divdf3+0x818>
    cb58:	9cc00054 	ori	r19,r19,1
    cb5c:	a100ffc4 	addi	r4,r20,1023
    cb60:	013f500e 	bge	zero,r4,c8a4 <__divdf3+0x2e8>
    cb64:	988001cc 	andi	r2,r19,7
    cb68:	10000726 	beq	r2,zero,cb88 <__divdf3+0x5cc>
    cb6c:	98c003cc 	andi	r3,r19,15
    cb70:	00800104 	movi	r2,4
    cb74:	18800426 	beq	r3,r2,cb88 <__divdf3+0x5cc>
    cb78:	9885883a 	add	r2,r19,r2
    cb7c:	14e1803a 	cmpltu	r16,r2,r19
    cb80:	8c23883a 	add	r17,r17,r16
    cb84:	1027883a 	mov	r19,r2
    cb88:	8880402c 	andhi	r2,r17,256
    cb8c:	10000426 	beq	r2,zero,cba0 <__divdf3+0x5e4>
    cb90:	00bfc034 	movhi	r2,65280
    cb94:	10bfffc4 	addi	r2,r2,-1
    cb98:	a1010004 	addi	r4,r20,1024
    cb9c:	88a2703a 	and	r17,r17,r2
    cba0:	0081ff84 	movi	r2,2046
    cba4:	113edf16 	blt	r2,r4,c724 <__divdf3+0x168>
    cba8:	9826d0fa 	srli	r19,r19,3
    cbac:	8804977a 	slli	r2,r17,29
    cbb0:	8820927a 	slli	r16,r17,9
    cbb4:	2101ffcc 	andi	r4,r4,2047
    cbb8:	14e6b03a 	or	r19,r2,r19
    cbbc:	800ad33a 	srli	r5,r16,12
    cbc0:	9180004c 	andi	r6,r18,1
    cbc4:	003edb06 	br	c734 <__divdf3+0x178>
    cbc8:	008000c4 	movi	r2,3
    cbcc:	4080a826 	beq	r8,r2,ce70 <__divdf3+0x8b4>
    cbd0:	00800044 	movi	r2,1
    cbd4:	4080551e 	bne	r8,r2,cd2c <__divdf3+0x770>
    cbd8:	e00d883a 	mov	r6,fp
    cbdc:	0009883a 	mov	r4,zero
    cbe0:	000b883a 	mov	r5,zero
    cbe4:	0027883a 	mov	r19,zero
    cbe8:	003ed206 	br	c734 <__divdf3+0x178>
    cbec:	00800434 	movhi	r2,16
    cbf0:	89400234 	orhi	r5,r17,8
    cbf4:	10bfffc4 	addi	r2,r2,-1
    cbf8:	b00d883a 	mov	r6,r22
    cbfc:	288a703a 	and	r5,r5,r2
    cc00:	003f2606 	br	c89c <__divdf3+0x2e0>
    cc04:	d9800315 	stw	r6,12(sp)
    cc08:	d9c00115 	stw	r7,4(sp)
    cc0c:	000e2bc0 	call	e2bc <__clzsi2>
    cc10:	10c00804 	addi	r3,r2,32
    cc14:	010009c4 	movi	r4,39
    cc18:	d9800317 	ldw	r6,12(sp)
    cc1c:	d9c00117 	ldw	r7,4(sp)
    cc20:	20fee30e 	bge	r4,r3,c7b0 <__divdf3+0x1f4>
    cc24:	117ffe04 	addi	r5,r2,-8
    cc28:	9162983a 	sll	r17,r18,r5
    cc2c:	0027883a 	mov	r19,zero
    cc30:	003ee606 	br	c7cc <__divdf3+0x210>
    cc34:	3009883a 	mov	r4,r6
    cc38:	d9800315 	stw	r6,12(sp)
    cc3c:	da000215 	stw	r8,8(sp)
    cc40:	da400015 	stw	r9,0(sp)
    cc44:	000e2bc0 	call	e2bc <__clzsi2>
    cc48:	10c00804 	addi	r3,r2,32
    cc4c:	010009c4 	movi	r4,39
    cc50:	d9800317 	ldw	r6,12(sp)
    cc54:	da000217 	ldw	r8,8(sp)
    cc58:	da400017 	ldw	r9,0(sp)
    cc5c:	20fef20e 	bge	r4,r3,c828 <__divdf3+0x26c>
    cc60:	10bffe04 	addi	r2,r2,-8
    cc64:	a8a0983a 	sll	r16,r21,r2
    cc68:	002b883a 	mov	r21,zero
    cc6c:	003ef506 	br	c844 <__divdf3+0x288>
    cc70:	354d883a 	add	r6,r6,r21
    cc74:	3549803a 	cmpltu	r4,r6,r21
    cc78:	2409883a 	add	r4,r4,r16
    cc7c:	2089883a 	add	r4,r4,r2
    cc80:	88bfffc4 	addi	r2,r17,-1
    cc84:	81000c2e 	bgeu	r16,r4,ccb8 <__divdf3+0x6fc>
    cc88:	20c04436 	bltu	r4,r3,cd9c <__divdf3+0x7e0>
    cc8c:	19006f26 	beq	r3,r4,ce4c <__divdf3+0x890>
    cc90:	20c7c83a 	sub	r3,r4,r3
    cc94:	1023883a 	mov	r17,r2
    cc98:	003f6406 	br	ca2c <__divdf3+0x470>
    cc9c:	9d7f1736 	bltu	r19,r21,c8fc <__divdf3+0x340>
    cca0:	9806d07a 	srli	r3,r19,1
    cca4:	880497fa 	slli	r2,r17,31
    cca8:	980c97fa 	slli	r6,r19,31
    ccac:	882cd07a 	srli	r22,r17,1
    ccb0:	18a6b03a 	or	r19,r3,r2
    ccb4:	003f1406 	br	c908 <__divdf3+0x34c>
    ccb8:	243ff51e 	bne	r4,r16,cc90 <__divdf3+0x6d4>
    ccbc:	357ff22e 	bgeu	r6,r21,cc88 <__divdf3+0x6cc>
    ccc0:	80c7c83a 	sub	r3,r16,r3
    ccc4:	1023883a 	mov	r17,r2
    ccc8:	003f5806 	br	ca2c <__divdf3+0x470>
    cccc:	1013883a 	mov	r9,r2
    ccd0:	003f3d06 	br	c9c8 <__divdf3+0x40c>
    ccd4:	1023883a 	mov	r17,r2
    ccd8:	003f2506 	br	c970 <__divdf3+0x3b4>
    ccdc:	317fe436 	bltu	r6,r5,cc70 <__divdf3+0x6b4>
    cce0:	0007883a 	mov	r3,zero
    cce4:	003f5106 	br	ca2c <__divdf3+0x470>
    cce8:	1c07883a 	add	r3,r3,r16
    ccec:	993fffc4 	addi	r4,r19,-1
    ccf0:	1c000a2e 	bgeu	r3,r16,cd1c <__divdf3+0x760>
    ccf4:	2027883a 	mov	r19,r4
    ccf8:	19ff971e 	bne	r3,r7,cb58 <__divdf3+0x59c>
    ccfc:	a8bf961e 	bne	r21,r2,cb58 <__divdf3+0x59c>
    cd00:	003f9606 	br	cb5c <__divdf3+0x5a0>
    cd04:	04ffffc4 	movi	r19,-1
    cd08:	003f9406 	br	cb5c <__divdf3+0x5a0>
    cd0c:	100d883a 	mov	r6,r2
    cd10:	003f6106 	br	ca98 <__divdf3+0x4dc>
    cd14:	1013883a 	mov	r9,r2
    cd18:	003f7906 	br	cb00 <__divdf3+0x544>
    cd1c:	19c02636 	bltu	r3,r7,cdb8 <__divdf3+0x7fc>
    cd20:	38c04d26 	beq	r7,r3,ce58 <__divdf3+0x89c>
    cd24:	2027883a 	mov	r19,r4
    cd28:	003f8b06 	br	cb58 <__divdf3+0x59c>
    cd2c:	e025883a 	mov	r18,fp
    cd30:	003f8a06 	br	cb5c <__divdf3+0x5a0>
    cd34:	008007c4 	movi	r2,31
    cd38:	14002a16 	blt	r2,r16,cde4 <__divdf3+0x828>
    cd3c:	a5010784 	addi	r20,r20,1054
    cd40:	8d04983a 	sll	r2,r17,r20
    cd44:	9c06d83a 	srl	r3,r19,r16
    cd48:	9d28983a 	sll	r20,r19,r20
    cd4c:	8c20d83a 	srl	r16,r17,r16
    cd50:	1886b03a 	or	r3,r3,r2
    cd54:	a004c03a 	cmpne	r2,r20,zero
    cd58:	1884b03a 	or	r2,r3,r2
    cd5c:	10c001cc 	andi	r3,r2,7
    cd60:	18000726 	beq	r3,zero,cd80 <__divdf3+0x7c4>
    cd64:	110003cc 	andi	r4,r2,15
    cd68:	00c00104 	movi	r3,4
    cd6c:	20c00426 	beq	r4,r3,cd80 <__divdf3+0x7c4>
    cd70:	10c00104 	addi	r3,r2,4
    cd74:	1885803a 	cmpltu	r2,r3,r2
    cd78:	80a1883a 	add	r16,r16,r2
    cd7c:	1805883a 	mov	r2,r3
    cd80:	80c0202c 	andhi	r3,r16,128
    cd84:	18002d26 	beq	r3,zero,ce3c <__divdf3+0x880>
    cd88:	9180004c 	andi	r6,r18,1
    cd8c:	01000044 	movi	r4,1
    cd90:	000b883a 	mov	r5,zero
    cd94:	0027883a 	mov	r19,zero
    cd98:	003e6606 	br	c734 <__divdf3+0x178>
    cd9c:	354d883a 	add	r6,r6,r21
    cda0:	356d803a 	cmpltu	r22,r6,r21
    cda4:	b42d883a 	add	r22,r22,r16
    cda8:	b12d883a 	add	r22,r22,r4
    cdac:	8c7fff84 	addi	r17,r17,-2
    cdb0:	b0c7c83a 	sub	r3,r22,r3
    cdb4:	003f1d06 	br	ca2c <__divdf3+0x470>
    cdb8:	ad4b883a 	add	r5,r21,r21
    cdbc:	2d6b803a 	cmpltu	r21,r5,r21
    cdc0:	ac2b883a 	add	r21,r21,r16
    cdc4:	1d47883a 	add	r3,r3,r21
    cdc8:	993fff84 	addi	r4,r19,-2
    cdcc:	282b883a 	mov	r21,r5
    cdd0:	003fc806 	br	ccf4 <__divdf3+0x738>
    cdd4:	103fc41e 	bne	r2,zero,cce8 <__divdf3+0x72c>
    cdd8:	002b883a 	mov	r21,zero
    cddc:	a8bf5e1e 	bne	r21,r2,cb58 <__divdf3+0x59c>
    cde0:	003f5e06 	br	cb5c <__divdf3+0x5a0>
    cde4:	00bef884 	movi	r2,-1054
    cde8:	1505c83a 	sub	r2,r2,r20
    cdec:	00c00804 	movi	r3,32
    cdf0:	8884d83a 	srl	r2,r17,r2
    cdf4:	80c01c26 	beq	r16,r3,ce68 <__divdf3+0x8ac>
    cdf8:	a0c10f84 	addi	r3,r20,1086
    cdfc:	88c6983a 	sll	r3,r17,r3
    ce00:	1cc6b03a 	or	r3,r3,r19
    ce04:	1806c03a 	cmpne	r3,r3,zero
    ce08:	1884b03a 	or	r2,r3,r2
    ce0c:	140001cc 	andi	r16,r2,7
    ce10:	8000061e 	bne	r16,zero,ce2c <__divdf3+0x870>
    ce14:	000b883a 	mov	r5,zero
    ce18:	1004d0fa 	srli	r2,r2,3
    ce1c:	9180004c 	andi	r6,r18,1
    ce20:	0009883a 	mov	r4,zero
    ce24:	1426b03a 	or	r19,r2,r16
    ce28:	003e4206 	br	c734 <__divdf3+0x178>
    ce2c:	110003cc 	andi	r4,r2,15
    ce30:	00c00104 	movi	r3,4
    ce34:	0021883a 	mov	r16,zero
    ce38:	20ffcd1e 	bne	r4,r3,cd70 <__divdf3+0x7b4>
    ce3c:	800a927a 	slli	r5,r16,9
    ce40:	8020977a 	slli	r16,r16,29
    ce44:	280ad33a 	srli	r5,r5,12
    ce48:	003ff306 	br	ce18 <__divdf3+0x85c>
    ce4c:	317fd336 	bltu	r6,r5,cd9c <__divdf3+0x7e0>
    ce50:	1023883a 	mov	r17,r2
    ce54:	003fa206 	br	cce0 <__divdf3+0x724>
    ce58:	a8bfd736 	bltu	r21,r2,cdb8 <__divdf3+0x7fc>
    ce5c:	2027883a 	mov	r19,r4
    ce60:	a8bf3d1e 	bne	r21,r2,cb58 <__divdf3+0x59c>
    ce64:	003f3d06 	br	cb5c <__divdf3+0x5a0>
    ce68:	0007883a 	mov	r3,zero
    ce6c:	003fe406 	br	ce00 <__divdf3+0x844>
    ce70:	00800434 	movhi	r2,16
    ce74:	89400234 	orhi	r5,r17,8
    ce78:	10bfffc4 	addi	r2,r2,-1
    ce7c:	e00d883a 	mov	r6,fp
    ce80:	288a703a 	and	r5,r5,r2
    ce84:	003e8506 	br	c89c <__divdf3+0x2e0>

0000ce88 <__eqdf2>:
    ce88:	2804d53a 	srli	r2,r5,20
    ce8c:	3806d53a 	srli	r3,r7,20
    ce90:	02000434 	movhi	r8,16
    ce94:	423fffc4 	addi	r8,r8,-1
    ce98:	1081ffcc 	andi	r2,r2,2047
    ce9c:	0241ffc4 	movi	r9,2047
    cea0:	2a14703a 	and	r10,r5,r8
    cea4:	18c1ffcc 	andi	r3,r3,2047
    cea8:	3a10703a 	and	r8,r7,r8
    ceac:	280ad7fa 	srli	r5,r5,31
    ceb0:	380ed7fa 	srli	r7,r7,31
    ceb4:	12400f26 	beq	r2,r9,cef4 <__eqdf2+0x6c>
    ceb8:	0241ffc4 	movi	r9,2047
    cebc:	1a400326 	beq	r3,r9,cecc <__eqdf2+0x44>
    cec0:	10c00526 	beq	r2,r3,ced8 <__eqdf2+0x50>
    cec4:	00800044 	movi	r2,1
    cec8:	f800283a 	ret
    cecc:	4192b03a 	or	r9,r8,r6
    ced0:	483ffc1e 	bne	r9,zero,cec4 <__eqdf2+0x3c>
    ced4:	10fffb1e 	bne	r2,r3,cec4 <__eqdf2+0x3c>
    ced8:	523ffa1e 	bne	r10,r8,cec4 <__eqdf2+0x3c>
    cedc:	21bff91e 	bne	r4,r6,cec4 <__eqdf2+0x3c>
    cee0:	29c00826 	beq	r5,r7,cf04 <__eqdf2+0x7c>
    cee4:	103ff71e 	bne	r2,zero,cec4 <__eqdf2+0x3c>
    cee8:	5104b03a 	or	r2,r10,r4
    ceec:	1004c03a 	cmpne	r2,r2,zero
    cef0:	f800283a 	ret
    cef4:	5112b03a 	or	r9,r10,r4
    cef8:	483fef26 	beq	r9,zero,ceb8 <__eqdf2+0x30>
    cefc:	00800044 	movi	r2,1
    cf00:	f800283a 	ret
    cf04:	0005883a 	mov	r2,zero
    cf08:	f800283a 	ret

0000cf0c <__gedf2>:
    cf0c:	2804d53a 	srli	r2,r5,20
    cf10:	3806d53a 	srli	r3,r7,20
    cf14:	02000434 	movhi	r8,16
    cf18:	423fffc4 	addi	r8,r8,-1
    cf1c:	0241ffc4 	movi	r9,2047
    cf20:	1081ffcc 	andi	r2,r2,2047
    cf24:	2a14703a 	and	r10,r5,r8
    cf28:	1a46703a 	and	r3,r3,r9
    cf2c:	3a10703a 	and	r8,r7,r8
    cf30:	280ad7fa 	srli	r5,r5,31
    cf34:	380ed7fa 	srli	r7,r7,31
    cf38:	12400b26 	beq	r2,r9,cf68 <__gedf2+0x5c>
    cf3c:	1a401626 	beq	r3,r9,cf98 <__gedf2+0x8c>
    cf40:	10000c1e 	bne	r2,zero,cf74 <__gedf2+0x68>
    cf44:	5112b03a 	or	r9,r10,r4
    cf48:	4813003a 	cmpeq	r9,r9,zero
    cf4c:	4817883a 	mov	r11,r9
    cf50:	18000c1e 	bne	r3,zero,cf84 <__gedf2+0x78>
    cf54:	4198b03a 	or	r12,r8,r6
    cf58:	60000a1e 	bne	r12,zero,cf84 <__gedf2+0x78>
    cf5c:	48001326 	beq	r9,zero,cfac <__gedf2+0xa0>
    cf60:	0005883a 	mov	r2,zero
    cf64:	f800283a 	ret
    cf68:	5112b03a 	or	r9,r10,r4
    cf6c:	4800191e 	bne	r9,zero,cfd4 <__gedf2+0xc8>
    cf70:	18800926 	beq	r3,r2,cf98 <__gedf2+0x8c>
    cf74:	18000b1e 	bne	r3,zero,cfa4 <__gedf2+0x98>
    cf78:	4192b03a 	or	r9,r8,r6
    cf7c:	0017883a 	mov	r11,zero
    cf80:	48000a26 	beq	r9,zero,cfac <__gedf2+0xa0>
    cf84:	39c03fcc 	andi	r7,r7,255
    cf88:	58000726 	beq	r11,zero,cfa8 <__gedf2+0x9c>
    cf8c:	3800081e 	bne	r7,zero,cfb0 <__gedf2+0xa4>
    cf90:	00bfffc4 	movi	r2,-1
    cf94:	f800283a 	ret
    cf98:	4192b03a 	or	r9,r8,r6
    cf9c:	48000d1e 	bne	r9,zero,cfd4 <__gedf2+0xc8>
    cfa0:	103fe826 	beq	r2,zero,cf44 <__gedf2+0x38>
    cfa4:	39c03fcc 	andi	r7,r7,255
    cfa8:	29c00326 	beq	r5,r7,cfb8 <__gedf2+0xac>
    cfac:	283ff81e 	bne	r5,zero,cf90 <__gedf2+0x84>
    cfb0:	00800044 	movi	r2,1
    cfb4:	f800283a 	ret
    cfb8:	18bffc16 	blt	r3,r2,cfac <__gedf2+0xa0>
    cfbc:	10c00316 	blt	r2,r3,cfcc <__gedf2+0xc0>
    cfc0:	42bffa36 	bltu	r8,r10,cfac <__gedf2+0xa0>
    cfc4:	52000526 	beq	r10,r8,cfdc <__gedf2+0xd0>
    cfc8:	523fe52e 	bgeu	r10,r8,cf60 <__gedf2+0x54>
    cfcc:	283ff026 	beq	r5,zero,cf90 <__gedf2+0x84>
    cfd0:	003ff706 	br	cfb0 <__gedf2+0xa4>
    cfd4:	00bfff84 	movi	r2,-2
    cfd8:	f800283a 	ret
    cfdc:	313ff336 	bltu	r6,r4,cfac <__gedf2+0xa0>
    cfe0:	21bfdf2e 	bgeu	r4,r6,cf60 <__gedf2+0x54>
    cfe4:	283fea26 	beq	r5,zero,cf90 <__gedf2+0x84>
    cfe8:	003ff106 	br	cfb0 <__gedf2+0xa4>

0000cfec <__ledf2>:
    cfec:	2804d53a 	srli	r2,r5,20
    cff0:	3810d53a 	srli	r8,r7,20
    cff4:	00c00434 	movhi	r3,16
    cff8:	18ffffc4 	addi	r3,r3,-1
    cffc:	0241ffc4 	movi	r9,2047
    d000:	1081ffcc 	andi	r2,r2,2047
    d004:	28d4703a 	and	r10,r5,r3
    d008:	4250703a 	and	r8,r8,r9
    d00c:	38c6703a 	and	r3,r7,r3
    d010:	280ad7fa 	srli	r5,r5,31
    d014:	380ed7fa 	srli	r7,r7,31
    d018:	12400b26 	beq	r2,r9,d048 <__ledf2+0x5c>
    d01c:	42401926 	beq	r8,r9,d084 <__ledf2+0x98>
    d020:	10000c1e 	bne	r2,zero,d054 <__ledf2+0x68>
    d024:	5112b03a 	or	r9,r10,r4
    d028:	4813003a 	cmpeq	r9,r9,zero
    d02c:	4817883a 	mov	r11,r9
    d030:	40000f26 	beq	r8,zero,d070 <__ledf2+0x84>
    d034:	39c03fcc 	andi	r7,r7,255
    d038:	58001826 	beq	r11,zero,d09c <__ledf2+0xb0>
    d03c:	38000a1e 	bne	r7,zero,d068 <__ledf2+0x7c>
    d040:	00bfffc4 	movi	r2,-1
    d044:	f800283a 	ret
    d048:	5112b03a 	or	r9,r10,r4
    d04c:	48000f1e 	bne	r9,zero,d08c <__ledf2+0xa0>
    d050:	40800c26 	beq	r8,r2,d084 <__ledf2+0x98>
    d054:	4000101e 	bne	r8,zero,d098 <__ledf2+0xac>
    d058:	1992b03a 	or	r9,r3,r6
    d05c:	0017883a 	mov	r11,zero
    d060:	483ff41e 	bne	r9,zero,d034 <__ledf2+0x48>
    d064:	283ff61e 	bne	r5,zero,d040 <__ledf2+0x54>
    d068:	00800044 	movi	r2,1
    d06c:	f800283a 	ret
    d070:	1998b03a 	or	r12,r3,r6
    d074:	603fef1e 	bne	r12,zero,d034 <__ledf2+0x48>
    d078:	483ffa26 	beq	r9,zero,d064 <__ledf2+0x78>
    d07c:	0005883a 	mov	r2,zero
    d080:	f800283a 	ret
    d084:	1992b03a 	or	r9,r3,r6
    d088:	48000226 	beq	r9,zero,d094 <__ledf2+0xa8>
    d08c:	00800084 	movi	r2,2
    d090:	f800283a 	ret
    d094:	103fe326 	beq	r2,zero,d024 <__ledf2+0x38>
    d098:	39c03fcc 	andi	r7,r7,255
    d09c:	29fff11e 	bne	r5,r7,d064 <__ledf2+0x78>
    d0a0:	40bff016 	blt	r8,r2,d064 <__ledf2+0x78>
    d0a4:	12000316 	blt	r2,r8,d0b4 <__ledf2+0xc8>
    d0a8:	1abfee36 	bltu	r3,r10,d064 <__ledf2+0x78>
    d0ac:	50c00326 	beq	r10,r3,d0bc <__ledf2+0xd0>
    d0b0:	50fff22e 	bgeu	r10,r3,d07c <__ledf2+0x90>
    d0b4:	283fe226 	beq	r5,zero,d040 <__ledf2+0x54>
    d0b8:	003feb06 	br	d068 <__ledf2+0x7c>
    d0bc:	313fe936 	bltu	r6,r4,d064 <__ledf2+0x78>
    d0c0:	21bfee2e 	bgeu	r4,r6,d07c <__ledf2+0x90>
    d0c4:	283fde26 	beq	r5,zero,d040 <__ledf2+0x54>
    d0c8:	003fe706 	br	d068 <__ledf2+0x7c>

0000d0cc <__muldf3>:
    d0cc:	defff204 	addi	sp,sp,-56
    d0d0:	2804d53a 	srli	r2,r5,20
    d0d4:	dd800a15 	stw	r22,40(sp)
    d0d8:	282cd7fa 	srli	r22,r5,31
    d0dc:	dc000415 	stw	r16,16(sp)
    d0e0:	04000434 	movhi	r16,16
    d0e4:	df000c15 	stw	fp,48(sp)
    d0e8:	dd000815 	stw	r20,32(sp)
    d0ec:	dcc00715 	stw	r19,28(sp)
    d0f0:	dc800615 	stw	r18,24(sp)
    d0f4:	dc400515 	stw	r17,20(sp)
    d0f8:	843fffc4 	addi	r16,r16,-1
    d0fc:	dfc00d15 	stw	ra,52(sp)
    d100:	ddc00b15 	stw	r23,44(sp)
    d104:	dd400915 	stw	r21,36(sp)
    d108:	1501ffcc 	andi	r20,r2,2047
    d10c:	2023883a 	mov	r17,r4
    d110:	2025883a 	mov	r18,r4
    d114:	2c20703a 	and	r16,r5,r16
    d118:	b027883a 	mov	r19,r22
    d11c:	b7003fcc 	andi	fp,r22,255
    d120:	a0005926 	beq	r20,zero,d288 <__muldf3+0x1bc>
    d124:	0081ffc4 	movi	r2,2047
    d128:	a0803426 	beq	r20,r2,d1fc <__muldf3+0x130>
    d12c:	84000434 	orhi	r16,r16,16
    d130:	2004d77a 	srli	r2,r4,29
    d134:	802090fa 	slli	r16,r16,3
    d138:	202490fa 	slli	r18,r4,3
    d13c:	a53f0044 	addi	r20,r20,-1023
    d140:	80a0b03a 	or	r16,r16,r2
    d144:	002b883a 	mov	r21,zero
    d148:	0015883a 	mov	r10,zero
    d14c:	3812d53a 	srli	r9,r7,20
    d150:	3806d7fa 	srli	r3,r7,31
    d154:	02000434 	movhi	r8,16
    d158:	423fffc4 	addi	r8,r8,-1
    d15c:	4941ffcc 	andi	r5,r9,2047
    d160:	302f883a 	mov	r23,r6
    d164:	3a22703a 	and	r17,r7,r8
    d168:	1ac03fcc 	andi	r11,r3,255
    d16c:	28006226 	beq	r5,zero,d2f8 <__muldf3+0x22c>
    d170:	0081ffc4 	movi	r2,2047
    d174:	28805a26 	beq	r5,r2,d2e0 <__muldf3+0x214>
    d178:	8a000434 	orhi	r8,r17,16
    d17c:	3004d77a 	srli	r2,r6,29
    d180:	401090fa 	slli	r8,r8,3
    d184:	302e90fa 	slli	r23,r6,3
    d188:	297f0044 	addi	r5,r5,-1023
    d18c:	40a2b03a 	or	r17,r8,r2
    d190:	0013883a 	mov	r9,zero
    d194:	4d4cb03a 	or	r6,r9,r21
    d198:	300c90ba 	slli	r6,r6,2
    d19c:	02000074 	movhi	r8,1
    d1a0:	42346f04 	addi	r8,r8,-11844
    d1a4:	320d883a 	add	r6,r6,r8
    d1a8:	31800017 	ldw	r6,0(r6)
    d1ac:	a14b883a 	add	r5,r20,r5
    d1b0:	1dacf03a 	xor	r22,r3,r22
    d1b4:	2b000044 	addi	r12,r5,1
    d1b8:	3000683a 	jmp	r6
    d1bc:	0000d3f8 	rdprs	zero,zero,847
    d1c0:	0000d3e4 	muli	zero,zero,847
    d1c4:	0000d3e4 	muli	zero,zero,847
    d1c8:	0000d3d0 	cmplti	zero,zero,847
    d1cc:	0000d218 	cmpnei	zero,zero,840
    d1d0:	0000d218 	cmpnei	zero,zero,840
    d1d4:	0000d3b8 	rdprs	zero,zero,846
    d1d8:	0000d3d0 	cmplti	zero,zero,847
    d1dc:	0000d218 	cmpnei	zero,zero,840
    d1e0:	0000d3b8 	rdprs	zero,zero,846
    d1e4:	0000d218 	cmpnei	zero,zero,840
    d1e8:	0000d3d0 	cmplti	zero,zero,847
    d1ec:	0000d21c 	xori	zero,zero,840
    d1f0:	0000d21c 	xori	zero,zero,840
    d1f4:	0000d21c 	xori	zero,zero,840
    d1f8:	0000d5f4 	movhi	zero,855
    d1fc:	8104b03a 	or	r2,r16,r4
    d200:	10006a1e 	bne	r2,zero,d3ac <__muldf3+0x2e0>
    d204:	05400204 	movi	r21,8
    d208:	0021883a 	mov	r16,zero
    d20c:	0025883a 	mov	r18,zero
    d210:	02800084 	movi	r10,2
    d214:	003fcd06 	br	d14c <__muldf3+0x80>
    d218:	b039883a 	mov	fp,r22
    d21c:	00800084 	movi	r2,2
    d220:	50804e1e 	bne	r10,r2,d35c <__muldf3+0x290>
    d224:	e4c0004c 	andi	r19,fp,1
    d228:	0101ffc4 	movi	r4,2047
    d22c:	0021883a 	mov	r16,zero
    d230:	0025883a 	mov	r18,zero
    d234:	2008953a 	slli	r4,r4,20
    d238:	98c03fcc 	andi	r3,r19,255
    d23c:	01400434 	movhi	r5,16
    d240:	297fffc4 	addi	r5,r5,-1
    d244:	180697fa 	slli	r3,r3,31
    d248:	8160703a 	and	r16,r16,r5
    d24c:	8120b03a 	or	r16,r16,r4
    d250:	80c6b03a 	or	r3,r16,r3
    d254:	9005883a 	mov	r2,r18
    d258:	dfc00d17 	ldw	ra,52(sp)
    d25c:	df000c17 	ldw	fp,48(sp)
    d260:	ddc00b17 	ldw	r23,44(sp)
    d264:	dd800a17 	ldw	r22,40(sp)
    d268:	dd400917 	ldw	r21,36(sp)
    d26c:	dd000817 	ldw	r20,32(sp)
    d270:	dcc00717 	ldw	r19,28(sp)
    d274:	dc800617 	ldw	r18,24(sp)
    d278:	dc400517 	ldw	r17,20(sp)
    d27c:	dc000417 	ldw	r16,16(sp)
    d280:	dec00e04 	addi	sp,sp,56
    d284:	f800283a 	ret
    d288:	8104b03a 	or	r2,r16,r4
    d28c:	10004226 	beq	r2,zero,d398 <__muldf3+0x2cc>
    d290:	8000f926 	beq	r16,zero,d678 <__muldf3+0x5ac>
    d294:	8009883a 	mov	r4,r16
    d298:	d9800315 	stw	r6,12(sp)
    d29c:	d9c00015 	stw	r7,0(sp)
    d2a0:	000e2bc0 	call	e2bc <__clzsi2>
    d2a4:	d9800317 	ldw	r6,12(sp)
    d2a8:	d9c00017 	ldw	r7,0(sp)
    d2ac:	1007883a 	mov	r3,r2
    d2b0:	01000a04 	movi	r4,40
    d2b4:	18bffe04 	addi	r2,r3,-8
    d2b8:	20c9c83a 	sub	r4,r4,r3
    d2bc:	80a0983a 	sll	r16,r16,r2
    d2c0:	8908d83a 	srl	r4,r17,r4
    d2c4:	88a4983a 	sll	r18,r17,r2
    d2c8:	2420b03a 	or	r16,r4,r16
    d2cc:	017f0344 	movi	r5,-1011
    d2d0:	28e9c83a 	sub	r20,r5,r3
    d2d4:	002b883a 	mov	r21,zero
    d2d8:	0015883a 	mov	r10,zero
    d2dc:	003f9b06 	br	d14c <__muldf3+0x80>
    d2e0:	8984b03a 	or	r2,r17,r6
    d2e4:	10002a1e 	bne	r2,zero,d390 <__muldf3+0x2c4>
    d2e8:	0023883a 	mov	r17,zero
    d2ec:	002f883a 	mov	r23,zero
    d2f0:	02400084 	movi	r9,2
    d2f4:	003fa706 	br	d194 <__muldf3+0xc8>
    d2f8:	8984b03a 	or	r2,r17,r6
    d2fc:	10002026 	beq	r2,zero,d380 <__muldf3+0x2b4>
    d300:	8800cc26 	beq	r17,zero,d634 <__muldf3+0x568>
    d304:	8809883a 	mov	r4,r17
    d308:	d8c00215 	stw	r3,8(sp)
    d30c:	d9800315 	stw	r6,12(sp)
    d310:	da800015 	stw	r10,0(sp)
    d314:	dac00115 	stw	r11,4(sp)
    d318:	000e2bc0 	call	e2bc <__clzsi2>
    d31c:	d8c00217 	ldw	r3,8(sp)
    d320:	d9800317 	ldw	r6,12(sp)
    d324:	da800017 	ldw	r10,0(sp)
    d328:	dac00117 	ldw	r11,4(sp)
    d32c:	1009883a 	mov	r4,r2
    d330:	01400a04 	movi	r5,40
    d334:	25fffe04 	addi	r23,r4,-8
    d338:	290bc83a 	sub	r5,r5,r4
    d33c:	8dd0983a 	sll	r8,r17,r23
    d340:	314ad83a 	srl	r5,r6,r5
    d344:	35ee983a 	sll	r23,r6,r23
    d348:	2a22b03a 	or	r17,r5,r8
    d34c:	017f0344 	movi	r5,-1011
    d350:	290bc83a 	sub	r5,r5,r4
    d354:	0013883a 	mov	r9,zero
    d358:	003f8e06 	br	d194 <__muldf3+0xc8>
    d35c:	008000c4 	movi	r2,3
    d360:	50811d26 	beq	r10,r2,d7d8 <__muldf3+0x70c>
    d364:	00800044 	movi	r2,1
    d368:	5080e01e 	bne	r10,r2,d6ec <__muldf3+0x620>
    d36c:	e0a6703a 	and	r19,fp,r2
    d370:	0009883a 	mov	r4,zero
    d374:	0021883a 	mov	r16,zero
    d378:	0025883a 	mov	r18,zero
    d37c:	003fad06 	br	d234 <__muldf3+0x168>
    d380:	0023883a 	mov	r17,zero
    d384:	002f883a 	mov	r23,zero
    d388:	02400044 	movi	r9,1
    d38c:	003f8106 	br	d194 <__muldf3+0xc8>
    d390:	024000c4 	movi	r9,3
    d394:	003f7f06 	br	d194 <__muldf3+0xc8>
    d398:	05400104 	movi	r21,4
    d39c:	0021883a 	mov	r16,zero
    d3a0:	0025883a 	mov	r18,zero
    d3a4:	02800044 	movi	r10,1
    d3a8:	003f6806 	br	d14c <__muldf3+0x80>
    d3ac:	05400304 	movi	r21,12
    d3b0:	028000c4 	movi	r10,3
    d3b4:	003f6506 	br	d14c <__muldf3+0x80>
    d3b8:	04000434 	movhi	r16,16
    d3bc:	0027883a 	mov	r19,zero
    d3c0:	843fffc4 	addi	r16,r16,-1
    d3c4:	04bfffc4 	movi	r18,-1
    d3c8:	0101ffc4 	movi	r4,2047
    d3cc:	003f9906 	br	d234 <__muldf3+0x168>
    d3d0:	8821883a 	mov	r16,r17
    d3d4:	b825883a 	mov	r18,r23
    d3d8:	5839883a 	mov	fp,r11
    d3dc:	4815883a 	mov	r10,r9
    d3e0:	003f8e06 	br	d21c <__muldf3+0x150>
    d3e4:	8821883a 	mov	r16,r17
    d3e8:	b825883a 	mov	r18,r23
    d3ec:	b039883a 	mov	fp,r22
    d3f0:	4815883a 	mov	r10,r9
    d3f4:	003f8906 	br	d21c <__muldf3+0x150>
    d3f8:	b80cd43a 	srli	r6,r23,16
    d3fc:	9006d43a 	srli	r3,r18,16
    d400:	90bfffcc 	andi	r2,r18,65535
    d404:	bdffffcc 	andi	r23,r23,65535
    d408:	b891383a 	mul	r8,r23,r2
    d40c:	b8c9383a 	mul	r4,r23,r3
    d410:	309b383a 	mul	r13,r6,r2
    d414:	400ed43a 	srli	r7,r8,16
    d418:	30df383a 	mul	r15,r6,r3
    d41c:	235b883a 	add	r13,r4,r13
    d420:	69db883a 	add	r13,r13,r7
    d424:	6900022e 	bgeu	r13,r4,d430 <__muldf3+0x364>
    d428:	01000074 	movhi	r4,1
    d42c:	791f883a 	add	r15,r15,r4
    d430:	8828d43a 	srli	r20,r17,16
    d434:	8c7fffcc 	andi	r17,r17,65535
    d438:	888f383a 	mul	r7,r17,r2
    d43c:	88d3383a 	mul	r9,r17,r3
    d440:	a0a5383a 	mul	r18,r20,r2
    d444:	3816d43a 	srli	r11,r7,16
    d448:	6814943a 	slli	r10,r13,16
    d44c:	4ca5883a 	add	r18,r9,r18
    d450:	423fffcc 	andi	r8,r8,65535
    d454:	92e5883a 	add	r18,r18,r11
    d458:	6808d43a 	srli	r4,r13,16
    d45c:	5215883a 	add	r10,r10,r8
    d460:	a0c7383a 	mul	r3,r20,r3
    d464:	9240022e 	bgeu	r18,r9,d470 <__muldf3+0x3a4>
    d468:	00800074 	movhi	r2,1
    d46c:	1887883a 	add	r3,r3,r2
    d470:	802ad43a 	srli	r21,r16,16
    d474:	80bfffcc 	andi	r2,r16,65535
    d478:	b893383a 	mul	r9,r23,r2
    d47c:	3091383a 	mul	r8,r6,r2
    d480:	bd6f383a 	mul	r23,r23,r21
    d484:	9026943a 	slli	r19,r18,16
    d488:	481ad43a 	srli	r13,r9,16
    d48c:	9024d43a 	srli	r18,r18,16
    d490:	39ffffcc 	andi	r7,r7,65535
    d494:	ba11883a 	add	r8,r23,r8
    d498:	99e7883a 	add	r19,r19,r7
    d49c:	4351883a 	add	r8,r8,r13
    d4a0:	1c97883a 	add	r11,r3,r18
    d4a4:	354d383a 	mul	r6,r6,r21
    d4a8:	9925883a 	add	r18,r19,r4
    d4ac:	45c0022e 	bgeu	r8,r23,d4b8 <__muldf3+0x3ec>
    d4b0:	00c00074 	movhi	r3,1
    d4b4:	30cd883a 	add	r6,r6,r3
    d4b8:	8889383a 	mul	r4,r17,r2
    d4bc:	8d63383a 	mul	r17,r17,r21
    d4c0:	a085383a 	mul	r2,r20,r2
    d4c4:	200ed43a 	srli	r7,r4,16
    d4c8:	401cd43a 	srli	r14,r8,16
    d4cc:	401a943a 	slli	r13,r8,16
    d4d0:	8885883a 	add	r2,r17,r2
    d4d4:	4a3fffcc 	andi	r8,r9,65535
    d4d8:	11c5883a 	add	r2,r2,r7
    d4dc:	339d883a 	add	r14,r6,r14
    d4e0:	6a11883a 	add	r8,r13,r8
    d4e4:	a561383a 	mul	r16,r20,r21
    d4e8:	1440022e 	bgeu	r2,r17,d4f4 <__muldf3+0x428>
    d4ec:	00c00074 	movhi	r3,1
    d4f0:	80e1883a 	add	r16,r16,r3
    d4f4:	1006943a 	slli	r3,r2,16
    d4f8:	213fffcc 	andi	r4,r4,65535
    d4fc:	93db883a 	add	r13,r18,r15
    d500:	1909883a 	add	r4,r3,r4
    d504:	22c7883a 	add	r3,r4,r11
    d508:	6cd3803a 	cmpltu	r9,r13,r19
    d50c:	6a09883a 	add	r4,r13,r8
    d510:	1a5b883a 	add	r13,r3,r9
    d514:	2211803a 	cmpltu	r8,r4,r8
    d518:	734d883a 	add	r6,r14,r13
    d51c:	100ed43a 	srli	r7,r2,16
    d520:	6a53803a 	cmpltu	r9,r13,r9
    d524:	3205883a 	add	r2,r6,r8
    d528:	1ac7803a 	cmpltu	r3,r3,r11
    d52c:	1211803a 	cmpltu	r8,r2,r8
    d530:	48c6b03a 	or	r3,r9,r3
    d534:	338d803a 	cmpltu	r6,r6,r14
    d538:	19c7883a 	add	r3,r3,r7
    d53c:	418cb03a 	or	r6,r8,r6
    d540:	1987883a 	add	r3,r3,r6
    d544:	2024927a 	slli	r18,r4,9
    d548:	1c07883a 	add	r3,r3,r16
    d54c:	1806927a 	slli	r3,r3,9
    d550:	1020d5fa 	srli	r16,r2,23
    d554:	2008d5fa 	srli	r4,r4,23
    d558:	9294b03a 	or	r10,r18,r10
    d55c:	1004927a 	slli	r2,r2,9
    d560:	5024c03a 	cmpne	r18,r10,zero
    d564:	1c20b03a 	or	r16,r3,r16
    d568:	9108b03a 	or	r4,r18,r4
    d56c:	80c0402c 	andhi	r3,r16,256
    d570:	20a4b03a 	or	r18,r4,r2
    d574:	18000726 	beq	r3,zero,d594 <__muldf3+0x4c8>
    d578:	9006d07a 	srli	r3,r18,1
    d57c:	800897fa 	slli	r4,r16,31
    d580:	9080004c 	andi	r2,r18,1
    d584:	8020d07a 	srli	r16,r16,1
    d588:	10c4b03a 	or	r2,r2,r3
    d58c:	1124b03a 	or	r18,r2,r4
    d590:	600b883a 	mov	r5,r12
    d594:	2900ffc4 	addi	r4,r5,1023
    d598:	01004b0e 	bge	zero,r4,d6c8 <__muldf3+0x5fc>
    d59c:	908001cc 	andi	r2,r18,7
    d5a0:	10000726 	beq	r2,zero,d5c0 <__muldf3+0x4f4>
    d5a4:	90c003cc 	andi	r3,r18,15
    d5a8:	00800104 	movi	r2,4
    d5ac:	18800426 	beq	r3,r2,d5c0 <__muldf3+0x4f4>
    d5b0:	9087883a 	add	r3,r18,r2
    d5b4:	1c85803a 	cmpltu	r2,r3,r18
    d5b8:	80a1883a 	add	r16,r16,r2
    d5bc:	1825883a 	mov	r18,r3
    d5c0:	8080402c 	andhi	r2,r16,256
    d5c4:	10000426 	beq	r2,zero,d5d8 <__muldf3+0x50c>
    d5c8:	00bfc034 	movhi	r2,65280
    d5cc:	10bfffc4 	addi	r2,r2,-1
    d5d0:	29010004 	addi	r4,r5,1024
    d5d4:	80a0703a 	and	r16,r16,r2
    d5d8:	0081ff84 	movi	r2,2046
    d5dc:	1100320e 	bge	r2,r4,d6a8 <__muldf3+0x5dc>
    d5e0:	b4c0004c 	andi	r19,r22,1
    d5e4:	0101ffc4 	movi	r4,2047
    d5e8:	0021883a 	mov	r16,zero
    d5ec:	0025883a 	mov	r18,zero
    d5f0:	003f1006 	br	d234 <__muldf3+0x168>
    d5f4:	8080022c 	andhi	r2,r16,8
    d5f8:	10000926 	beq	r2,zero,d620 <__muldf3+0x554>
    d5fc:	8880022c 	andhi	r2,r17,8
    d600:	1000071e 	bne	r2,zero,d620 <__muldf3+0x554>
    d604:	00800434 	movhi	r2,16
    d608:	8c000234 	orhi	r16,r17,8
    d60c:	10bfffc4 	addi	r2,r2,-1
    d610:	1827883a 	mov	r19,r3
    d614:	80a0703a 	and	r16,r16,r2
    d618:	b825883a 	mov	r18,r23
    d61c:	003f6a06 	br	d3c8 <__muldf3+0x2fc>
    d620:	00800434 	movhi	r2,16
    d624:	84000234 	orhi	r16,r16,8
    d628:	10bfffc4 	addi	r2,r2,-1
    d62c:	80a0703a 	and	r16,r16,r2
    d630:	003f6506 	br	d3c8 <__muldf3+0x2fc>
    d634:	3009883a 	mov	r4,r6
    d638:	d8c00215 	stw	r3,8(sp)
    d63c:	d9800315 	stw	r6,12(sp)
    d640:	da800015 	stw	r10,0(sp)
    d644:	dac00115 	stw	r11,4(sp)
    d648:	000e2bc0 	call	e2bc <__clzsi2>
    d64c:	11000804 	addi	r4,r2,32
    d650:	014009c4 	movi	r5,39
    d654:	d8c00217 	ldw	r3,8(sp)
    d658:	d9800317 	ldw	r6,12(sp)
    d65c:	da800017 	ldw	r10,0(sp)
    d660:	dac00117 	ldw	r11,4(sp)
    d664:	293f320e 	bge	r5,r4,d330 <__muldf3+0x264>
    d668:	10bffe04 	addi	r2,r2,-8
    d66c:	b8a2983a 	sll	r17,r23,r2
    d670:	002f883a 	mov	r23,zero
    d674:	003f3506 	br	d34c <__muldf3+0x280>
    d678:	d9800315 	stw	r6,12(sp)
    d67c:	d9c00015 	stw	r7,0(sp)
    d680:	000e2bc0 	call	e2bc <__clzsi2>
    d684:	10c00804 	addi	r3,r2,32
    d688:	010009c4 	movi	r4,39
    d68c:	d9800317 	ldw	r6,12(sp)
    d690:	d9c00017 	ldw	r7,0(sp)
    d694:	20ff060e 	bge	r4,r3,d2b0 <__muldf3+0x1e4>
    d698:	10bffe04 	addi	r2,r2,-8
    d69c:	88a0983a 	sll	r16,r17,r2
    d6a0:	0025883a 	mov	r18,zero
    d6a4:	003f0906 	br	d2cc <__muldf3+0x200>
    d6a8:	9004d0fa 	srli	r2,r18,3
    d6ac:	8024977a 	slli	r18,r16,29
    d6b0:	8020927a 	slli	r16,r16,9
    d6b4:	2101ffcc 	andi	r4,r4,2047
    d6b8:	90a4b03a 	or	r18,r18,r2
    d6bc:	8020d33a 	srli	r16,r16,12
    d6c0:	b4c0004c 	andi	r19,r22,1
    d6c4:	003edb06 	br	d234 <__muldf3+0x168>
    d6c8:	00ff0084 	movi	r3,-1022
    d6cc:	1947c83a 	sub	r3,r3,r5
    d6d0:	00800e04 	movi	r2,56
    d6d4:	10c0080e 	bge	r2,r3,d6f8 <__muldf3+0x62c>
    d6d8:	b4c0004c 	andi	r19,r22,1
    d6dc:	0009883a 	mov	r4,zero
    d6e0:	0021883a 	mov	r16,zero
    d6e4:	0025883a 	mov	r18,zero
    d6e8:	003ed206 	br	d234 <__muldf3+0x168>
    d6ec:	600b883a 	mov	r5,r12
    d6f0:	e02d883a 	mov	r22,fp
    d6f4:	003fa706 	br	d594 <__muldf3+0x4c8>
    d6f8:	008007c4 	movi	r2,31
    d6fc:	10c01816 	blt	r2,r3,d760 <__muldf3+0x694>
    d700:	29410784 	addi	r5,r5,1054
    d704:	8144983a 	sll	r2,r16,r5
    d708:	90c8d83a 	srl	r4,r18,r3
    d70c:	914a983a 	sll	r5,r18,r5
    d710:	80c6d83a 	srl	r3,r16,r3
    d714:	2088b03a 	or	r4,r4,r2
    d718:	2804c03a 	cmpne	r2,r5,zero
    d71c:	2084b03a 	or	r2,r4,r2
    d720:	110001cc 	andi	r4,r2,7
    d724:	20000726 	beq	r4,zero,d744 <__muldf3+0x678>
    d728:	114003cc 	andi	r5,r2,15
    d72c:	01000104 	movi	r4,4
    d730:	29000426 	beq	r5,r4,d744 <__muldf3+0x678>
    d734:	11000104 	addi	r4,r2,4
    d738:	2085803a 	cmpltu	r2,r4,r2
    d73c:	1887883a 	add	r3,r3,r2
    d740:	2005883a 	mov	r2,r4
    d744:	1900202c 	andhi	r4,r3,128
    d748:	20001826 	beq	r4,zero,d7ac <__muldf3+0x6e0>
    d74c:	b4c0004c 	andi	r19,r22,1
    d750:	01000044 	movi	r4,1
    d754:	0021883a 	mov	r16,zero
    d758:	0025883a 	mov	r18,zero
    d75c:	003eb506 	br	d234 <__muldf3+0x168>
    d760:	00bef884 	movi	r2,-1054
    d764:	1145c83a 	sub	r2,r2,r5
    d768:	8088d83a 	srl	r4,r16,r2
    d76c:	00800804 	movi	r2,32
    d770:	18801726 	beq	r3,r2,d7d0 <__muldf3+0x704>
    d774:	28810f84 	addi	r2,r5,1086
    d778:	8084983a 	sll	r2,r16,r2
    d77c:	1484b03a 	or	r2,r2,r18
    d780:	1004c03a 	cmpne	r2,r2,zero
    d784:	1104b03a 	or	r2,r2,r4
    d788:	10c001cc 	andi	r3,r2,7
    d78c:	18000b1e 	bne	r3,zero,d7bc <__muldf3+0x6f0>
    d790:	0021883a 	mov	r16,zero
    d794:	1004d0fa 	srli	r2,r2,3
    d798:	b4c0004c 	andi	r19,r22,1
    d79c:	0009883a 	mov	r4,zero
    d7a0:	10e4b03a 	or	r18,r2,r3
    d7a4:	003ea306 	br	d234 <__muldf3+0x168>
    d7a8:	0007883a 	mov	r3,zero
    d7ac:	1820927a 	slli	r16,r3,9
    d7b0:	1806977a 	slli	r3,r3,29
    d7b4:	8020d33a 	srli	r16,r16,12
    d7b8:	003ff606 	br	d794 <__muldf3+0x6c8>
    d7bc:	110003cc 	andi	r4,r2,15
    d7c0:	00c00104 	movi	r3,4
    d7c4:	20fff826 	beq	r4,r3,d7a8 <__muldf3+0x6dc>
    d7c8:	0007883a 	mov	r3,zero
    d7cc:	003fd906 	br	d734 <__muldf3+0x668>
    d7d0:	0005883a 	mov	r2,zero
    d7d4:	003fe906 	br	d77c <__muldf3+0x6b0>
    d7d8:	00800434 	movhi	r2,16
    d7dc:	84000234 	orhi	r16,r16,8
    d7e0:	10bfffc4 	addi	r2,r2,-1
    d7e4:	e4c0004c 	andi	r19,fp,1
    d7e8:	80a0703a 	and	r16,r16,r2
    d7ec:	003ef606 	br	d3c8 <__muldf3+0x2fc>

0000d7f0 <__subdf3>:
    d7f0:	00c00434 	movhi	r3,16
    d7f4:	18ffffc4 	addi	r3,r3,-1
    d7f8:	defffb04 	addi	sp,sp,-20
    d7fc:	28d2703a 	and	r9,r5,r3
    d800:	3814d53a 	srli	r10,r7,20
    d804:	38c6703a 	and	r3,r7,r3
    d808:	3004d77a 	srli	r2,r6,29
    d80c:	dc800215 	stw	r18,8(sp)
    d810:	dc000015 	stw	r16,0(sp)
    d814:	2824d7fa 	srli	r18,r5,31
    d818:	2820d53a 	srli	r16,r5,20
    d81c:	481290fa 	slli	r9,r9,3
    d820:	200ad77a 	srli	r5,r4,29
    d824:	180690fa 	slli	r3,r3,3
    d828:	dc400115 	stw	r17,4(sp)
    d82c:	dfc00415 	stw	ra,16(sp)
    d830:	202290fa 	slli	r17,r4,3
    d834:	dcc00315 	stw	r19,12(sp)
    d838:	5281ffcc 	andi	r10,r10,2047
    d83c:	0101ffc4 	movi	r4,2047
    d840:	9011883a 	mov	r8,r18
    d844:	8401ffcc 	andi	r16,r16,2047
    d848:	94803fcc 	andi	r18,r18,255
    d84c:	494ab03a 	or	r5,r9,r5
    d850:	380ed7fa 	srli	r7,r7,31
    d854:	1886b03a 	or	r3,r3,r2
    d858:	300c90fa 	slli	r6,r6,3
    d85c:	51009026 	beq	r10,r4,daa0 <__subdf3+0x2b0>
    d860:	39c0005c 	xori	r7,r7,1
    d864:	8285c83a 	sub	r2,r16,r10
    d868:	91c06f26 	beq	r18,r7,da28 <__subdf3+0x238>
    d86c:	0080b10e 	bge	zero,r2,db34 <__subdf3+0x344>
    d870:	50002a1e 	bne	r10,zero,d91c <__subdf3+0x12c>
    d874:	1988b03a 	or	r4,r3,r6
    d878:	2000941e 	bne	r4,zero,dacc <__subdf3+0x2dc>
    d87c:	888001cc 	andi	r2,r17,7
    d880:	10005b26 	beq	r2,zero,d9f0 <__subdf3+0x200>
    d884:	88c003cc 	andi	r3,r17,15
    d888:	00800104 	movi	r2,4
    d88c:	18805826 	beq	r3,r2,d9f0 <__subdf3+0x200>
    d890:	88c00104 	addi	r3,r17,4
    d894:	1c63803a 	cmpltu	r17,r3,r17
    d898:	2c4b883a 	add	r5,r5,r17
    d89c:	2880202c 	andhi	r2,r5,128
    d8a0:	9200004c 	andi	r8,r18,1
    d8a4:	1823883a 	mov	r17,r3
    d8a8:	10005426 	beq	r2,zero,d9fc <__subdf3+0x20c>
    d8ac:	84000044 	addi	r16,r16,1
    d8b0:	0081ffc4 	movi	r2,2047
    d8b4:	8080bf26 	beq	r16,r2,dbb4 <__subdf3+0x3c4>
    d8b8:	013fe034 	movhi	r4,65408
    d8bc:	213fffc4 	addi	r4,r4,-1
    d8c0:	290a703a 	and	r5,r5,r4
    d8c4:	2804977a 	slli	r2,r5,29
    d8c8:	280a927a 	slli	r5,r5,9
    d8cc:	8822d0fa 	srli	r17,r17,3
    d8d0:	8401ffcc 	andi	r16,r16,2047
    d8d4:	2808d33a 	srli	r4,r5,12
    d8d8:	1444b03a 	or	r2,r2,r17
    d8dc:	8401ffcc 	andi	r16,r16,2047
    d8e0:	800a953a 	slli	r5,r16,20
    d8e4:	40c03fcc 	andi	r3,r8,255
    d8e8:	04000434 	movhi	r16,16
    d8ec:	180697fa 	slli	r3,r3,31
    d8f0:	843fffc4 	addi	r16,r16,-1
    d8f4:	2420703a 	and	r16,r4,r16
    d8f8:	8160b03a 	or	r16,r16,r5
    d8fc:	80c6b03a 	or	r3,r16,r3
    d900:	dfc00417 	ldw	ra,16(sp)
    d904:	dcc00317 	ldw	r19,12(sp)
    d908:	dc800217 	ldw	r18,8(sp)
    d90c:	dc400117 	ldw	r17,4(sp)
    d910:	dc000017 	ldw	r16,0(sp)
    d914:	dec00504 	addi	sp,sp,20
    d918:	f800283a 	ret
    d91c:	0101ffc4 	movi	r4,2047
    d920:	813fd626 	beq	r16,r4,d87c <__subdf3+0x8c>
    d924:	18c02034 	orhi	r3,r3,128
    d928:	01000e04 	movi	r4,56
    d92c:	2080a416 	blt	r4,r2,dbc0 <__subdf3+0x3d0>
    d930:	010007c4 	movi	r4,31
    d934:	2080c716 	blt	r4,r2,dc54 <__subdf3+0x464>
    d938:	01000804 	movi	r4,32
    d93c:	2089c83a 	sub	r4,r4,r2
    d940:	1910983a 	sll	r8,r3,r4
    d944:	308ed83a 	srl	r7,r6,r2
    d948:	3108983a 	sll	r4,r6,r4
    d94c:	1884d83a 	srl	r2,r3,r2
    d950:	41ccb03a 	or	r6,r8,r7
    d954:	2008c03a 	cmpne	r4,r4,zero
    d958:	310cb03a 	or	r6,r6,r4
    d95c:	898dc83a 	sub	r6,r17,r6
    d960:	89a3803a 	cmpltu	r17,r17,r6
    d964:	288bc83a 	sub	r5,r5,r2
    d968:	2c4bc83a 	sub	r5,r5,r17
    d96c:	3023883a 	mov	r17,r6
    d970:	2880202c 	andhi	r2,r5,128
    d974:	10006b26 	beq	r2,zero,db24 <__subdf3+0x334>
    d978:	04c02034 	movhi	r19,128
    d97c:	9cffffc4 	addi	r19,r19,-1
    d980:	2ce6703a 	and	r19,r5,r19
    d984:	98007c26 	beq	r19,zero,db78 <__subdf3+0x388>
    d988:	9809883a 	mov	r4,r19
    d98c:	000e2bc0 	call	e2bc <__clzsi2>
    d990:	10fffe04 	addi	r3,r2,-8
    d994:	010007c4 	movi	r4,31
    d998:	20c07d16 	blt	r4,r3,db90 <__subdf3+0x3a0>
    d99c:	01400a04 	movi	r5,40
    d9a0:	2885c83a 	sub	r2,r5,r2
    d9a4:	888ad83a 	srl	r5,r17,r2
    d9a8:	98e6983a 	sll	r19,r19,r3
    d9ac:	88e2983a 	sll	r17,r17,r3
    d9b0:	2ce6b03a 	or	r19,r5,r19
    d9b4:	1c007a16 	blt	r3,r16,dba0 <__subdf3+0x3b0>
    d9b8:	1c21c83a 	sub	r16,r3,r16
    d9bc:	81400044 	addi	r5,r16,1
    d9c0:	00c007c4 	movi	r3,31
    d9c4:	19409616 	blt	r3,r5,dc20 <__subdf3+0x430>
    d9c8:	1c21c83a 	sub	r16,r3,r16
    d9cc:	8c08983a 	sll	r4,r17,r16
    d9d0:	8946d83a 	srl	r3,r17,r5
    d9d4:	9c20983a 	sll	r16,r19,r16
    d9d8:	2008c03a 	cmpne	r4,r4,zero
    d9dc:	994ad83a 	srl	r5,r19,r5
    d9e0:	1c06b03a 	or	r3,r3,r16
    d9e4:	1922b03a 	or	r17,r3,r4
    d9e8:	0021883a 	mov	r16,zero
    d9ec:	003fa306 	br	d87c <__subdf3+0x8c>
    d9f0:	2880202c 	andhi	r2,r5,128
    d9f4:	9200004c 	andi	r8,r18,1
    d9f8:	103fac1e 	bne	r2,zero,d8ac <__subdf3+0xbc>
    d9fc:	2804977a 	slli	r2,r5,29
    da00:	8822d0fa 	srli	r17,r17,3
    da04:	00c1ffc4 	movi	r3,2047
    da08:	280ad0fa 	srli	r5,r5,3
    da0c:	1444b03a 	or	r2,r2,r17
    da10:	80c02726 	beq	r16,r3,dab0 <__subdf3+0x2c0>
    da14:	01000434 	movhi	r4,16
    da18:	213fffc4 	addi	r4,r4,-1
    da1c:	80e0703a 	and	r16,r16,r3
    da20:	2908703a 	and	r4,r5,r4
    da24:	003fad06 	br	d8dc <__subdf3+0xec>
    da28:	0080690e 	bge	zero,r2,dbd0 <__subdf3+0x3e0>
    da2c:	50002f26 	beq	r10,zero,daec <__subdf3+0x2fc>
    da30:	0101ffc4 	movi	r4,2047
    da34:	813f9126 	beq	r16,r4,d87c <__subdf3+0x8c>
    da38:	18c02034 	orhi	r3,r3,128
    da3c:	01000e04 	movi	r4,56
    da40:	2080b00e 	bge	r4,r2,dd04 <__subdf3+0x514>
    da44:	198cb03a 	or	r6,r3,r6
    da48:	300ec03a 	cmpne	r7,r6,zero
    da4c:	0005883a 	mov	r2,zero
    da50:	3c4f883a 	add	r7,r7,r17
    da54:	3c63803a 	cmpltu	r17,r7,r17
    da58:	114b883a 	add	r5,r2,r5
    da5c:	2c4b883a 	add	r5,r5,r17
    da60:	3823883a 	mov	r17,r7
    da64:	2880202c 	andhi	r2,r5,128
    da68:	10002e26 	beq	r2,zero,db24 <__subdf3+0x334>
    da6c:	84000044 	addi	r16,r16,1
    da70:	0081ffc4 	movi	r2,2047
    da74:	8080de26 	beq	r16,r2,ddf0 <__subdf3+0x600>
    da78:	00bfe034 	movhi	r2,65408
    da7c:	10bfffc4 	addi	r2,r2,-1
    da80:	288a703a 	and	r5,r5,r2
    da84:	880cd07a 	srli	r6,r17,1
    da88:	280897fa 	slli	r4,r5,31
    da8c:	88c0004c 	andi	r3,r17,1
    da90:	30e2b03a 	or	r17,r6,r3
    da94:	280ad07a 	srli	r5,r5,1
    da98:	8922b03a 	or	r17,r17,r4
    da9c:	003f7706 	br	d87c <__subdf3+0x8c>
    daa0:	1984b03a 	or	r2,r3,r6
    daa4:	103f6e26 	beq	r2,zero,d860 <__subdf3+0x70>
    daa8:	39c03fcc 	andi	r7,r7,255
    daac:	003f6d06 	br	d864 <__subdf3+0x74>
    dab0:	1146b03a 	or	r3,r2,r5
    dab4:	18003f26 	beq	r3,zero,dbb4 <__subdf3+0x3c4>
    dab8:	00c00434 	movhi	r3,16
    dabc:	29000234 	orhi	r4,r5,8
    dac0:	18ffffc4 	addi	r3,r3,-1
    dac4:	20c8703a 	and	r4,r4,r3
    dac8:	003f8406 	br	d8dc <__subdf3+0xec>
    dacc:	10bfffc4 	addi	r2,r2,-1
    dad0:	1000501e 	bne	r2,zero,dc14 <__subdf3+0x424>
    dad4:	898fc83a 	sub	r7,r17,r6
    dad8:	89e3803a 	cmpltu	r17,r17,r7
    dadc:	28cbc83a 	sub	r5,r5,r3
    dae0:	2c4bc83a 	sub	r5,r5,r17
    dae4:	3823883a 	mov	r17,r7
    dae8:	003fa106 	br	d970 <__subdf3+0x180>
    daec:	1988b03a 	or	r4,r3,r6
    daf0:	203f6226 	beq	r4,zero,d87c <__subdf3+0x8c>
    daf4:	10bfffc4 	addi	r2,r2,-1
    daf8:	10009b1e 	bne	r2,zero,dd68 <__subdf3+0x578>
    dafc:	344d883a 	add	r6,r6,r17
    db00:	3463803a 	cmpltu	r17,r6,r17
    db04:	194b883a 	add	r5,r3,r5
    db08:	2c4b883a 	add	r5,r5,r17
    db0c:	3023883a 	mov	r17,r6
    db10:	003fd406 	br	da64 <__subdf3+0x274>
    db14:	1106b03a 	or	r3,r2,r4
    db18:	1800b426 	beq	r3,zero,ddec <__subdf3+0x5fc>
    db1c:	100b883a 	mov	r5,r2
    db20:	2023883a 	mov	r17,r4
    db24:	888001cc 	andi	r2,r17,7
    db28:	103f561e 	bne	r2,zero,d884 <__subdf3+0x94>
    db2c:	9200004c 	andi	r8,r18,1
    db30:	003fb206 	br	d9fc <__subdf3+0x20c>
    db34:	1000531e 	bne	r2,zero,dc84 <__subdf3+0x494>
    db38:	80800044 	addi	r2,r16,1
    db3c:	1081ffcc 	andi	r2,r2,2047
    db40:	01000044 	movi	r4,1
    db44:	2080a00e 	bge	r4,r2,ddc8 <__subdf3+0x5d8>
    db48:	8985c83a 	sub	r2,r17,r6
    db4c:	8889803a 	cmpltu	r4,r17,r2
    db50:	28e7c83a 	sub	r19,r5,r3
    db54:	9927c83a 	sub	r19,r19,r4
    db58:	9900202c 	andhi	r4,r19,128
    db5c:	20006226 	beq	r4,zero,dce8 <__subdf3+0x4f8>
    db60:	3463c83a 	sub	r17,r6,r17
    db64:	194bc83a 	sub	r5,r3,r5
    db68:	344d803a 	cmpltu	r6,r6,r17
    db6c:	29a7c83a 	sub	r19,r5,r6
    db70:	3825883a 	mov	r18,r7
    db74:	983f841e 	bne	r19,zero,d988 <__subdf3+0x198>
    db78:	8809883a 	mov	r4,r17
    db7c:	000e2bc0 	call	e2bc <__clzsi2>
    db80:	10800804 	addi	r2,r2,32
    db84:	10fffe04 	addi	r3,r2,-8
    db88:	010007c4 	movi	r4,31
    db8c:	20ff830e 	bge	r4,r3,d99c <__subdf3+0x1ac>
    db90:	14fff604 	addi	r19,r2,-40
    db94:	8ce6983a 	sll	r19,r17,r19
    db98:	0023883a 	mov	r17,zero
    db9c:	1c3f860e 	bge	r3,r16,d9b8 <__subdf3+0x1c8>
    dba0:	017fe034 	movhi	r5,65408
    dba4:	297fffc4 	addi	r5,r5,-1
    dba8:	80e1c83a 	sub	r16,r16,r3
    dbac:	994a703a 	and	r5,r19,r5
    dbb0:	003f3206 	br	d87c <__subdf3+0x8c>
    dbb4:	0009883a 	mov	r4,zero
    dbb8:	0005883a 	mov	r2,zero
    dbbc:	003f4706 	br	d8dc <__subdf3+0xec>
    dbc0:	198cb03a 	or	r6,r3,r6
    dbc4:	300cc03a 	cmpne	r6,r6,zero
    dbc8:	0005883a 	mov	r2,zero
    dbcc:	003f6306 	br	d95c <__subdf3+0x16c>
    dbd0:	10009d1e 	bne	r2,zero,de48 <__subdf3+0x658>
    dbd4:	81c00044 	addi	r7,r16,1
    dbd8:	3881ffcc 	andi	r2,r7,2047
    dbdc:	02400044 	movi	r9,1
    dbe0:	4880680e 	bge	r9,r2,dd84 <__subdf3+0x594>
    dbe4:	0081ffc4 	movi	r2,2047
    dbe8:	3880ae26 	beq	r7,r2,dea4 <__subdf3+0x6b4>
    dbec:	344d883a 	add	r6,r6,r17
    dbf0:	3463803a 	cmpltu	r17,r6,r17
    dbf4:	194b883a 	add	r5,r3,r5
    dbf8:	2c4b883a 	add	r5,r5,r17
    dbfc:	282297fa 	slli	r17,r5,31
    dc00:	300cd07a 	srli	r6,r6,1
    dc04:	280ad07a 	srli	r5,r5,1
    dc08:	3821883a 	mov	r16,r7
    dc0c:	89a2b03a 	or	r17,r17,r6
    dc10:	003f1a06 	br	d87c <__subdf3+0x8c>
    dc14:	0101ffc4 	movi	r4,2047
    dc18:	813f431e 	bne	r16,r4,d928 <__subdf3+0x138>
    dc1c:	003f1706 	br	d87c <__subdf3+0x8c>
    dc20:	80bff844 	addi	r2,r16,-31
    dc24:	00c00804 	movi	r3,32
    dc28:	9884d83a 	srl	r2,r19,r2
    dc2c:	28c05126 	beq	r5,r3,dd74 <__subdf3+0x584>
    dc30:	00c00fc4 	movi	r3,63
    dc34:	1c21c83a 	sub	r16,r3,r16
    dc38:	9c26983a 	sll	r19,r19,r16
    dc3c:	9c62b03a 	or	r17,r19,r17
    dc40:	8822c03a 	cmpne	r17,r17,zero
    dc44:	88a2b03a 	or	r17,r17,r2
    dc48:	000b883a 	mov	r5,zero
    dc4c:	0021883a 	mov	r16,zero
    dc50:	003fb406 	br	db24 <__subdf3+0x334>
    dc54:	113ff804 	addi	r4,r2,-32
    dc58:	01c00804 	movi	r7,32
    dc5c:	1908d83a 	srl	r4,r3,r4
    dc60:	11c04626 	beq	r2,r7,dd7c <__subdf3+0x58c>
    dc64:	01c01004 	movi	r7,64
    dc68:	3885c83a 	sub	r2,r7,r2
    dc6c:	1884983a 	sll	r2,r3,r2
    dc70:	118cb03a 	or	r6,r2,r6
    dc74:	300cc03a 	cmpne	r6,r6,zero
    dc78:	310cb03a 	or	r6,r6,r4
    dc7c:	0005883a 	mov	r2,zero
    dc80:	003f3606 	br	d95c <__subdf3+0x16c>
    dc84:	80002b26 	beq	r16,zero,dd34 <__subdf3+0x544>
    dc88:	0101ffc4 	movi	r4,2047
    dc8c:	51006926 	beq	r10,r4,de34 <__subdf3+0x644>
    dc90:	0085c83a 	sub	r2,zero,r2
    dc94:	29402034 	orhi	r5,r5,128
    dc98:	01000e04 	movi	r4,56
    dc9c:	20807d16 	blt	r4,r2,de94 <__subdf3+0x6a4>
    dca0:	010007c4 	movi	r4,31
    dca4:	2080d916 	blt	r4,r2,e00c <__subdf3+0x81c>
    dca8:	01000804 	movi	r4,32
    dcac:	2089c83a 	sub	r4,r4,r2
    dcb0:	2912983a 	sll	r9,r5,r4
    dcb4:	8890d83a 	srl	r8,r17,r2
    dcb8:	8908983a 	sll	r4,r17,r4
    dcbc:	2884d83a 	srl	r2,r5,r2
    dcc0:	4a22b03a 	or	r17,r9,r8
    dcc4:	2008c03a 	cmpne	r4,r4,zero
    dcc8:	8922b03a 	or	r17,r17,r4
    dccc:	3463c83a 	sub	r17,r6,r17
    dcd0:	1885c83a 	sub	r2,r3,r2
    dcd4:	344d803a 	cmpltu	r6,r6,r17
    dcd8:	118bc83a 	sub	r5,r2,r6
    dcdc:	5021883a 	mov	r16,r10
    dce0:	3825883a 	mov	r18,r7
    dce4:	003f2206 	br	d970 <__subdf3+0x180>
    dce8:	9886b03a 	or	r3,r19,r2
    dcec:	18001c1e 	bne	r3,zero,dd60 <__subdf3+0x570>
    dcf0:	0011883a 	mov	r8,zero
    dcf4:	000b883a 	mov	r5,zero
    dcf8:	0023883a 	mov	r17,zero
    dcfc:	0021883a 	mov	r16,zero
    dd00:	003f3e06 	br	d9fc <__subdf3+0x20c>
    dd04:	010007c4 	movi	r4,31
    dd08:	20803c16 	blt	r4,r2,ddfc <__subdf3+0x60c>
    dd0c:	01000804 	movi	r4,32
    dd10:	2089c83a 	sub	r4,r4,r2
    dd14:	1912983a 	sll	r9,r3,r4
    dd18:	308ed83a 	srl	r7,r6,r2
    dd1c:	3108983a 	sll	r4,r6,r4
    dd20:	1884d83a 	srl	r2,r3,r2
    dd24:	49ceb03a 	or	r7,r9,r7
    dd28:	2008c03a 	cmpne	r4,r4,zero
    dd2c:	390eb03a 	or	r7,r7,r4
    dd30:	003f4706 	br	da50 <__subdf3+0x260>
    dd34:	2c48b03a 	or	r4,r5,r17
    dd38:	20003e26 	beq	r4,zero,de34 <__subdf3+0x644>
    dd3c:	0084303a 	nor	r2,zero,r2
    dd40:	10003a1e 	bne	r2,zero,de2c <__subdf3+0x63c>
    dd44:	3463c83a 	sub	r17,r6,r17
    dd48:	194bc83a 	sub	r5,r3,r5
    dd4c:	344d803a 	cmpltu	r6,r6,r17
    dd50:	298bc83a 	sub	r5,r5,r6
    dd54:	5021883a 	mov	r16,r10
    dd58:	3825883a 	mov	r18,r7
    dd5c:	003f0406 	br	d970 <__subdf3+0x180>
    dd60:	1023883a 	mov	r17,r2
    dd64:	003f0706 	br	d984 <__subdf3+0x194>
    dd68:	0101ffc4 	movi	r4,2047
    dd6c:	813f331e 	bne	r16,r4,da3c <__subdf3+0x24c>
    dd70:	003ec206 	br	d87c <__subdf3+0x8c>
    dd74:	0027883a 	mov	r19,zero
    dd78:	003fb006 	br	dc3c <__subdf3+0x44c>
    dd7c:	0005883a 	mov	r2,zero
    dd80:	003fbb06 	br	dc70 <__subdf3+0x480>
    dd84:	2c44b03a 	or	r2,r5,r17
    dd88:	80008b1e 	bne	r16,zero,dfb8 <__subdf3+0x7c8>
    dd8c:	1000b526 	beq	r2,zero,e064 <__subdf3+0x874>
    dd90:	1984b03a 	or	r2,r3,r6
    dd94:	103eb926 	beq	r2,zero,d87c <__subdf3+0x8c>
    dd98:	3449883a 	add	r4,r6,r17
    dd9c:	2463803a 	cmpltu	r17,r4,r17
    dda0:	194b883a 	add	r5,r3,r5
    dda4:	2c4b883a 	add	r5,r5,r17
    dda8:	2880202c 	andhi	r2,r5,128
    ddac:	2023883a 	mov	r17,r4
    ddb0:	103f5c26 	beq	r2,zero,db24 <__subdf3+0x334>
    ddb4:	00bfe034 	movhi	r2,65408
    ddb8:	10bfffc4 	addi	r2,r2,-1
    ddbc:	4821883a 	mov	r16,r9
    ddc0:	288a703a 	and	r5,r5,r2
    ddc4:	003ead06 	br	d87c <__subdf3+0x8c>
    ddc8:	2c44b03a 	or	r2,r5,r17
    ddcc:	8000291e 	bne	r16,zero,de74 <__subdf3+0x684>
    ddd0:	10004f1e 	bne	r2,zero,df10 <__subdf3+0x720>
    ddd4:	1984b03a 	or	r2,r3,r6
    ddd8:	10000426 	beq	r2,zero,ddec <__subdf3+0x5fc>
    dddc:	180b883a 	mov	r5,r3
    dde0:	3023883a 	mov	r17,r6
    dde4:	3825883a 	mov	r18,r7
    dde8:	003ea406 	br	d87c <__subdf3+0x8c>
    ddec:	0011883a 	mov	r8,zero
    ddf0:	000b883a 	mov	r5,zero
    ddf4:	0023883a 	mov	r17,zero
    ddf8:	003f0006 	br	d9fc <__subdf3+0x20c>
    ddfc:	11fff804 	addi	r7,r2,-32
    de00:	19c8d83a 	srl	r4,r3,r7
    de04:	01c00804 	movi	r7,32
    de08:	11c07e26 	beq	r2,r7,e004 <__subdf3+0x814>
    de0c:	01c01004 	movi	r7,64
    de10:	3885c83a 	sub	r2,r7,r2
    de14:	1884983a 	sll	r2,r3,r2
    de18:	118cb03a 	or	r6,r2,r6
    de1c:	300ec03a 	cmpne	r7,r6,zero
    de20:	390eb03a 	or	r7,r7,r4
    de24:	0005883a 	mov	r2,zero
    de28:	003f0906 	br	da50 <__subdf3+0x260>
    de2c:	0101ffc4 	movi	r4,2047
    de30:	513f991e 	bne	r10,r4,dc98 <__subdf3+0x4a8>
    de34:	180b883a 	mov	r5,r3
    de38:	3023883a 	mov	r17,r6
    de3c:	5021883a 	mov	r16,r10
    de40:	3825883a 	mov	r18,r7
    de44:	003e8d06 	br	d87c <__subdf3+0x8c>
    de48:	80001a1e 	bne	r16,zero,deb4 <__subdf3+0x6c4>
    de4c:	2c48b03a 	or	r4,r5,r17
    de50:	20005526 	beq	r4,zero,dfa8 <__subdf3+0x7b8>
    de54:	0084303a 	nor	r2,zero,r2
    de58:	1000511e 	bne	r2,zero,dfa0 <__subdf3+0x7b0>
    de5c:	89a3883a 	add	r17,r17,r6
    de60:	194b883a 	add	r5,r3,r5
    de64:	898d803a 	cmpltu	r6,r17,r6
    de68:	298b883a 	add	r5,r5,r6
    de6c:	5021883a 	mov	r16,r10
    de70:	003efc06 	br	da64 <__subdf3+0x274>
    de74:	1000341e 	bne	r2,zero,df48 <__subdf3+0x758>
    de78:	1984b03a 	or	r2,r3,r6
    de7c:	10006f26 	beq	r2,zero,e03c <__subdf3+0x84c>
    de80:	180b883a 	mov	r5,r3
    de84:	3023883a 	mov	r17,r6
    de88:	3825883a 	mov	r18,r7
    de8c:	0401ffc4 	movi	r16,2047
    de90:	003e7a06 	br	d87c <__subdf3+0x8c>
    de94:	2c62b03a 	or	r17,r5,r17
    de98:	8822c03a 	cmpne	r17,r17,zero
    de9c:	0005883a 	mov	r2,zero
    dea0:	003f8a06 	br	dccc <__subdf3+0x4dc>
    dea4:	3821883a 	mov	r16,r7
    dea8:	000b883a 	mov	r5,zero
    deac:	0023883a 	mov	r17,zero
    deb0:	003ed206 	br	d9fc <__subdf3+0x20c>
    deb4:	0101ffc4 	movi	r4,2047
    deb8:	51003b26 	beq	r10,r4,dfa8 <__subdf3+0x7b8>
    debc:	0085c83a 	sub	r2,zero,r2
    dec0:	29402034 	orhi	r5,r5,128
    dec4:	01000e04 	movi	r4,56
    dec8:	20806216 	blt	r4,r2,e054 <__subdf3+0x864>
    decc:	010007c4 	movi	r4,31
    ded0:	20806b16 	blt	r4,r2,e080 <__subdf3+0x890>
    ded4:	01000804 	movi	r4,32
    ded8:	2089c83a 	sub	r4,r4,r2
    dedc:	2912983a 	sll	r9,r5,r4
    dee0:	888ed83a 	srl	r7,r17,r2
    dee4:	8908983a 	sll	r4,r17,r4
    dee8:	2884d83a 	srl	r2,r5,r2
    deec:	49e2b03a 	or	r17,r9,r7
    def0:	2008c03a 	cmpne	r4,r4,zero
    def4:	8922b03a 	or	r17,r17,r4
    def8:	89a3883a 	add	r17,r17,r6
    defc:	10c5883a 	add	r2,r2,r3
    df00:	898d803a 	cmpltu	r6,r17,r6
    df04:	118b883a 	add	r5,r2,r6
    df08:	5021883a 	mov	r16,r10
    df0c:	003ed506 	br	da64 <__subdf3+0x274>
    df10:	1984b03a 	or	r2,r3,r6
    df14:	103e5926 	beq	r2,zero,d87c <__subdf3+0x8c>
    df18:	8989c83a 	sub	r4,r17,r6
    df1c:	8911803a 	cmpltu	r8,r17,r4
    df20:	28c5c83a 	sub	r2,r5,r3
    df24:	1205c83a 	sub	r2,r2,r8
    df28:	1200202c 	andhi	r8,r2,128
    df2c:	403ef926 	beq	r8,zero,db14 <__subdf3+0x324>
    df30:	3463c83a 	sub	r17,r6,r17
    df34:	194bc83a 	sub	r5,r3,r5
    df38:	344d803a 	cmpltu	r6,r6,r17
    df3c:	298bc83a 	sub	r5,r5,r6
    df40:	3825883a 	mov	r18,r7
    df44:	003e4d06 	br	d87c <__subdf3+0x8c>
    df48:	1984b03a 	or	r2,r3,r6
    df4c:	10002b26 	beq	r2,zero,dffc <__subdf3+0x80c>
    df50:	2808d0fa 	srli	r4,r5,3
    df54:	8822d0fa 	srli	r17,r17,3
    df58:	280a977a 	slli	r5,r5,29
    df5c:	2080022c 	andhi	r2,r4,8
    df60:	2c62b03a 	or	r17,r5,r17
    df64:	10000826 	beq	r2,zero,df88 <__subdf3+0x798>
    df68:	1810d0fa 	srli	r8,r3,3
    df6c:	4080022c 	andhi	r2,r8,8
    df70:	1000051e 	bne	r2,zero,df88 <__subdf3+0x798>
    df74:	300cd0fa 	srli	r6,r6,3
    df78:	1804977a 	slli	r2,r3,29
    df7c:	4009883a 	mov	r4,r8
    df80:	3825883a 	mov	r18,r7
    df84:	11a2b03a 	or	r17,r2,r6
    df88:	880ad77a 	srli	r5,r17,29
    df8c:	200890fa 	slli	r4,r4,3
    df90:	882290fa 	slli	r17,r17,3
    df94:	0401ffc4 	movi	r16,2047
    df98:	290ab03a 	or	r5,r5,r4
    df9c:	003e3706 	br	d87c <__subdf3+0x8c>
    dfa0:	0101ffc4 	movi	r4,2047
    dfa4:	513fc71e 	bne	r10,r4,dec4 <__subdf3+0x6d4>
    dfa8:	180b883a 	mov	r5,r3
    dfac:	3023883a 	mov	r17,r6
    dfb0:	5021883a 	mov	r16,r10
    dfb4:	003e3106 	br	d87c <__subdf3+0x8c>
    dfb8:	10002d26 	beq	r2,zero,e070 <__subdf3+0x880>
    dfbc:	1984b03a 	or	r2,r3,r6
    dfc0:	10000e26 	beq	r2,zero,dffc <__subdf3+0x80c>
    dfc4:	2808d0fa 	srli	r4,r5,3
    dfc8:	8822d0fa 	srli	r17,r17,3
    dfcc:	280a977a 	slli	r5,r5,29
    dfd0:	2080022c 	andhi	r2,r4,8
    dfd4:	2c62b03a 	or	r17,r5,r17
    dfd8:	103feb26 	beq	r2,zero,df88 <__subdf3+0x798>
    dfdc:	180ed0fa 	srli	r7,r3,3
    dfe0:	3880022c 	andhi	r2,r7,8
    dfe4:	103fe81e 	bne	r2,zero,df88 <__subdf3+0x798>
    dfe8:	300cd0fa 	srli	r6,r6,3
    dfec:	1804977a 	slli	r2,r3,29
    dff0:	3809883a 	mov	r4,r7
    dff4:	11a2b03a 	or	r17,r2,r6
    dff8:	003fe306 	br	df88 <__subdf3+0x798>
    dffc:	0401ffc4 	movi	r16,2047
    e000:	003e1e06 	br	d87c <__subdf3+0x8c>
    e004:	0005883a 	mov	r2,zero
    e008:	003f8306 	br	de18 <__subdf3+0x628>
    e00c:	113ff804 	addi	r4,r2,-32
    e010:	02000804 	movi	r8,32
    e014:	2908d83a 	srl	r4,r5,r4
    e018:	12002526 	beq	r2,r8,e0b0 <__subdf3+0x8c0>
    e01c:	02001004 	movi	r8,64
    e020:	4085c83a 	sub	r2,r8,r2
    e024:	288a983a 	sll	r5,r5,r2
    e028:	2c62b03a 	or	r17,r5,r17
    e02c:	8822c03a 	cmpne	r17,r17,zero
    e030:	8922b03a 	or	r17,r17,r4
    e034:	0005883a 	mov	r2,zero
    e038:	003f2406 	br	dccc <__subdf3+0x4dc>
    e03c:	01402034 	movhi	r5,128
    e040:	0011883a 	mov	r8,zero
    e044:	297fffc4 	addi	r5,r5,-1
    e048:	047ffe04 	movi	r17,-8
    e04c:	0401ffc4 	movi	r16,2047
    e050:	003e6a06 	br	d9fc <__subdf3+0x20c>
    e054:	2c62b03a 	or	r17,r5,r17
    e058:	8822c03a 	cmpne	r17,r17,zero
    e05c:	0005883a 	mov	r2,zero
    e060:	003fa506 	br	def8 <__subdf3+0x708>
    e064:	180b883a 	mov	r5,r3
    e068:	3023883a 	mov	r17,r6
    e06c:	003e0306 	br	d87c <__subdf3+0x8c>
    e070:	180b883a 	mov	r5,r3
    e074:	3023883a 	mov	r17,r6
    e078:	0401ffc4 	movi	r16,2047
    e07c:	003dff06 	br	d87c <__subdf3+0x8c>
    e080:	113ff804 	addi	r4,r2,-32
    e084:	01c00804 	movi	r7,32
    e088:	2908d83a 	srl	r4,r5,r4
    e08c:	11c00a26 	beq	r2,r7,e0b8 <__subdf3+0x8c8>
    e090:	01c01004 	movi	r7,64
    e094:	3885c83a 	sub	r2,r7,r2
    e098:	288a983a 	sll	r5,r5,r2
    e09c:	2c62b03a 	or	r17,r5,r17
    e0a0:	8822c03a 	cmpne	r17,r17,zero
    e0a4:	8922b03a 	or	r17,r17,r4
    e0a8:	0005883a 	mov	r2,zero
    e0ac:	003f9206 	br	def8 <__subdf3+0x708>
    e0b0:	000b883a 	mov	r5,zero
    e0b4:	003fdc06 	br	e028 <__subdf3+0x838>
    e0b8:	000b883a 	mov	r5,zero
    e0bc:	003ff706 	br	e09c <__subdf3+0x8ac>

0000e0c0 <__fixdfsi>:
    e0c0:	2806d53a 	srli	r3,r5,20
    e0c4:	00800434 	movhi	r2,16
    e0c8:	10bfffc4 	addi	r2,r2,-1
    e0cc:	18c1ffcc 	andi	r3,r3,2047
    e0d0:	0180ff84 	movi	r6,1022
    e0d4:	2884703a 	and	r2,r5,r2
    e0d8:	280ad7fa 	srli	r5,r5,31
    e0dc:	30c0130e 	bge	r6,r3,e12c <__fixdfsi+0x6c>
    e0e0:	01810744 	movi	r6,1053
    e0e4:	30c00d16 	blt	r6,r3,e11c <__fixdfsi+0x5c>
    e0e8:	01810cc4 	movi	r6,1075
    e0ec:	30cdc83a 	sub	r6,r6,r3
    e0f0:	01c007c4 	movi	r7,31
    e0f4:	10800434 	orhi	r2,r2,16
    e0f8:	39800e0e 	bge	r7,r6,e134 <__fixdfsi+0x74>
    e0fc:	010104c4 	movi	r4,1043
    e100:	20c7c83a 	sub	r3,r4,r3
    e104:	10c6d83a 	srl	r3,r2,r3
    e108:	29403fcc 	andi	r5,r5,255
    e10c:	0145c83a 	sub	r2,zero,r5
    e110:	1884f03a 	xor	r2,r3,r2
    e114:	1145883a 	add	r2,r2,r5
    e118:	f800283a 	ret
    e11c:	00a00034 	movhi	r2,32768
    e120:	10bfffc4 	addi	r2,r2,-1
    e124:	2885883a 	add	r2,r5,r2
    e128:	f800283a 	ret
    e12c:	0005883a 	mov	r2,zero
    e130:	f800283a 	ret
    e134:	18fefb44 	addi	r3,r3,-1043
    e138:	2188d83a 	srl	r4,r4,r6
    e13c:	10c6983a 	sll	r3,r2,r3
    e140:	20c6b03a 	or	r3,r4,r3
    e144:	003ff006 	br	e108 <__fixdfsi+0x48>

0000e148 <__floatsidf>:
    e148:	defffd04 	addi	sp,sp,-12
    e14c:	dc400115 	stw	r17,4(sp)
    e150:	dfc00215 	stw	ra,8(sp)
    e154:	dc000015 	stw	r16,0(sp)
    e158:	2023883a 	mov	r17,r4
    e15c:	20001426 	beq	r4,zero,e1b0 <__floatsidf+0x68>
    e160:	2020d7fa 	srli	r16,r4,31
    e164:	80000126 	beq	r16,zero,e16c <__floatsidf+0x24>
    e168:	0123c83a 	sub	r17,zero,r4
    e16c:	8809883a 	mov	r4,r17
    e170:	000e2bc0 	call	e2bc <__clzsi2>
    e174:	01410784 	movi	r5,1054
    e178:	00c00284 	movi	r3,10
    e17c:	288bc83a 	sub	r5,r5,r2
    e180:	18801c16 	blt	r3,r2,e1f4 <__floatsidf+0xac>
    e184:	00c002c4 	movi	r3,11
    e188:	1887c83a 	sub	r3,r3,r2
    e18c:	88c8d83a 	srl	r4,r17,r3
    e190:	00c00434 	movhi	r3,16
    e194:	18ffffc4 	addi	r3,r3,-1
    e198:	10800544 	addi	r2,r2,21
    e19c:	20c8703a 	and	r4,r4,r3
    e1a0:	8884983a 	sll	r2,r17,r2
    e1a4:	28c1ffcc 	andi	r3,r5,2047
    e1a8:	800d883a 	mov	r6,r16
    e1ac:	00000406 	br	e1c0 <__floatsidf+0x78>
    e1b0:	000d883a 	mov	r6,zero
    e1b4:	0007883a 	mov	r3,zero
    e1b8:	0009883a 	mov	r4,zero
    e1bc:	0005883a 	mov	r2,zero
    e1c0:	180a953a 	slli	r5,r3,20
    e1c4:	31803fcc 	andi	r6,r6,255
    e1c8:	00c00434 	movhi	r3,16
    e1cc:	300c97fa 	slli	r6,r6,31
    e1d0:	18ffffc4 	addi	r3,r3,-1
    e1d4:	20c6703a 	and	r3,r4,r3
    e1d8:	1946b03a 	or	r3,r3,r5
    e1dc:	1986b03a 	or	r3,r3,r6
    e1e0:	dfc00217 	ldw	ra,8(sp)
    e1e4:	dc400117 	ldw	r17,4(sp)
    e1e8:	dc000017 	ldw	r16,0(sp)
    e1ec:	dec00304 	addi	sp,sp,12
    e1f0:	f800283a 	ret
    e1f4:	10fffd44 	addi	r3,r2,-11
    e1f8:	88c8983a 	sll	r4,r17,r3
    e1fc:	00800434 	movhi	r2,16
    e200:	10bfffc4 	addi	r2,r2,-1
    e204:	2088703a 	and	r4,r4,r2
    e208:	28c1ffcc 	andi	r3,r5,2047
    e20c:	800d883a 	mov	r6,r16
    e210:	0005883a 	mov	r2,zero
    e214:	003fea06 	br	e1c0 <__floatsidf+0x78>

0000e218 <__floatunsidf>:
    e218:	defffe04 	addi	sp,sp,-8
    e21c:	dc000015 	stw	r16,0(sp)
    e220:	dfc00115 	stw	ra,4(sp)
    e224:	2021883a 	mov	r16,r4
    e228:	20001026 	beq	r4,zero,e26c <__floatunsidf+0x54>
    e22c:	000e2bc0 	call	e2bc <__clzsi2>
    e230:	01410784 	movi	r5,1054
    e234:	100d883a 	mov	r6,r2
    e238:	288bc83a 	sub	r5,r5,r2
    e23c:	00800284 	movi	r2,10
    e240:	11801616 	blt	r2,r6,e29c <__floatunsidf+0x84>
    e244:	008002c4 	movi	r2,11
    e248:	1185c83a 	sub	r2,r2,r6
    e24c:	8084d83a 	srl	r2,r16,r2
    e250:	00c00434 	movhi	r3,16
    e254:	31c00544 	addi	r7,r6,21
    e258:	18ffffc4 	addi	r3,r3,-1
    e25c:	81e0983a 	sll	r16,r16,r7
    e260:	10cc703a 	and	r6,r2,r3
    e264:	2941ffcc 	andi	r5,r5,2047
    e268:	00000206 	br	e274 <__floatunsidf+0x5c>
    e26c:	000b883a 	mov	r5,zero
    e270:	000d883a 	mov	r6,zero
    e274:	280a953a 	slli	r5,r5,20
    e278:	00c00434 	movhi	r3,16
    e27c:	18ffffc4 	addi	r3,r3,-1
    e280:	30c6703a 	and	r3,r6,r3
    e284:	8005883a 	mov	r2,r16
    e288:	1946b03a 	or	r3,r3,r5
    e28c:	dfc00117 	ldw	ra,4(sp)
    e290:	dc000017 	ldw	r16,0(sp)
    e294:	dec00204 	addi	sp,sp,8
    e298:	f800283a 	ret
    e29c:	31bffd44 	addi	r6,r6,-11
    e2a0:	818c983a 	sll	r6,r16,r6
    e2a4:	00800434 	movhi	r2,16
    e2a8:	10bfffc4 	addi	r2,r2,-1
    e2ac:	2941ffcc 	andi	r5,r5,2047
    e2b0:	0021883a 	mov	r16,zero
    e2b4:	308c703a 	and	r6,r6,r2
    e2b8:	003fee06 	br	e274 <__floatunsidf+0x5c>

0000e2bc <__clzsi2>:
    e2bc:	00bfffd4 	movui	r2,65535
    e2c0:	11000b36 	bltu	r2,r4,e2f0 <__clzsi2+0x34>
    e2c4:	00803fc4 	movi	r2,255
    e2c8:	1100122e 	bgeu	r2,r4,e314 <__clzsi2+0x58>
    e2cc:	00c00204 	movi	r3,8
    e2d0:	01400604 	movi	r5,24
    e2d4:	20c8d83a 	srl	r4,r4,r3
    e2d8:	00800074 	movhi	r2,1
    e2dc:	1084d804 	addi	r2,r2,4960
    e2e0:	1109883a 	add	r4,r2,r4
    e2e4:	20800003 	ldbu	r2,0(r4)
    e2e8:	2885c83a 	sub	r2,r5,r2
    e2ec:	f800283a 	ret
    e2f0:	00804034 	movhi	r2,256
    e2f4:	10bfffc4 	addi	r2,r2,-1
    e2f8:	11000336 	bltu	r2,r4,e308 <__clzsi2+0x4c>
    e2fc:	00c00404 	movi	r3,16
    e300:	180b883a 	mov	r5,r3
    e304:	003ff306 	br	e2d4 <__clzsi2+0x18>
    e308:	00c00604 	movi	r3,24
    e30c:	01400204 	movi	r5,8
    e310:	003ff006 	br	e2d4 <__clzsi2+0x18>
    e314:	0007883a 	mov	r3,zero
    e318:	01400804 	movi	r5,32
    e31c:	003fed06 	br	e2d4 <__clzsi2+0x18>

0000e320 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e320:	defffe04 	addi	sp,sp,-8
    e324:	dfc00115 	stw	ra,4(sp)
    e328:	df000015 	stw	fp,0(sp)
    e32c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e330:	00800074 	movhi	r2,1
    e334:	108bd904 	addi	r2,r2,12132
    e338:	10800017 	ldw	r2,0(r2)
    e33c:	10000526 	beq	r2,zero,e354 <alt_get_errno+0x34>
    e340:	00800074 	movhi	r2,1
    e344:	108bd904 	addi	r2,r2,12132
    e348:	10800017 	ldw	r2,0(r2)
    e34c:	103ee83a 	callr	r2
    e350:	00000206 	br	e35c <alt_get_errno+0x3c>
    e354:	00800074 	movhi	r2,1
    e358:	1092a604 	addi	r2,r2,19096
}
    e35c:	e037883a 	mov	sp,fp
    e360:	dfc00117 	ldw	ra,4(sp)
    e364:	df000017 	ldw	fp,0(sp)
    e368:	dec00204 	addi	sp,sp,8
    e36c:	f800283a 	ret

0000e370 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e370:	defffb04 	addi	sp,sp,-20
    e374:	dfc00415 	stw	ra,16(sp)
    e378:	df000315 	stw	fp,12(sp)
    e37c:	df000304 	addi	fp,sp,12
    e380:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e384:	e0bfff17 	ldw	r2,-4(fp)
    e388:	10000616 	blt	r2,zero,e3a4 <close+0x34>
    e38c:	e0bfff17 	ldw	r2,-4(fp)
    e390:	10c00324 	muli	r3,r2,12
    e394:	00800074 	movhi	r2,1
    e398:	10875604 	addi	r2,r2,7512
    e39c:	1885883a 	add	r2,r3,r2
    e3a0:	00000106 	br	e3a8 <close+0x38>
    e3a4:	0005883a 	mov	r2,zero
    e3a8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e3ac:	e0bffd17 	ldw	r2,-12(fp)
    e3b0:	10001926 	beq	r2,zero,e418 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e3b4:	e0bffd17 	ldw	r2,-12(fp)
    e3b8:	10800017 	ldw	r2,0(r2)
    e3bc:	10800417 	ldw	r2,16(r2)
    e3c0:	10000626 	beq	r2,zero,e3dc <close+0x6c>
    e3c4:	e0bffd17 	ldw	r2,-12(fp)
    e3c8:	10800017 	ldw	r2,0(r2)
    e3cc:	10800417 	ldw	r2,16(r2)
    e3d0:	e13ffd17 	ldw	r4,-12(fp)
    e3d4:	103ee83a 	callr	r2
    e3d8:	00000106 	br	e3e0 <close+0x70>
    e3dc:	0005883a 	mov	r2,zero
    e3e0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e3e4:	e13fff17 	ldw	r4,-4(fp)
    e3e8:	000ea6c0 	call	ea6c <alt_release_fd>
    if (rval < 0)
    e3ec:	e0bffe17 	ldw	r2,-8(fp)
    e3f0:	1000070e 	bge	r2,zero,e410 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e3f4:	000e3200 	call	e320 <alt_get_errno>
    e3f8:	1007883a 	mov	r3,r2
    e3fc:	e0bffe17 	ldw	r2,-8(fp)
    e400:	0085c83a 	sub	r2,zero,r2
    e404:	18800015 	stw	r2,0(r3)
      return -1;
    e408:	00bfffc4 	movi	r2,-1
    e40c:	00000706 	br	e42c <close+0xbc>
    }
    return 0;
    e410:	0005883a 	mov	r2,zero
    e414:	00000506 	br	e42c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e418:	000e3200 	call	e320 <alt_get_errno>
    e41c:	1007883a 	mov	r3,r2
    e420:	00801444 	movi	r2,81
    e424:	18800015 	stw	r2,0(r3)
    return -1;
    e428:	00bfffc4 	movi	r2,-1
  }
}
    e42c:	e037883a 	mov	sp,fp
    e430:	dfc00117 	ldw	ra,4(sp)
    e434:	df000017 	ldw	fp,0(sp)
    e438:	dec00204 	addi	sp,sp,8
    e43c:	f800283a 	ret

0000e440 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e440:	defffc04 	addi	sp,sp,-16
    e444:	df000315 	stw	fp,12(sp)
    e448:	df000304 	addi	fp,sp,12
    e44c:	e13ffd15 	stw	r4,-12(fp)
    e450:	e17ffe15 	stw	r5,-8(fp)
    e454:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e458:	e0bfff17 	ldw	r2,-4(fp)
}
    e45c:	e037883a 	mov	sp,fp
    e460:	df000017 	ldw	fp,0(sp)
    e464:	dec00104 	addi	sp,sp,4
    e468:	f800283a 	ret

0000e46c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e46c:	defffe04 	addi	sp,sp,-8
    e470:	dfc00115 	stw	ra,4(sp)
    e474:	df000015 	stw	fp,0(sp)
    e478:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e47c:	00800074 	movhi	r2,1
    e480:	108bd904 	addi	r2,r2,12132
    e484:	10800017 	ldw	r2,0(r2)
    e488:	10000526 	beq	r2,zero,e4a0 <alt_get_errno+0x34>
    e48c:	00800074 	movhi	r2,1
    e490:	108bd904 	addi	r2,r2,12132
    e494:	10800017 	ldw	r2,0(r2)
    e498:	103ee83a 	callr	r2
    e49c:	00000206 	br	e4a8 <alt_get_errno+0x3c>
    e4a0:	00800074 	movhi	r2,1
    e4a4:	1092a604 	addi	r2,r2,19096
}
    e4a8:	e037883a 	mov	sp,fp
    e4ac:	dfc00117 	ldw	ra,4(sp)
    e4b0:	df000017 	ldw	fp,0(sp)
    e4b4:	dec00204 	addi	sp,sp,8
    e4b8:	f800283a 	ret

0000e4bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e4bc:	defffb04 	addi	sp,sp,-20
    e4c0:	dfc00415 	stw	ra,16(sp)
    e4c4:	df000315 	stw	fp,12(sp)
    e4c8:	df000304 	addi	fp,sp,12
    e4cc:	e13ffe15 	stw	r4,-8(fp)
    e4d0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e4d4:	e0bffe17 	ldw	r2,-8(fp)
    e4d8:	10000616 	blt	r2,zero,e4f4 <fstat+0x38>
    e4dc:	e0bffe17 	ldw	r2,-8(fp)
    e4e0:	10c00324 	muli	r3,r2,12
    e4e4:	00800074 	movhi	r2,1
    e4e8:	10875604 	addi	r2,r2,7512
    e4ec:	1885883a 	add	r2,r3,r2
    e4f0:	00000106 	br	e4f8 <fstat+0x3c>
    e4f4:	0005883a 	mov	r2,zero
    e4f8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e4fc:	e0bffd17 	ldw	r2,-12(fp)
    e500:	10001026 	beq	r2,zero,e544 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e504:	e0bffd17 	ldw	r2,-12(fp)
    e508:	10800017 	ldw	r2,0(r2)
    e50c:	10800817 	ldw	r2,32(r2)
    e510:	10000726 	beq	r2,zero,e530 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e514:	e0bffd17 	ldw	r2,-12(fp)
    e518:	10800017 	ldw	r2,0(r2)
    e51c:	10800817 	ldw	r2,32(r2)
    e520:	e13ffd17 	ldw	r4,-12(fp)
    e524:	e17fff17 	ldw	r5,-4(fp)
    e528:	103ee83a 	callr	r2
    e52c:	00000a06 	br	e558 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e530:	e0bfff17 	ldw	r2,-4(fp)
    e534:	00c80004 	movi	r3,8192
    e538:	10c00115 	stw	r3,4(r2)
      return 0;
    e53c:	0005883a 	mov	r2,zero
    e540:	00000506 	br	e558 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e544:	000e46c0 	call	e46c <alt_get_errno>
    e548:	1007883a 	mov	r3,r2
    e54c:	00801444 	movi	r2,81
    e550:	18800015 	stw	r2,0(r3)
    return -1;
    e554:	00bfffc4 	movi	r2,-1
  }
}
    e558:	e037883a 	mov	sp,fp
    e55c:	dfc00117 	ldw	ra,4(sp)
    e560:	df000017 	ldw	fp,0(sp)
    e564:	dec00204 	addi	sp,sp,8
    e568:	f800283a 	ret

0000e56c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e56c:	defffe04 	addi	sp,sp,-8
    e570:	dfc00115 	stw	ra,4(sp)
    e574:	df000015 	stw	fp,0(sp)
    e578:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e57c:	00800074 	movhi	r2,1
    e580:	108bd904 	addi	r2,r2,12132
    e584:	10800017 	ldw	r2,0(r2)
    e588:	10000526 	beq	r2,zero,e5a0 <alt_get_errno+0x34>
    e58c:	00800074 	movhi	r2,1
    e590:	108bd904 	addi	r2,r2,12132
    e594:	10800017 	ldw	r2,0(r2)
    e598:	103ee83a 	callr	r2
    e59c:	00000206 	br	e5a8 <alt_get_errno+0x3c>
    e5a0:	00800074 	movhi	r2,1
    e5a4:	1092a604 	addi	r2,r2,19096
}
    e5a8:	e037883a 	mov	sp,fp
    e5ac:	dfc00117 	ldw	ra,4(sp)
    e5b0:	df000017 	ldw	fp,0(sp)
    e5b4:	dec00204 	addi	sp,sp,8
    e5b8:	f800283a 	ret

0000e5bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e5bc:	deffed04 	addi	sp,sp,-76
    e5c0:	dfc01215 	stw	ra,72(sp)
    e5c4:	df001115 	stw	fp,68(sp)
    e5c8:	df001104 	addi	fp,sp,68
    e5cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e5d0:	e0bfff17 	ldw	r2,-4(fp)
    e5d4:	10000616 	blt	r2,zero,e5f0 <isatty+0x34>
    e5d8:	e0bfff17 	ldw	r2,-4(fp)
    e5dc:	10c00324 	muli	r3,r2,12
    e5e0:	00800074 	movhi	r2,1
    e5e4:	10875604 	addi	r2,r2,7512
    e5e8:	1885883a 	add	r2,r3,r2
    e5ec:	00000106 	br	e5f4 <isatty+0x38>
    e5f0:	0005883a 	mov	r2,zero
    e5f4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e5f8:	e0bfef17 	ldw	r2,-68(fp)
    e5fc:	10000e26 	beq	r2,zero,e638 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e600:	e0bfef17 	ldw	r2,-68(fp)
    e604:	10800017 	ldw	r2,0(r2)
    e608:	10800817 	ldw	r2,32(r2)
    e60c:	1000021e 	bne	r2,zero,e618 <isatty+0x5c>
    {
      return 1;
    e610:	00800044 	movi	r2,1
    e614:	00000d06 	br	e64c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e618:	e0bff004 	addi	r2,fp,-64
    e61c:	e13fff17 	ldw	r4,-4(fp)
    e620:	100b883a 	mov	r5,r2
    e624:	000e4bc0 	call	e4bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e628:	e0bff117 	ldw	r2,-60(fp)
    e62c:	10880020 	cmpeqi	r2,r2,8192
    e630:	10803fcc 	andi	r2,r2,255
    e634:	00000506 	br	e64c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e638:	000e56c0 	call	e56c <alt_get_errno>
    e63c:	1007883a 	mov	r3,r2
    e640:	00801444 	movi	r2,81
    e644:	18800015 	stw	r2,0(r3)
    return 0;
    e648:	0005883a 	mov	r2,zero
  }
}
    e64c:	e037883a 	mov	sp,fp
    e650:	dfc00117 	ldw	ra,4(sp)
    e654:	df000017 	ldw	fp,0(sp)
    e658:	dec00204 	addi	sp,sp,8
    e65c:	f800283a 	ret

0000e660 <alt_load_section>:
    e660:	defffc04 	addi	sp,sp,-16
    e664:	df000315 	stw	fp,12(sp)
    e668:	df000304 	addi	fp,sp,12
    e66c:	e13ffd15 	stw	r4,-12(fp)
    e670:	e17ffe15 	stw	r5,-8(fp)
    e674:	e1bfff15 	stw	r6,-4(fp)
    e678:	e0fffe17 	ldw	r3,-8(fp)
    e67c:	e0bffd17 	ldw	r2,-12(fp)
    e680:	18800c26 	beq	r3,r2,e6b4 <alt_load_section+0x54>
    e684:	00000806 	br	e6a8 <alt_load_section+0x48>
    e688:	e0bffe17 	ldw	r2,-8(fp)
    e68c:	10c00104 	addi	r3,r2,4
    e690:	e0fffe15 	stw	r3,-8(fp)
    e694:	e0fffd17 	ldw	r3,-12(fp)
    e698:	19000104 	addi	r4,r3,4
    e69c:	e13ffd15 	stw	r4,-12(fp)
    e6a0:	18c00017 	ldw	r3,0(r3)
    e6a4:	10c00015 	stw	r3,0(r2)
    e6a8:	e0fffe17 	ldw	r3,-8(fp)
    e6ac:	e0bfff17 	ldw	r2,-4(fp)
    e6b0:	18bff51e 	bne	r3,r2,e688 <alt_load_section+0x28>
    e6b4:	e037883a 	mov	sp,fp
    e6b8:	df000017 	ldw	fp,0(sp)
    e6bc:	dec00104 	addi	sp,sp,4
    e6c0:	f800283a 	ret

0000e6c4 <alt_load>:
    e6c4:	defffe04 	addi	sp,sp,-8
    e6c8:	dfc00115 	stw	ra,4(sp)
    e6cc:	df000015 	stw	fp,0(sp)
    e6d0:	d839883a 	mov	fp,sp
    e6d4:	01000074 	movhi	r4,1
    e6d8:	210bde04 	addi	r4,r4,12152
    e6dc:	01400074 	movhi	r5,1
    e6e0:	29452304 	addi	r5,r5,5260
    e6e4:	01800074 	movhi	r6,1
    e6e8:	318bde04 	addi	r6,r6,12152
    e6ec:	000e6600 	call	e660 <alt_load_section>
    e6f0:	01000034 	movhi	r4,0
    e6f4:	21000804 	addi	r4,r4,32
    e6f8:	01400034 	movhi	r5,0
    e6fc:	29400804 	addi	r5,r5,32
    e700:	01800034 	movhi	r6,0
    e704:	31809004 	addi	r6,r6,576
    e708:	000e6600 	call	e660 <alt_load_section>
    e70c:	01000074 	movhi	r4,1
    e710:	21035104 	addi	r4,r4,3396
    e714:	01400074 	movhi	r5,1
    e718:	29435104 	addi	r5,r5,3396
    e71c:	01800074 	movhi	r6,1
    e720:	31852304 	addi	r6,r6,5260
    e724:	000e6600 	call	e660 <alt_load_section>
    e728:	000fbc80 	call	fbc8 <alt_dcache_flush_all>
    e72c:	000fdb80 	call	fdb8 <alt_icache_flush_all>
    e730:	e037883a 	mov	sp,fp
    e734:	dfc00117 	ldw	ra,4(sp)
    e738:	df000017 	ldw	fp,0(sp)
    e73c:	dec00204 	addi	sp,sp,8
    e740:	f800283a 	ret

0000e744 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e744:	defffe04 	addi	sp,sp,-8
    e748:	dfc00115 	stw	ra,4(sp)
    e74c:	df000015 	stw	fp,0(sp)
    e750:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e754:	00800074 	movhi	r2,1
    e758:	108bd904 	addi	r2,r2,12132
    e75c:	10800017 	ldw	r2,0(r2)
    e760:	10000526 	beq	r2,zero,e778 <alt_get_errno+0x34>
    e764:	00800074 	movhi	r2,1
    e768:	108bd904 	addi	r2,r2,12132
    e76c:	10800017 	ldw	r2,0(r2)
    e770:	103ee83a 	callr	r2
    e774:	00000206 	br	e780 <alt_get_errno+0x3c>
    e778:	00800074 	movhi	r2,1
    e77c:	1092a604 	addi	r2,r2,19096
}
    e780:	e037883a 	mov	sp,fp
    e784:	dfc00117 	ldw	ra,4(sp)
    e788:	df000017 	ldw	fp,0(sp)
    e78c:	dec00204 	addi	sp,sp,8
    e790:	f800283a 	ret

0000e794 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e794:	defff904 	addi	sp,sp,-28
    e798:	dfc00615 	stw	ra,24(sp)
    e79c:	df000515 	stw	fp,20(sp)
    e7a0:	df000504 	addi	fp,sp,20
    e7a4:	e13ffd15 	stw	r4,-12(fp)
    e7a8:	e17ffe15 	stw	r5,-8(fp)
    e7ac:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e7b0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e7b4:	e0bffd17 	ldw	r2,-12(fp)
    e7b8:	10000616 	blt	r2,zero,e7d4 <lseek+0x40>
    e7bc:	e0bffd17 	ldw	r2,-12(fp)
    e7c0:	10c00324 	muli	r3,r2,12
    e7c4:	00800074 	movhi	r2,1
    e7c8:	10875604 	addi	r2,r2,7512
    e7cc:	1885883a 	add	r2,r3,r2
    e7d0:	00000106 	br	e7d8 <lseek+0x44>
    e7d4:	0005883a 	mov	r2,zero
    e7d8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e7dc:	e0bffc17 	ldw	r2,-16(fp)
    e7e0:	10001026 	beq	r2,zero,e824 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e7e4:	e0bffc17 	ldw	r2,-16(fp)
    e7e8:	10800017 	ldw	r2,0(r2)
    e7ec:	10800717 	ldw	r2,28(r2)
    e7f0:	10000926 	beq	r2,zero,e818 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e7f4:	e0bffc17 	ldw	r2,-16(fp)
    e7f8:	10800017 	ldw	r2,0(r2)
    e7fc:	10800717 	ldw	r2,28(r2)
    e800:	e13ffc17 	ldw	r4,-16(fp)
    e804:	e17ffe17 	ldw	r5,-8(fp)
    e808:	e1bfff17 	ldw	r6,-4(fp)
    e80c:	103ee83a 	callr	r2
    e810:	e0bffb15 	stw	r2,-20(fp)
    e814:	00000506 	br	e82c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e818:	00bfde84 	movi	r2,-134
    e81c:	e0bffb15 	stw	r2,-20(fp)
    e820:	00000206 	br	e82c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    e824:	00bfebc4 	movi	r2,-81
    e828:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e82c:	e0bffb17 	ldw	r2,-20(fp)
    e830:	1000070e 	bge	r2,zero,e850 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    e834:	000e7440 	call	e744 <alt_get_errno>
    e838:	1007883a 	mov	r3,r2
    e83c:	e0bffb17 	ldw	r2,-20(fp)
    e840:	0085c83a 	sub	r2,zero,r2
    e844:	18800015 	stw	r2,0(r3)
    rc = -1;
    e848:	00bfffc4 	movi	r2,-1
    e84c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    e850:	e0bffb17 	ldw	r2,-20(fp)
}
    e854:	e037883a 	mov	sp,fp
    e858:	dfc00117 	ldw	ra,4(sp)
    e85c:	df000017 	ldw	fp,0(sp)
    e860:	dec00204 	addi	sp,sp,8
    e864:	f800283a 	ret

0000e868 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e868:	defffd04 	addi	sp,sp,-12
    e86c:	dfc00215 	stw	ra,8(sp)
    e870:	df000115 	stw	fp,4(sp)
    e874:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e878:	0009883a 	mov	r4,zero
    e87c:	000ed2c0 	call	ed2c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e880:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e884:	000ed600 	call	ed60 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e888:	01000074 	movhi	r4,1
    e88c:	21051b04 	addi	r4,r4,5228
    e890:	01400074 	movhi	r5,1
    e894:	29451b04 	addi	r5,r5,5228
    e898:	01800074 	movhi	r6,1
    e89c:	31851b04 	addi	r6,r6,5228
    e8a0:	00101780 	call	10178 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e8a4:	000fd000 	call	fd00 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e8a8:	01000074 	movhi	r4,1
    e8ac:	213f5704 	addi	r4,r4,-676
    e8b0:	00109a00 	call	109a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e8b4:	d126dc17 	ldw	r4,-25744(gp)
    e8b8:	d0e6dd17 	ldw	r3,-25740(gp)
    e8bc:	d0a6de17 	ldw	r2,-25736(gp)
    e8c0:	180b883a 	mov	r5,r3
    e8c4:	100d883a 	mov	r6,r2
    e8c8:	00012a40 	call	12a4 <main>
    e8cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    e8d0:	01000044 	movi	r4,1
    e8d4:	000e3700 	call	e370 <close>
  exit (result);
    e8d8:	e13fff17 	ldw	r4,-4(fp)
    e8dc:	00109b40 	call	109b4 <exit>

0000e8e0 <__malloc_lock>:
    e8e0:	defffe04 	addi	sp,sp,-8
    e8e4:	df000115 	stw	fp,4(sp)
    e8e8:	df000104 	addi	fp,sp,4
    e8ec:	e13fff15 	stw	r4,-4(fp)
    e8f0:	e037883a 	mov	sp,fp
    e8f4:	df000017 	ldw	fp,0(sp)
    e8f8:	dec00104 	addi	sp,sp,4
    e8fc:	f800283a 	ret

0000e900 <__malloc_unlock>:
    e900:	defffe04 	addi	sp,sp,-8
    e904:	df000115 	stw	fp,4(sp)
    e908:	df000104 	addi	fp,sp,4
    e90c:	e13fff15 	stw	r4,-4(fp)
    e910:	e037883a 	mov	sp,fp
    e914:	df000017 	ldw	fp,0(sp)
    e918:	dec00104 	addi	sp,sp,4
    e91c:	f800283a 	ret

0000e920 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e920:	defffe04 	addi	sp,sp,-8
    e924:	dfc00115 	stw	ra,4(sp)
    e928:	df000015 	stw	fp,0(sp)
    e92c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e930:	00800074 	movhi	r2,1
    e934:	108bd904 	addi	r2,r2,12132
    e938:	10800017 	ldw	r2,0(r2)
    e93c:	10000526 	beq	r2,zero,e954 <alt_get_errno+0x34>
    e940:	00800074 	movhi	r2,1
    e944:	108bd904 	addi	r2,r2,12132
    e948:	10800017 	ldw	r2,0(r2)
    e94c:	103ee83a 	callr	r2
    e950:	00000206 	br	e95c <alt_get_errno+0x3c>
    e954:	00800074 	movhi	r2,1
    e958:	1092a604 	addi	r2,r2,19096
}
    e95c:	e037883a 	mov	sp,fp
    e960:	dfc00117 	ldw	ra,4(sp)
    e964:	df000017 	ldw	fp,0(sp)
    e968:	dec00204 	addi	sp,sp,8
    e96c:	f800283a 	ret

0000e970 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e970:	defff904 	addi	sp,sp,-28
    e974:	dfc00615 	stw	ra,24(sp)
    e978:	df000515 	stw	fp,20(sp)
    e97c:	df000504 	addi	fp,sp,20
    e980:	e13ffd15 	stw	r4,-12(fp)
    e984:	e17ffe15 	stw	r5,-8(fp)
    e988:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e98c:	e0bffd17 	ldw	r2,-12(fp)
    e990:	10000616 	blt	r2,zero,e9ac <read+0x3c>
    e994:	e0bffd17 	ldw	r2,-12(fp)
    e998:	10c00324 	muli	r3,r2,12
    e99c:	00800074 	movhi	r2,1
    e9a0:	10875604 	addi	r2,r2,7512
    e9a4:	1885883a 	add	r2,r3,r2
    e9a8:	00000106 	br	e9b0 <read+0x40>
    e9ac:	0005883a 	mov	r2,zero
    e9b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e9b4:	e0bffb17 	ldw	r2,-20(fp)
    e9b8:	10002226 	beq	r2,zero,ea44 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e9bc:	e0bffb17 	ldw	r2,-20(fp)
    e9c0:	10800217 	ldw	r2,8(r2)
    e9c4:	108000cc 	andi	r2,r2,3
    e9c8:	10800060 	cmpeqi	r2,r2,1
    e9cc:	1000181e 	bne	r2,zero,ea30 <read+0xc0>
        (fd->dev->read))
    e9d0:	e0bffb17 	ldw	r2,-20(fp)
    e9d4:	10800017 	ldw	r2,0(r2)
    e9d8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e9dc:	10001426 	beq	r2,zero,ea30 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e9e0:	e0bffb17 	ldw	r2,-20(fp)
    e9e4:	10800017 	ldw	r2,0(r2)
    e9e8:	10800517 	ldw	r2,20(r2)
    e9ec:	e0ffff17 	ldw	r3,-4(fp)
    e9f0:	e13ffb17 	ldw	r4,-20(fp)
    e9f4:	e17ffe17 	ldw	r5,-8(fp)
    e9f8:	180d883a 	mov	r6,r3
    e9fc:	103ee83a 	callr	r2
    ea00:	e0bffc15 	stw	r2,-16(fp)
    ea04:	e0bffc17 	ldw	r2,-16(fp)
    ea08:	1000070e 	bge	r2,zero,ea28 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    ea0c:	000e9200 	call	e920 <alt_get_errno>
    ea10:	1007883a 	mov	r3,r2
    ea14:	e0bffc17 	ldw	r2,-16(fp)
    ea18:	0085c83a 	sub	r2,zero,r2
    ea1c:	18800015 	stw	r2,0(r3)
          return -1;
    ea20:	00bfffc4 	movi	r2,-1
    ea24:	00000c06 	br	ea58 <read+0xe8>
        }
        return rval;
    ea28:	e0bffc17 	ldw	r2,-16(fp)
    ea2c:	00000a06 	br	ea58 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ea30:	000e9200 	call	e920 <alt_get_errno>
    ea34:	1007883a 	mov	r3,r2
    ea38:	00800344 	movi	r2,13
    ea3c:	18800015 	stw	r2,0(r3)
    ea40:	00000406 	br	ea54 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ea44:	000e9200 	call	e920 <alt_get_errno>
    ea48:	1007883a 	mov	r3,r2
    ea4c:	00801444 	movi	r2,81
    ea50:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ea54:	00bfffc4 	movi	r2,-1
}
    ea58:	e037883a 	mov	sp,fp
    ea5c:	dfc00117 	ldw	ra,4(sp)
    ea60:	df000017 	ldw	fp,0(sp)
    ea64:	dec00204 	addi	sp,sp,8
    ea68:	f800283a 	ret

0000ea6c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ea6c:	defffe04 	addi	sp,sp,-8
    ea70:	df000115 	stw	fp,4(sp)
    ea74:	df000104 	addi	fp,sp,4
    ea78:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ea7c:	e0bfff17 	ldw	r2,-4(fp)
    ea80:	108000d0 	cmplti	r2,r2,3
    ea84:	10000d1e 	bne	r2,zero,eabc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    ea88:	00800074 	movhi	r2,1
    ea8c:	10875604 	addi	r2,r2,7512
    ea90:	e0ffff17 	ldw	r3,-4(fp)
    ea94:	18c00324 	muli	r3,r3,12
    ea98:	18c00204 	addi	r3,r3,8
    ea9c:	10c5883a 	add	r2,r2,r3
    eaa0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    eaa4:	00800074 	movhi	r2,1
    eaa8:	10875604 	addi	r2,r2,7512
    eaac:	e0ffff17 	ldw	r3,-4(fp)
    eab0:	18c00324 	muli	r3,r3,12
    eab4:	10c5883a 	add	r2,r2,r3
    eab8:	10000015 	stw	zero,0(r2)
  }
}
    eabc:	e037883a 	mov	sp,fp
    eac0:	df000017 	ldw	fp,0(sp)
    eac4:	dec00104 	addi	sp,sp,4
    eac8:	f800283a 	ret

0000eacc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    eacc:	defff904 	addi	sp,sp,-28
    ead0:	df000615 	stw	fp,24(sp)
    ead4:	df000604 	addi	fp,sp,24
    ead8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eadc:	0005303a 	rdctl	r2,status
    eae0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eae4:	e0fffc17 	ldw	r3,-16(fp)
    eae8:	00bfff84 	movi	r2,-2
    eaec:	1884703a 	and	r2,r3,r2
    eaf0:	1001703a 	wrctl	status,r2
  
  return context;
    eaf4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    eaf8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    eafc:	d0a00c17 	ldw	r2,-32720(gp)
    eb00:	10c000c4 	addi	r3,r2,3
    eb04:	00bfff04 	movi	r2,-4
    eb08:	1884703a 	and	r2,r3,r2
    eb0c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    eb10:	d0e00c17 	ldw	r3,-32720(gp)
    eb14:	e0bfff17 	ldw	r2,-4(fp)
    eb18:	1887883a 	add	r3,r3,r2
    eb1c:	00804034 	movhi	r2,256
    eb20:	10800004 	addi	r2,r2,0
    eb24:	10c0062e 	bgeu	r2,r3,eb40 <sbrk+0x74>
    eb28:	e0bffa17 	ldw	r2,-24(fp)
    eb2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb30:	e0bffd17 	ldw	r2,-12(fp)
    eb34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    eb38:	00bfffc4 	movi	r2,-1
    eb3c:	00000b06 	br	eb6c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    eb40:	d0a00c17 	ldw	r2,-32720(gp)
    eb44:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    eb48:	d0e00c17 	ldw	r3,-32720(gp)
    eb4c:	e0bfff17 	ldw	r2,-4(fp)
    eb50:	1885883a 	add	r2,r3,r2
    eb54:	d0a00c15 	stw	r2,-32720(gp)
    eb58:	e0bffa17 	ldw	r2,-24(fp)
    eb5c:	e0bffe15 	stw	r2,-8(fp)
    eb60:	e0bffe17 	ldw	r2,-8(fp)
    eb64:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    eb68:	e0bffb17 	ldw	r2,-20(fp)
} 
    eb6c:	e037883a 	mov	sp,fp
    eb70:	df000017 	ldw	fp,0(sp)
    eb74:	dec00104 	addi	sp,sp,4
    eb78:	f800283a 	ret

0000eb7c <usleep>:
    eb7c:	defffd04 	addi	sp,sp,-12
    eb80:	dfc00215 	stw	ra,8(sp)
    eb84:	df000115 	stw	fp,4(sp)
    eb88:	df000104 	addi	fp,sp,4
    eb8c:	e13fff15 	stw	r4,-4(fp)
    eb90:	e13fff17 	ldw	r4,-4(fp)
    eb94:	000fa700 	call	fa70 <alt_busy_sleep>
    eb98:	e037883a 	mov	sp,fp
    eb9c:	dfc00117 	ldw	ra,4(sp)
    eba0:	df000017 	ldw	fp,0(sp)
    eba4:	dec00204 	addi	sp,sp,8
    eba8:	f800283a 	ret

0000ebac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ebac:	defffe04 	addi	sp,sp,-8
    ebb0:	dfc00115 	stw	ra,4(sp)
    ebb4:	df000015 	stw	fp,0(sp)
    ebb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ebbc:	00800074 	movhi	r2,1
    ebc0:	108bd904 	addi	r2,r2,12132
    ebc4:	10800017 	ldw	r2,0(r2)
    ebc8:	10000526 	beq	r2,zero,ebe0 <alt_get_errno+0x34>
    ebcc:	00800074 	movhi	r2,1
    ebd0:	108bd904 	addi	r2,r2,12132
    ebd4:	10800017 	ldw	r2,0(r2)
    ebd8:	103ee83a 	callr	r2
    ebdc:	00000206 	br	ebe8 <alt_get_errno+0x3c>
    ebe0:	00800074 	movhi	r2,1
    ebe4:	1092a604 	addi	r2,r2,19096
}
    ebe8:	e037883a 	mov	sp,fp
    ebec:	dfc00117 	ldw	ra,4(sp)
    ebf0:	df000017 	ldw	fp,0(sp)
    ebf4:	dec00204 	addi	sp,sp,8
    ebf8:	f800283a 	ret

0000ebfc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ebfc:	defff904 	addi	sp,sp,-28
    ec00:	dfc00615 	stw	ra,24(sp)
    ec04:	df000515 	stw	fp,20(sp)
    ec08:	df000504 	addi	fp,sp,20
    ec0c:	e13ffd15 	stw	r4,-12(fp)
    ec10:	e17ffe15 	stw	r5,-8(fp)
    ec14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ec18:	e0bffd17 	ldw	r2,-12(fp)
    ec1c:	10000616 	blt	r2,zero,ec38 <write+0x3c>
    ec20:	e0bffd17 	ldw	r2,-12(fp)
    ec24:	10c00324 	muli	r3,r2,12
    ec28:	00800074 	movhi	r2,1
    ec2c:	10875604 	addi	r2,r2,7512
    ec30:	1885883a 	add	r2,r3,r2
    ec34:	00000106 	br	ec3c <write+0x40>
    ec38:	0005883a 	mov	r2,zero
    ec3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ec40:	e0bffb17 	ldw	r2,-20(fp)
    ec44:	10002126 	beq	r2,zero,eccc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ec48:	e0bffb17 	ldw	r2,-20(fp)
    ec4c:	10800217 	ldw	r2,8(r2)
    ec50:	108000cc 	andi	r2,r2,3
    ec54:	10001826 	beq	r2,zero,ecb8 <write+0xbc>
    ec58:	e0bffb17 	ldw	r2,-20(fp)
    ec5c:	10800017 	ldw	r2,0(r2)
    ec60:	10800617 	ldw	r2,24(r2)
    ec64:	10001426 	beq	r2,zero,ecb8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ec68:	e0bffb17 	ldw	r2,-20(fp)
    ec6c:	10800017 	ldw	r2,0(r2)
    ec70:	10800617 	ldw	r2,24(r2)
    ec74:	e0ffff17 	ldw	r3,-4(fp)
    ec78:	e13ffb17 	ldw	r4,-20(fp)
    ec7c:	e17ffe17 	ldw	r5,-8(fp)
    ec80:	180d883a 	mov	r6,r3
    ec84:	103ee83a 	callr	r2
    ec88:	e0bffc15 	stw	r2,-16(fp)
    ec8c:	e0bffc17 	ldw	r2,-16(fp)
    ec90:	1000070e 	bge	r2,zero,ecb0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    ec94:	000ebac0 	call	ebac <alt_get_errno>
    ec98:	1007883a 	mov	r3,r2
    ec9c:	e0bffc17 	ldw	r2,-16(fp)
    eca0:	0085c83a 	sub	r2,zero,r2
    eca4:	18800015 	stw	r2,0(r3)
        return -1;
    eca8:	00bfffc4 	movi	r2,-1
    ecac:	00000c06 	br	ece0 <write+0xe4>
      }
      return rval;
    ecb0:	e0bffc17 	ldw	r2,-16(fp)
    ecb4:	00000a06 	br	ece0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ecb8:	000ebac0 	call	ebac <alt_get_errno>
    ecbc:	1007883a 	mov	r3,r2
    ecc0:	00800344 	movi	r2,13
    ecc4:	18800015 	stw	r2,0(r3)
    ecc8:	00000406 	br	ecdc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    eccc:	000ebac0 	call	ebac <alt_get_errno>
    ecd0:	1007883a 	mov	r3,r2
    ecd4:	00801444 	movi	r2,81
    ecd8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ecdc:	00bfffc4 	movi	r2,-1
}
    ece0:	e037883a 	mov	sp,fp
    ece4:	dfc00117 	ldw	ra,4(sp)
    ece8:	df000017 	ldw	fp,0(sp)
    ecec:	dec00204 	addi	sp,sp,8
    ecf0:	f800283a 	ret

0000ecf4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    ecf4:	defffd04 	addi	sp,sp,-12
    ecf8:	dfc00215 	stw	ra,8(sp)
    ecfc:	df000115 	stw	fp,4(sp)
    ed00:	df000104 	addi	fp,sp,4
    ed04:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ed08:	e13fff17 	ldw	r4,-4(fp)
    ed0c:	01400074 	movhi	r5,1
    ed10:	294bd604 	addi	r5,r5,12120
    ed14:	000fc5c0 	call	fc5c <alt_dev_llist_insert>
}
    ed18:	e037883a 	mov	sp,fp
    ed1c:	dfc00117 	ldw	ra,4(sp)
    ed20:	df000017 	ldw	fp,0(sp)
    ed24:	dec00204 	addi	sp,sp,8
    ed28:	f800283a 	ret

0000ed2c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ed2c:	defffd04 	addi	sp,sp,-12
    ed30:	dfc00215 	stw	ra,8(sp)
    ed34:	df000115 	stw	fp,4(sp)
    ed38:	df000104 	addi	fp,sp,4
    ed3c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    ed40:	00106000 	call	10600 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ed44:	00800044 	movi	r2,1
    ed48:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ed4c:	e037883a 	mov	sp,fp
    ed50:	dfc00117 	ldw	ra,4(sp)
    ed54:	df000017 	ldw	fp,0(sp)
    ed58:	dec00204 	addi	sp,sp,8
    ed5c:	f800283a 	ret

0000ed60 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ed60:	defffe04 	addi	sp,sp,-8
    ed64:	dfc00115 	stw	ra,4(sp)
    ed68:	df000015 	stw	fp,0(sp)
    ed6c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ed70:	00800074 	movhi	r2,1
    ed74:	1092ad04 	addi	r2,r2,19124
    ed78:	00c04034 	movhi	r3,256
    ed7c:	18c41004 	addi	r3,r3,4160
    ed80:	10c00015 	stw	r3,0(r2)
    ed84:	00800074 	movhi	r2,1
    ed88:	1092ae04 	addi	r2,r2,19128
    ed8c:	00c0bef4 	movhi	r3,763
    ed90:	18fc2004 	addi	r3,r3,-3968
    ed94:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ed98:	01004034 	movhi	r4,256
    ed9c:	21041804 	addi	r4,r4,4192
    eda0:	000b883a 	mov	r5,zero
    eda4:	01800104 	movi	r6,4
    eda8:	01c0fa04 	movi	r7,1000
    edac:	000f8a80 	call	f8a8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    edb0:	01000074 	movhi	r4,1
    edb4:	2107c004 	addi	r4,r4,7936
    edb8:	000b883a 	mov	r5,zero
    edbc:	000d883a 	mov	r6,zero
    edc0:	000ef4c0 	call	ef4c <altera_avalon_jtag_uart_init>
    edc4:	01000074 	movhi	r4,1
    edc8:	2107b604 	addi	r4,r4,7896
    edcc:	000ecf40 	call	ecf4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    edd0:	0001883a 	nop
}
    edd4:	e037883a 	mov	sp,fp
    edd8:	dfc00117 	ldw	ra,4(sp)
    eddc:	df000017 	ldw	fp,0(sp)
    ede0:	dec00204 	addi	sp,sp,8
    ede4:	f800283a 	ret

0000ede8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ede8:	defffa04 	addi	sp,sp,-24
    edec:	dfc00515 	stw	ra,20(sp)
    edf0:	df000415 	stw	fp,16(sp)
    edf4:	df000404 	addi	fp,sp,16
    edf8:	e13ffd15 	stw	r4,-12(fp)
    edfc:	e17ffe15 	stw	r5,-8(fp)
    ee00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ee04:	e0bffd17 	ldw	r2,-12(fp)
    ee08:	10800017 	ldw	r2,0(r2)
    ee0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ee10:	e0bffc17 	ldw	r2,-16(fp)
    ee14:	10c00a04 	addi	r3,r2,40
    ee18:	e0bffd17 	ldw	r2,-12(fp)
    ee1c:	10800217 	ldw	r2,8(r2)
    ee20:	1809883a 	mov	r4,r3
    ee24:	e17ffe17 	ldw	r5,-8(fp)
    ee28:	e1bfff17 	ldw	r6,-4(fp)
    ee2c:	100f883a 	mov	r7,r2
    ee30:	000f4100 	call	f410 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    ee34:	e037883a 	mov	sp,fp
    ee38:	dfc00117 	ldw	ra,4(sp)
    ee3c:	df000017 	ldw	fp,0(sp)
    ee40:	dec00204 	addi	sp,sp,8
    ee44:	f800283a 	ret

0000ee48 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ee48:	defffa04 	addi	sp,sp,-24
    ee4c:	dfc00515 	stw	ra,20(sp)
    ee50:	df000415 	stw	fp,16(sp)
    ee54:	df000404 	addi	fp,sp,16
    ee58:	e13ffd15 	stw	r4,-12(fp)
    ee5c:	e17ffe15 	stw	r5,-8(fp)
    ee60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ee64:	e0bffd17 	ldw	r2,-12(fp)
    ee68:	10800017 	ldw	r2,0(r2)
    ee6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ee70:	e0bffc17 	ldw	r2,-16(fp)
    ee74:	10c00a04 	addi	r3,r2,40
    ee78:	e0bffd17 	ldw	r2,-12(fp)
    ee7c:	10800217 	ldw	r2,8(r2)
    ee80:	1809883a 	mov	r4,r3
    ee84:	e17ffe17 	ldw	r5,-8(fp)
    ee88:	e1bfff17 	ldw	r6,-4(fp)
    ee8c:	100f883a 	mov	r7,r2
    ee90:	000f61c0 	call	f61c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    ee94:	e037883a 	mov	sp,fp
    ee98:	dfc00117 	ldw	ra,4(sp)
    ee9c:	df000017 	ldw	fp,0(sp)
    eea0:	dec00204 	addi	sp,sp,8
    eea4:	f800283a 	ret

0000eea8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    eea8:	defffc04 	addi	sp,sp,-16
    eeac:	dfc00315 	stw	ra,12(sp)
    eeb0:	df000215 	stw	fp,8(sp)
    eeb4:	df000204 	addi	fp,sp,8
    eeb8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    eebc:	e0bfff17 	ldw	r2,-4(fp)
    eec0:	10800017 	ldw	r2,0(r2)
    eec4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    eec8:	e0bffe17 	ldw	r2,-8(fp)
    eecc:	10c00a04 	addi	r3,r2,40
    eed0:	e0bfff17 	ldw	r2,-4(fp)
    eed4:	10800217 	ldw	r2,8(r2)
    eed8:	1809883a 	mov	r4,r3
    eedc:	100b883a 	mov	r5,r2
    eee0:	000f2bc0 	call	f2bc <altera_avalon_jtag_uart_close>
}
    eee4:	e037883a 	mov	sp,fp
    eee8:	dfc00117 	ldw	ra,4(sp)
    eeec:	df000017 	ldw	fp,0(sp)
    eef0:	dec00204 	addi	sp,sp,8
    eef4:	f800283a 	ret

0000eef8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    eef8:	defffa04 	addi	sp,sp,-24
    eefc:	dfc00515 	stw	ra,20(sp)
    ef00:	df000415 	stw	fp,16(sp)
    ef04:	df000404 	addi	fp,sp,16
    ef08:	e13ffd15 	stw	r4,-12(fp)
    ef0c:	e17ffe15 	stw	r5,-8(fp)
    ef10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ef14:	e0bffd17 	ldw	r2,-12(fp)
    ef18:	10800017 	ldw	r2,0(r2)
    ef1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ef20:	e0bffc17 	ldw	r2,-16(fp)
    ef24:	10800a04 	addi	r2,r2,40
    ef28:	1009883a 	mov	r4,r2
    ef2c:	e17ffe17 	ldw	r5,-8(fp)
    ef30:	e1bfff17 	ldw	r6,-4(fp)
    ef34:	000f3240 	call	f324 <altera_avalon_jtag_uart_ioctl>
}
    ef38:	e037883a 	mov	sp,fp
    ef3c:	dfc00117 	ldw	ra,4(sp)
    ef40:	df000017 	ldw	fp,0(sp)
    ef44:	dec00204 	addi	sp,sp,8
    ef48:	f800283a 	ret

0000ef4c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ef4c:	defffa04 	addi	sp,sp,-24
    ef50:	dfc00515 	stw	ra,20(sp)
    ef54:	df000415 	stw	fp,16(sp)
    ef58:	df000404 	addi	fp,sp,16
    ef5c:	e13ffd15 	stw	r4,-12(fp)
    ef60:	e17ffe15 	stw	r5,-8(fp)
    ef64:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ef68:	e0bffd17 	ldw	r2,-12(fp)
    ef6c:	00c00044 	movi	r3,1
    ef70:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ef74:	e0bffd17 	ldw	r2,-12(fp)
    ef78:	10800017 	ldw	r2,0(r2)
    ef7c:	10800104 	addi	r2,r2,4
    ef80:	1007883a 	mov	r3,r2
    ef84:	e0bffd17 	ldw	r2,-12(fp)
    ef88:	10800817 	ldw	r2,32(r2)
    ef8c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ef90:	e0fffe17 	ldw	r3,-8(fp)
    ef94:	e0bfff17 	ldw	r2,-4(fp)
    ef98:	d8000015 	stw	zero,0(sp)
    ef9c:	1809883a 	mov	r4,r3
    efa0:	100b883a 	mov	r5,r2
    efa4:	01800074 	movhi	r6,1
    efa8:	31bc0404 	addi	r6,r6,-4080
    efac:	e1fffd17 	ldw	r7,-12(fp)
    efb0:	000fde80 	call	fde8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    efb4:	e0bffd17 	ldw	r2,-12(fp)
    efb8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    efbc:	e0bffd17 	ldw	r2,-12(fp)
    efc0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    efc4:	00800074 	movhi	r2,1
    efc8:	1092b004 	addi	r2,r2,19136
    efcc:	10800017 	ldw	r2,0(r2)
    efd0:	1809883a 	mov	r4,r3
    efd4:	100b883a 	mov	r5,r2
    efd8:	01800074 	movhi	r6,1
    efdc:	31bc8504 	addi	r6,r6,-3564
    efe0:	e1fffd17 	ldw	r7,-12(fp)
    efe4:	000f9300 	call	f930 <alt_alarm_start>
    efe8:	1000040e 	bge	r2,zero,effc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    efec:	e0fffd17 	ldw	r3,-12(fp)
    eff0:	00a00034 	movhi	r2,32768
    eff4:	10bfffc4 	addi	r2,r2,-1
    eff8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    effc:	e037883a 	mov	sp,fp
    f000:	dfc00117 	ldw	ra,4(sp)
    f004:	df000017 	ldw	fp,0(sp)
    f008:	dec00204 	addi	sp,sp,8
    f00c:	f800283a 	ret

0000f010 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f010:	defff804 	addi	sp,sp,-32
    f014:	df000715 	stw	fp,28(sp)
    f018:	df000704 	addi	fp,sp,28
    f01c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f020:	e0bfff17 	ldw	r2,-4(fp)
    f024:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f028:	e0bffb17 	ldw	r2,-20(fp)
    f02c:	10800017 	ldw	r2,0(r2)
    f030:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f034:	e0bffc17 	ldw	r2,-16(fp)
    f038:	10800104 	addi	r2,r2,4
    f03c:	10800037 	ldwio	r2,0(r2)
    f040:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f044:	e0bffd17 	ldw	r2,-12(fp)
    f048:	1080c00c 	andi	r2,r2,768
    f04c:	1000011e 	bne	r2,zero,f054 <altera_avalon_jtag_uart_irq+0x44>
      break;
    f050:	00006c06 	br	f204 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f054:	e0bffd17 	ldw	r2,-12(fp)
    f058:	1080400c 	andi	r2,r2,256
    f05c:	10003426 	beq	r2,zero,f130 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f060:	00800074 	movhi	r2,1
    f064:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f068:	e0bffb17 	ldw	r2,-20(fp)
    f06c:	10800a17 	ldw	r2,40(r2)
    f070:	10800044 	addi	r2,r2,1
    f074:	1081ffcc 	andi	r2,r2,2047
    f078:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f07c:	e0bffb17 	ldw	r2,-20(fp)
    f080:	10c00b17 	ldw	r3,44(r2)
    f084:	e0bffe17 	ldw	r2,-8(fp)
    f088:	1880011e 	bne	r3,r2,f090 <altera_avalon_jtag_uart_irq+0x80>
          break;
    f08c:	00001606 	br	f0e8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f090:	e0bffc17 	ldw	r2,-16(fp)
    f094:	10800037 	ldwio	r2,0(r2)
    f098:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f09c:	e0bff917 	ldw	r2,-28(fp)
    f0a0:	10a0000c 	andi	r2,r2,32768
    f0a4:	1000011e 	bne	r2,zero,f0ac <altera_avalon_jtag_uart_irq+0x9c>
          break;
    f0a8:	00000f06 	br	f0e8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f0ac:	e0bffb17 	ldw	r2,-20(fp)
    f0b0:	10800a17 	ldw	r2,40(r2)
    f0b4:	e0fff917 	ldw	r3,-28(fp)
    f0b8:	1809883a 	mov	r4,r3
    f0bc:	e0fffb17 	ldw	r3,-20(fp)
    f0c0:	1885883a 	add	r2,r3,r2
    f0c4:	10800e04 	addi	r2,r2,56
    f0c8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f0cc:	e0bffb17 	ldw	r2,-20(fp)
    f0d0:	10800a17 	ldw	r2,40(r2)
    f0d4:	10800044 	addi	r2,r2,1
    f0d8:	10c1ffcc 	andi	r3,r2,2047
    f0dc:	e0bffb17 	ldw	r2,-20(fp)
    f0e0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f0e4:	003fe006 	br	f068 <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f0e8:	e0bff917 	ldw	r2,-28(fp)
    f0ec:	10bfffec 	andhi	r2,r2,65535
    f0f0:	10000f26 	beq	r2,zero,f130 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f0f4:	e0bffb17 	ldw	r2,-20(fp)
    f0f8:	10c00817 	ldw	r3,32(r2)
    f0fc:	00bfff84 	movi	r2,-2
    f100:	1886703a 	and	r3,r3,r2
    f104:	e0bffb17 	ldw	r2,-20(fp)
    f108:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f10c:	e0bffc17 	ldw	r2,-16(fp)
    f110:	10800104 	addi	r2,r2,4
    f114:	1007883a 	mov	r3,r2
    f118:	e0bffb17 	ldw	r2,-20(fp)
    f11c:	10800817 	ldw	r2,32(r2)
    f120:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f124:	e0bffc17 	ldw	r2,-16(fp)
    f128:	10800104 	addi	r2,r2,4
    f12c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f130:	e0bffd17 	ldw	r2,-12(fp)
    f134:	1080800c 	andi	r2,r2,512
    f138:	10003126 	beq	r2,zero,f200 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f13c:	e0bffd17 	ldw	r2,-12(fp)
    f140:	1004d43a 	srli	r2,r2,16
    f144:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f148:	00001406 	br	f19c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f14c:	e0bffc17 	ldw	r2,-16(fp)
    f150:	e0fffb17 	ldw	r3,-20(fp)
    f154:	18c00d17 	ldw	r3,52(r3)
    f158:	e13ffb17 	ldw	r4,-20(fp)
    f15c:	20c7883a 	add	r3,r4,r3
    f160:	18c20e04 	addi	r3,r3,2104
    f164:	18c00003 	ldbu	r3,0(r3)
    f168:	18c03fcc 	andi	r3,r3,255
    f16c:	18c0201c 	xori	r3,r3,128
    f170:	18ffe004 	addi	r3,r3,-128
    f174:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f178:	e0bffb17 	ldw	r2,-20(fp)
    f17c:	10800d17 	ldw	r2,52(r2)
    f180:	10800044 	addi	r2,r2,1
    f184:	10c1ffcc 	andi	r3,r2,2047
    f188:	e0bffb17 	ldw	r2,-20(fp)
    f18c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f190:	e0bffa17 	ldw	r2,-24(fp)
    f194:	10bfffc4 	addi	r2,r2,-1
    f198:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f19c:	e0bffa17 	ldw	r2,-24(fp)
    f1a0:	10000526 	beq	r2,zero,f1b8 <altera_avalon_jtag_uart_irq+0x1a8>
    f1a4:	e0bffb17 	ldw	r2,-20(fp)
    f1a8:	10c00d17 	ldw	r3,52(r2)
    f1ac:	e0bffb17 	ldw	r2,-20(fp)
    f1b0:	10800c17 	ldw	r2,48(r2)
    f1b4:	18bfe51e 	bne	r3,r2,f14c <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f1b8:	e0bffa17 	ldw	r2,-24(fp)
    f1bc:	10001026 	beq	r2,zero,f200 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f1c0:	e0bffb17 	ldw	r2,-20(fp)
    f1c4:	10c00817 	ldw	r3,32(r2)
    f1c8:	00bfff44 	movi	r2,-3
    f1cc:	1886703a 	and	r3,r3,r2
    f1d0:	e0bffb17 	ldw	r2,-20(fp)
    f1d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f1d8:	e0bffb17 	ldw	r2,-20(fp)
    f1dc:	10800017 	ldw	r2,0(r2)
    f1e0:	10800104 	addi	r2,r2,4
    f1e4:	1007883a 	mov	r3,r2
    f1e8:	e0bffb17 	ldw	r2,-20(fp)
    f1ec:	10800817 	ldw	r2,32(r2)
    f1f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f1f4:	e0bffc17 	ldw	r2,-16(fp)
    f1f8:	10800104 	addi	r2,r2,4
    f1fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f200:	003f8c06 	br	f034 <altera_avalon_jtag_uart_irq+0x24>
}
    f204:	e037883a 	mov	sp,fp
    f208:	df000017 	ldw	fp,0(sp)
    f20c:	dec00104 	addi	sp,sp,4
    f210:	f800283a 	ret

0000f214 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f214:	defff804 	addi	sp,sp,-32
    f218:	df000715 	stw	fp,28(sp)
    f21c:	df000704 	addi	fp,sp,28
    f220:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f224:	e0bffb17 	ldw	r2,-20(fp)
    f228:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f22c:	e0bff917 	ldw	r2,-28(fp)
    f230:	10800017 	ldw	r2,0(r2)
    f234:	10800104 	addi	r2,r2,4
    f238:	10800037 	ldwio	r2,0(r2)
    f23c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f240:	e0bffa17 	ldw	r2,-24(fp)
    f244:	1081000c 	andi	r2,r2,1024
    f248:	10000b26 	beq	r2,zero,f278 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f24c:	e0bff917 	ldw	r2,-28(fp)
    f250:	10800017 	ldw	r2,0(r2)
    f254:	10800104 	addi	r2,r2,4
    f258:	1007883a 	mov	r3,r2
    f25c:	e0bff917 	ldw	r2,-28(fp)
    f260:	10800817 	ldw	r2,32(r2)
    f264:	10810014 	ori	r2,r2,1024
    f268:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f26c:	e0bff917 	ldw	r2,-28(fp)
    f270:	10000915 	stw	zero,36(r2)
    f274:	00000a06 	br	f2a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f278:	e0bff917 	ldw	r2,-28(fp)
    f27c:	10c00917 	ldw	r3,36(r2)
    f280:	00a00034 	movhi	r2,32768
    f284:	10bfff04 	addi	r2,r2,-4
    f288:	10c00536 	bltu	r2,r3,f2a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f28c:	e0bff917 	ldw	r2,-28(fp)
    f290:	10800917 	ldw	r2,36(r2)
    f294:	10c00044 	addi	r3,r2,1
    f298:	e0bff917 	ldw	r2,-28(fp)
    f29c:	10c00915 	stw	r3,36(r2)
    f2a0:	00800074 	movhi	r2,1
    f2a4:	1092b004 	addi	r2,r2,19136
    f2a8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f2ac:	e037883a 	mov	sp,fp
    f2b0:	df000017 	ldw	fp,0(sp)
    f2b4:	dec00104 	addi	sp,sp,4
    f2b8:	f800283a 	ret

0000f2bc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f2bc:	defffd04 	addi	sp,sp,-12
    f2c0:	df000215 	stw	fp,8(sp)
    f2c4:	df000204 	addi	fp,sp,8
    f2c8:	e13ffe15 	stw	r4,-8(fp)
    f2cc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f2d0:	00000506 	br	f2e8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f2d4:	e0bfff17 	ldw	r2,-4(fp)
    f2d8:	1090000c 	andi	r2,r2,16384
    f2dc:	10000226 	beq	r2,zero,f2e8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f2e0:	00bffd44 	movi	r2,-11
    f2e4:	00000b06 	br	f314 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f2e8:	e0bffe17 	ldw	r2,-8(fp)
    f2ec:	10c00d17 	ldw	r3,52(r2)
    f2f0:	e0bffe17 	ldw	r2,-8(fp)
    f2f4:	10800c17 	ldw	r2,48(r2)
    f2f8:	18800526 	beq	r3,r2,f310 <altera_avalon_jtag_uart_close+0x54>
    f2fc:	e0bffe17 	ldw	r2,-8(fp)
    f300:	10c00917 	ldw	r3,36(r2)
    f304:	e0bffe17 	ldw	r2,-8(fp)
    f308:	10800117 	ldw	r2,4(r2)
    f30c:	18bff136 	bltu	r3,r2,f2d4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f310:	0005883a 	mov	r2,zero
}
    f314:	e037883a 	mov	sp,fp
    f318:	df000017 	ldw	fp,0(sp)
    f31c:	dec00104 	addi	sp,sp,4
    f320:	f800283a 	ret

0000f324 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f324:	defffa04 	addi	sp,sp,-24
    f328:	df000515 	stw	fp,20(sp)
    f32c:	df000504 	addi	fp,sp,20
    f330:	e13ffd15 	stw	r4,-12(fp)
    f334:	e17ffe15 	stw	r5,-8(fp)
    f338:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f33c:	00bff9c4 	movi	r2,-25
    f340:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f344:	e0bffe17 	ldw	r2,-8(fp)
    f348:	10da8060 	cmpeqi	r3,r2,27137
    f34c:	1800031e 	bne	r3,zero,f35c <altera_avalon_jtag_uart_ioctl+0x38>
    f350:	109a80a0 	cmpeqi	r2,r2,27138
    f354:	1000191e 	bne	r2,zero,f3bc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    f358:	00002806 	br	f3fc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f35c:	e0bffd17 	ldw	r2,-12(fp)
    f360:	10c00117 	ldw	r3,4(r2)
    f364:	00a00034 	movhi	r2,32768
    f368:	10bfffc4 	addi	r2,r2,-1
    f36c:	18801226 	beq	r3,r2,f3b8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    f370:	e0bfff17 	ldw	r2,-4(fp)
    f374:	10800017 	ldw	r2,0(r2)
    f378:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f37c:	e0bffc17 	ldw	r2,-16(fp)
    f380:	10800090 	cmplti	r2,r2,2
    f384:	1000061e 	bne	r2,zero,f3a0 <altera_avalon_jtag_uart_ioctl+0x7c>
    f388:	e0fffc17 	ldw	r3,-16(fp)
    f38c:	00a00034 	movhi	r2,32768
    f390:	10bfffc4 	addi	r2,r2,-1
    f394:	18800226 	beq	r3,r2,f3a0 <altera_avalon_jtag_uart_ioctl+0x7c>
    f398:	e0bffc17 	ldw	r2,-16(fp)
    f39c:	00000206 	br	f3a8 <altera_avalon_jtag_uart_ioctl+0x84>
    f3a0:	00a00034 	movhi	r2,32768
    f3a4:	10bfff84 	addi	r2,r2,-2
    f3a8:	e0fffd17 	ldw	r3,-12(fp)
    f3ac:	18800115 	stw	r2,4(r3)
      rc = 0;
    f3b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f3b4:	00001106 	br	f3fc <altera_avalon_jtag_uart_ioctl+0xd8>
    f3b8:	00001006 	br	f3fc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f3bc:	e0bffd17 	ldw	r2,-12(fp)
    f3c0:	10c00117 	ldw	r3,4(r2)
    f3c4:	00a00034 	movhi	r2,32768
    f3c8:	10bfffc4 	addi	r2,r2,-1
    f3cc:	18800a26 	beq	r3,r2,f3f8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f3d0:	e0bffd17 	ldw	r2,-12(fp)
    f3d4:	10c00917 	ldw	r3,36(r2)
    f3d8:	e0bffd17 	ldw	r2,-12(fp)
    f3dc:	10800117 	ldw	r2,4(r2)
    f3e0:	1885803a 	cmpltu	r2,r3,r2
    f3e4:	10c03fcc 	andi	r3,r2,255
    f3e8:	e0bfff17 	ldw	r2,-4(fp)
    f3ec:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f3f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f3f4:	00000006 	br	f3f8 <altera_avalon_jtag_uart_ioctl+0xd4>
    f3f8:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f3fc:	e0bffb17 	ldw	r2,-20(fp)
}
    f400:	e037883a 	mov	sp,fp
    f404:	df000017 	ldw	fp,0(sp)
    f408:	dec00104 	addi	sp,sp,4
    f40c:	f800283a 	ret

0000f410 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f410:	defff304 	addi	sp,sp,-52
    f414:	dfc00c15 	stw	ra,48(sp)
    f418:	df000b15 	stw	fp,44(sp)
    f41c:	df000b04 	addi	fp,sp,44
    f420:	e13ffc15 	stw	r4,-16(fp)
    f424:	e17ffd15 	stw	r5,-12(fp)
    f428:	e1bffe15 	stw	r6,-8(fp)
    f42c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f430:	e0bffd17 	ldw	r2,-12(fp)
    f434:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f438:	00004906 	br	f560 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f43c:	e0bffc17 	ldw	r2,-16(fp)
    f440:	10800a17 	ldw	r2,40(r2)
    f444:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f448:	e0bffc17 	ldw	r2,-16(fp)
    f44c:	10800b17 	ldw	r2,44(r2)
    f450:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f454:	e0fff717 	ldw	r3,-36(fp)
    f458:	e0bff817 	ldw	r2,-32(fp)
    f45c:	18800536 	bltu	r3,r2,f474 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f460:	e0fff717 	ldw	r3,-36(fp)
    f464:	e0bff817 	ldw	r2,-32(fp)
    f468:	1885c83a 	sub	r2,r3,r2
    f46c:	e0bff615 	stw	r2,-40(fp)
    f470:	00000406 	br	f484 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f474:	00c20004 	movi	r3,2048
    f478:	e0bff817 	ldw	r2,-32(fp)
    f47c:	1885c83a 	sub	r2,r3,r2
    f480:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f484:	e0bff617 	ldw	r2,-40(fp)
    f488:	1000011e 	bne	r2,zero,f490 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
    f48c:	00001d06 	br	f504 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
    f490:	e0fffe17 	ldw	r3,-8(fp)
    f494:	e0bff617 	ldw	r2,-40(fp)
    f498:	1880022e 	bgeu	r3,r2,f4a4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    f49c:	e0bffe17 	ldw	r2,-8(fp)
    f4a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f4a4:	e0bff817 	ldw	r2,-32(fp)
    f4a8:	10800e04 	addi	r2,r2,56
    f4ac:	e0fffc17 	ldw	r3,-16(fp)
    f4b0:	1885883a 	add	r2,r3,r2
    f4b4:	e13ff517 	ldw	r4,-44(fp)
    f4b8:	100b883a 	mov	r5,r2
    f4bc:	e1bff617 	ldw	r6,-40(fp)
    f4c0:	00079000 	call	7900 <memcpy>
      ptr   += n;
    f4c4:	e0fff517 	ldw	r3,-44(fp)
    f4c8:	e0bff617 	ldw	r2,-40(fp)
    f4cc:	1885883a 	add	r2,r3,r2
    f4d0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f4d4:	e0fffe17 	ldw	r3,-8(fp)
    f4d8:	e0bff617 	ldw	r2,-40(fp)
    f4dc:	1885c83a 	sub	r2,r3,r2
    f4e0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f4e4:	e0fff817 	ldw	r3,-32(fp)
    f4e8:	e0bff617 	ldw	r2,-40(fp)
    f4ec:	1885883a 	add	r2,r3,r2
    f4f0:	10c1ffcc 	andi	r3,r2,2047
    f4f4:	e0bffc17 	ldw	r2,-16(fp)
    f4f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f4fc:	e0bffe17 	ldw	r2,-8(fp)
    f500:	00bfce16 	blt	zero,r2,f43c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    f504:	e0fff517 	ldw	r3,-44(fp)
    f508:	e0bffd17 	ldw	r2,-12(fp)
    f50c:	18800126 	beq	r3,r2,f514 <altera_avalon_jtag_uart_read+0x104>
      break;
    f510:	00001506 	br	f568 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f514:	e0bfff17 	ldw	r2,-4(fp)
    f518:	1090000c 	andi	r2,r2,16384
    f51c:	10000126 	beq	r2,zero,f524 <altera_avalon_jtag_uart_read+0x114>
      break;
    f520:	00001106 	br	f568 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f524:	0001883a 	nop
    f528:	e0bffc17 	ldw	r2,-16(fp)
    f52c:	10c00a17 	ldw	r3,40(r2)
    f530:	e0bff717 	ldw	r2,-36(fp)
    f534:	1880051e 	bne	r3,r2,f54c <altera_avalon_jtag_uart_read+0x13c>
    f538:	e0bffc17 	ldw	r2,-16(fp)
    f53c:	10c00917 	ldw	r3,36(r2)
    f540:	e0bffc17 	ldw	r2,-16(fp)
    f544:	10800117 	ldw	r2,4(r2)
    f548:	18bff736 	bltu	r3,r2,f528 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f54c:	e0bffc17 	ldw	r2,-16(fp)
    f550:	10c00a17 	ldw	r3,40(r2)
    f554:	e0bff717 	ldw	r2,-36(fp)
    f558:	1880011e 	bne	r3,r2,f560 <altera_avalon_jtag_uart_read+0x150>
      break;
    f55c:	00000206 	br	f568 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f560:	e0bffe17 	ldw	r2,-8(fp)
    f564:	00bfb516 	blt	zero,r2,f43c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f568:	e0fff517 	ldw	r3,-44(fp)
    f56c:	e0bffd17 	ldw	r2,-12(fp)
    f570:	18801826 	beq	r3,r2,f5d4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f574:	0005303a 	rdctl	r2,status
    f578:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f57c:	e0fffa17 	ldw	r3,-24(fp)
    f580:	00bfff84 	movi	r2,-2
    f584:	1884703a 	and	r2,r3,r2
    f588:	1001703a 	wrctl	status,r2
  
  return context;
    f58c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f590:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f594:	e0bffc17 	ldw	r2,-16(fp)
    f598:	10800817 	ldw	r2,32(r2)
    f59c:	10c00054 	ori	r3,r2,1
    f5a0:	e0bffc17 	ldw	r2,-16(fp)
    f5a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f5a8:	e0bffc17 	ldw	r2,-16(fp)
    f5ac:	10800017 	ldw	r2,0(r2)
    f5b0:	10800104 	addi	r2,r2,4
    f5b4:	1007883a 	mov	r3,r2
    f5b8:	e0bffc17 	ldw	r2,-16(fp)
    f5bc:	10800817 	ldw	r2,32(r2)
    f5c0:	18800035 	stwio	r2,0(r3)
    f5c4:	e0bff917 	ldw	r2,-28(fp)
    f5c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f5cc:	e0bffb17 	ldw	r2,-20(fp)
    f5d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f5d4:	e0fff517 	ldw	r3,-44(fp)
    f5d8:	e0bffd17 	ldw	r2,-12(fp)
    f5dc:	18800426 	beq	r3,r2,f5f0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
    f5e0:	e0fff517 	ldw	r3,-44(fp)
    f5e4:	e0bffd17 	ldw	r2,-12(fp)
    f5e8:	1885c83a 	sub	r2,r3,r2
    f5ec:	00000606 	br	f608 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
    f5f0:	e0bfff17 	ldw	r2,-4(fp)
    f5f4:	1090000c 	andi	r2,r2,16384
    f5f8:	10000226 	beq	r2,zero,f604 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
    f5fc:	00bffd44 	movi	r2,-11
    f600:	00000106 	br	f608 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
    f604:	00bffec4 	movi	r2,-5
}
    f608:	e037883a 	mov	sp,fp
    f60c:	dfc00117 	ldw	ra,4(sp)
    f610:	df000017 	ldw	fp,0(sp)
    f614:	dec00204 	addi	sp,sp,8
    f618:	f800283a 	ret

0000f61c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f61c:	defff304 	addi	sp,sp,-52
    f620:	dfc00c15 	stw	ra,48(sp)
    f624:	df000b15 	stw	fp,44(sp)
    f628:	df000b04 	addi	fp,sp,44
    f62c:	e13ffc15 	stw	r4,-16(fp)
    f630:	e17ffd15 	stw	r5,-12(fp)
    f634:	e1bffe15 	stw	r6,-8(fp)
    f638:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f63c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f640:	e0bffd17 	ldw	r2,-12(fp)
    f644:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f648:	00003806 	br	f72c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f64c:	e0bffc17 	ldw	r2,-16(fp)
    f650:	10800c17 	ldw	r2,48(r2)
    f654:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    f658:	e0bffc17 	ldw	r2,-16(fp)
    f65c:	10800d17 	ldw	r2,52(r2)
    f660:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    f664:	e0fff817 	ldw	r3,-32(fp)
    f668:	e0bff517 	ldw	r2,-44(fp)
    f66c:	1880062e 	bgeu	r3,r2,f688 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f670:	e0fff517 	ldw	r3,-44(fp)
    f674:	e0bff817 	ldw	r2,-32(fp)
    f678:	1885c83a 	sub	r2,r3,r2
    f67c:	10bfffc4 	addi	r2,r2,-1
    f680:	e0bff615 	stw	r2,-40(fp)
    f684:	00000b06 	br	f6b4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    f688:	e0bff517 	ldw	r2,-44(fp)
    f68c:	10000526 	beq	r2,zero,f6a4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f690:	00c20004 	movi	r3,2048
    f694:	e0bff817 	ldw	r2,-32(fp)
    f698:	1885c83a 	sub	r2,r3,r2
    f69c:	e0bff615 	stw	r2,-40(fp)
    f6a0:	00000406 	br	f6b4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f6a4:	00c1ffc4 	movi	r3,2047
    f6a8:	e0bff817 	ldw	r2,-32(fp)
    f6ac:	1885c83a 	sub	r2,r3,r2
    f6b0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f6b4:	e0bff617 	ldw	r2,-40(fp)
    f6b8:	1000011e 	bne	r2,zero,f6c0 <altera_avalon_jtag_uart_write+0xa4>
        break;
    f6bc:	00001d06 	br	f734 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
    f6c0:	e0fffe17 	ldw	r3,-8(fp)
    f6c4:	e0bff617 	ldw	r2,-40(fp)
    f6c8:	1880022e 	bgeu	r3,r2,f6d4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    f6cc:	e0bffe17 	ldw	r2,-8(fp)
    f6d0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f6d4:	e0bff817 	ldw	r2,-32(fp)
    f6d8:	10820e04 	addi	r2,r2,2104
    f6dc:	e0fffc17 	ldw	r3,-16(fp)
    f6e0:	1885883a 	add	r2,r3,r2
    f6e4:	1009883a 	mov	r4,r2
    f6e8:	e17ffd17 	ldw	r5,-12(fp)
    f6ec:	e1bff617 	ldw	r6,-40(fp)
    f6f0:	00079000 	call	7900 <memcpy>
      ptr   += n;
    f6f4:	e0fffd17 	ldw	r3,-12(fp)
    f6f8:	e0bff617 	ldw	r2,-40(fp)
    f6fc:	1885883a 	add	r2,r3,r2
    f700:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    f704:	e0fffe17 	ldw	r3,-8(fp)
    f708:	e0bff617 	ldw	r2,-40(fp)
    f70c:	1885c83a 	sub	r2,r3,r2
    f710:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f714:	e0fff817 	ldw	r3,-32(fp)
    f718:	e0bff617 	ldw	r2,-40(fp)
    f71c:	1885883a 	add	r2,r3,r2
    f720:	10c1ffcc 	andi	r3,r2,2047
    f724:	e0bffc17 	ldw	r2,-16(fp)
    f728:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f72c:	e0bffe17 	ldw	r2,-8(fp)
    f730:	00bfc616 	blt	zero,r2,f64c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f734:	0005303a 	rdctl	r2,status
    f738:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f73c:	e0fffa17 	ldw	r3,-24(fp)
    f740:	00bfff84 	movi	r2,-2
    f744:	1884703a 	and	r2,r3,r2
    f748:	1001703a 	wrctl	status,r2
  
  return context;
    f74c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f750:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f754:	e0bffc17 	ldw	r2,-16(fp)
    f758:	10800817 	ldw	r2,32(r2)
    f75c:	10c00094 	ori	r3,r2,2
    f760:	e0bffc17 	ldw	r2,-16(fp)
    f764:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f768:	e0bffc17 	ldw	r2,-16(fp)
    f76c:	10800017 	ldw	r2,0(r2)
    f770:	10800104 	addi	r2,r2,4
    f774:	1007883a 	mov	r3,r2
    f778:	e0bffc17 	ldw	r2,-16(fp)
    f77c:	10800817 	ldw	r2,32(r2)
    f780:	18800035 	stwio	r2,0(r3)
    f784:	e0bff917 	ldw	r2,-28(fp)
    f788:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f78c:	e0bffb17 	ldw	r2,-20(fp)
    f790:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f794:	e0bffe17 	ldw	r2,-8(fp)
    f798:	0080120e 	bge	zero,r2,f7e4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    f79c:	e0bfff17 	ldw	r2,-4(fp)
    f7a0:	1090000c 	andi	r2,r2,16384
    f7a4:	10000126 	beq	r2,zero,f7ac <altera_avalon_jtag_uart_write+0x190>
        break;
    f7a8:	00001006 	br	f7ec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f7ac:	0001883a 	nop
    f7b0:	e0bffc17 	ldw	r2,-16(fp)
    f7b4:	10c00d17 	ldw	r3,52(r2)
    f7b8:	e0bff517 	ldw	r2,-44(fp)
    f7bc:	1880051e 	bne	r3,r2,f7d4 <altera_avalon_jtag_uart_write+0x1b8>
    f7c0:	e0bffc17 	ldw	r2,-16(fp)
    f7c4:	10c00917 	ldw	r3,36(r2)
    f7c8:	e0bffc17 	ldw	r2,-16(fp)
    f7cc:	10800117 	ldw	r2,4(r2)
    f7d0:	18bff736 	bltu	r3,r2,f7b0 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f7d4:	e0bffc17 	ldw	r2,-16(fp)
    f7d8:	10800917 	ldw	r2,36(r2)
    f7dc:	10000126 	beq	r2,zero,f7e4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
    f7e0:	00000206 	br	f7ec <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
    f7e4:	e0bffe17 	ldw	r2,-8(fp)
    f7e8:	00bf9716 	blt	zero,r2,f648 <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f7ec:	e0fffd17 	ldw	r3,-12(fp)
    f7f0:	e0bff717 	ldw	r2,-36(fp)
    f7f4:	18800426 	beq	r3,r2,f808 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
    f7f8:	e0fffd17 	ldw	r3,-12(fp)
    f7fc:	e0bff717 	ldw	r2,-36(fp)
    f800:	1885c83a 	sub	r2,r3,r2
    f804:	00000606 	br	f820 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
    f808:	e0bfff17 	ldw	r2,-4(fp)
    f80c:	1090000c 	andi	r2,r2,16384
    f810:	10000226 	beq	r2,zero,f81c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
    f814:	00bffd44 	movi	r2,-11
    f818:	00000106 	br	f820 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f81c:	00bffec4 	movi	r2,-5
}
    f820:	e037883a 	mov	sp,fp
    f824:	dfc00117 	ldw	ra,4(sp)
    f828:	df000017 	ldw	fp,0(sp)
    f82c:	dec00204 	addi	sp,sp,8
    f830:	f800283a 	ret

0000f834 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f834:	defffa04 	addi	sp,sp,-24
    f838:	dfc00515 	stw	ra,20(sp)
    f83c:	df000415 	stw	fp,16(sp)
    f840:	df000404 	addi	fp,sp,16
    f844:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f848:	0007883a 	mov	r3,zero
    f84c:	e0bfff17 	ldw	r2,-4(fp)
    f850:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f854:	e0bfff17 	ldw	r2,-4(fp)
    f858:	10800104 	addi	r2,r2,4
    f85c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f860:	0005303a 	rdctl	r2,status
    f864:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f868:	e0fffd17 	ldw	r3,-12(fp)
    f86c:	00bfff84 	movi	r2,-2
    f870:	1884703a 	and	r2,r3,r2
    f874:	1001703a 	wrctl	status,r2
  
  return context;
    f878:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    f87c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    f880:	00104fc0 	call	104fc <alt_tick>
    f884:	e0bffc17 	ldw	r2,-16(fp)
    f888:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f88c:	e0bffe17 	ldw	r2,-8(fp)
    f890:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    f894:	e037883a 	mov	sp,fp
    f898:	dfc00117 	ldw	ra,4(sp)
    f89c:	df000017 	ldw	fp,0(sp)
    f8a0:	dec00204 	addi	sp,sp,8
    f8a4:	f800283a 	ret

0000f8a8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f8a8:	defff804 	addi	sp,sp,-32
    f8ac:	dfc00715 	stw	ra,28(sp)
    f8b0:	df000615 	stw	fp,24(sp)
    f8b4:	df000604 	addi	fp,sp,24
    f8b8:	e13ffc15 	stw	r4,-16(fp)
    f8bc:	e17ffd15 	stw	r5,-12(fp)
    f8c0:	e1bffe15 	stw	r6,-8(fp)
    f8c4:	e1ffff15 	stw	r7,-4(fp)
    f8c8:	e0bfff17 	ldw	r2,-4(fp)
    f8cc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f8d0:	00800074 	movhi	r2,1
    f8d4:	1092b004 	addi	r2,r2,19136
    f8d8:	10800017 	ldw	r2,0(r2)
    f8dc:	1000041e 	bne	r2,zero,f8f0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    f8e0:	00800074 	movhi	r2,1
    f8e4:	1092b004 	addi	r2,r2,19136
    f8e8:	e0fffb17 	ldw	r3,-20(fp)
    f8ec:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f8f0:	e0bffc17 	ldw	r2,-16(fp)
    f8f4:	10800104 	addi	r2,r2,4
    f8f8:	00c001c4 	movi	r3,7
    f8fc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    f900:	d8000015 	stw	zero,0(sp)
    f904:	e13ffd17 	ldw	r4,-12(fp)
    f908:	e17ffe17 	ldw	r5,-8(fp)
    f90c:	01800074 	movhi	r6,1
    f910:	31be0d04 	addi	r6,r6,-1996
    f914:	e1fffc17 	ldw	r7,-16(fp)
    f918:	000fde80 	call	fde8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    f91c:	e037883a 	mov	sp,fp
    f920:	dfc00117 	ldw	ra,4(sp)
    f924:	df000017 	ldw	fp,0(sp)
    f928:	dec00204 	addi	sp,sp,8
    f92c:	f800283a 	ret

0000f930 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    f930:	defff504 	addi	sp,sp,-44
    f934:	df000a15 	stw	fp,40(sp)
    f938:	df000a04 	addi	fp,sp,40
    f93c:	e13ffc15 	stw	r4,-16(fp)
    f940:	e17ffd15 	stw	r5,-12(fp)
    f944:	e1bffe15 	stw	r6,-8(fp)
    f948:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    f94c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f950:	00800074 	movhi	r2,1
    f954:	1092b004 	addi	r2,r2,19136
    f958:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    f95c:	10003f26 	beq	r2,zero,fa5c <alt_alarm_start+0x12c>
  {
    if (alarm)
    f960:	e0bffc17 	ldw	r2,-16(fp)
    f964:	10003b26 	beq	r2,zero,fa54 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    f968:	e0bffc17 	ldw	r2,-16(fp)
    f96c:	e0fffe17 	ldw	r3,-8(fp)
    f970:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    f974:	e0bffc17 	ldw	r2,-16(fp)
    f978:	e0ffff17 	ldw	r3,-4(fp)
    f97c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f980:	0005303a 	rdctl	r2,status
    f984:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f988:	e0fff817 	ldw	r3,-32(fp)
    f98c:	00bfff84 	movi	r2,-2
    f990:	1884703a 	and	r2,r3,r2
    f994:	1001703a 	wrctl	status,r2
  
  return context;
    f998:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    f99c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f9a0:	00800074 	movhi	r2,1
    f9a4:	1092b104 	addi	r2,r2,19140
    f9a8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    f9ac:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    f9b0:	e0fffd17 	ldw	r3,-12(fp)
    f9b4:	e0bff617 	ldw	r2,-40(fp)
    f9b8:	1885883a 	add	r2,r3,r2
    f9bc:	10c00044 	addi	r3,r2,1
    f9c0:	e0bffc17 	ldw	r2,-16(fp)
    f9c4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f9c8:	e0bffc17 	ldw	r2,-16(fp)
    f9cc:	10c00217 	ldw	r3,8(r2)
    f9d0:	e0bff617 	ldw	r2,-40(fp)
    f9d4:	1880042e 	bgeu	r3,r2,f9e8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    f9d8:	e0bffc17 	ldw	r2,-16(fp)
    f9dc:	00c00044 	movi	r3,1
    f9e0:	10c00405 	stb	r3,16(r2)
    f9e4:	00000206 	br	f9f0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    f9e8:	e0bffc17 	ldw	r2,-16(fp)
    f9ec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    f9f0:	e0fffc17 	ldw	r3,-16(fp)
    f9f4:	00800074 	movhi	r2,1
    f9f8:	108bdc04 	addi	r2,r2,12144
    f9fc:	e0bff915 	stw	r2,-28(fp)
    fa00:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fa04:	e0bffa17 	ldw	r2,-24(fp)
    fa08:	e0fff917 	ldw	r3,-28(fp)
    fa0c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fa10:	e0bff917 	ldw	r2,-28(fp)
    fa14:	10c00017 	ldw	r3,0(r2)
    fa18:	e0bffa17 	ldw	r2,-24(fp)
    fa1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fa20:	e0bff917 	ldw	r2,-28(fp)
    fa24:	10800017 	ldw	r2,0(r2)
    fa28:	e0fffa17 	ldw	r3,-24(fp)
    fa2c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fa30:	e0bff917 	ldw	r2,-28(fp)
    fa34:	e0fffa17 	ldw	r3,-24(fp)
    fa38:	10c00015 	stw	r3,0(r2)
    fa3c:	e0bff717 	ldw	r2,-36(fp)
    fa40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa44:	e0bffb17 	ldw	r2,-20(fp)
    fa48:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    fa4c:	0005883a 	mov	r2,zero
    fa50:	00000306 	br	fa60 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    fa54:	00bffa84 	movi	r2,-22
    fa58:	00000106 	br	fa60 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    fa5c:	00bfde84 	movi	r2,-134
  }
}
    fa60:	e037883a 	mov	sp,fp
    fa64:	df000017 	ldw	fp,0(sp)
    fa68:	dec00104 	addi	sp,sp,4
    fa6c:	f800283a 	ret

0000fa70 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    fa70:	defffa04 	addi	sp,sp,-24
    fa74:	dfc00515 	stw	ra,20(sp)
    fa78:	df000415 	stw	fp,16(sp)
    fa7c:	df000404 	addi	fp,sp,16
    fa80:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    fa84:	008000c4 	movi	r2,3
    fa88:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    fa8c:	e0fffd17 	ldw	r3,-12(fp)
    fa90:	008003f4 	movhi	r2,15
    fa94:	10909004 	addi	r2,r2,16960
    fa98:	1885383a 	mul	r2,r3,r2
    fa9c:	0100bef4 	movhi	r4,763
    faa0:	213c2004 	addi	r4,r4,-3968
    faa4:	100b883a 	mov	r5,r2
    faa8:	00020540 	call	2054 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    faac:	01200034 	movhi	r4,32768
    fab0:	213fffc4 	addi	r4,r4,-1
    fab4:	100b883a 	mov	r5,r2
    fab8:	00020540 	call	2054 <__udivsi3>
    fabc:	e13fff17 	ldw	r4,-4(fp)
    fac0:	100b883a 	mov	r5,r2
    fac4:	00020540 	call	2054 <__udivsi3>
    fac8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    facc:	e0bffe17 	ldw	r2,-8(fp)
    fad0:	10002a26 	beq	r2,zero,fb7c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    fad4:	e03ffc15 	stw	zero,-16(fp)
    fad8:	00001706 	br	fb38 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    fadc:	00a00034 	movhi	r2,32768
    fae0:	10bfffc4 	addi	r2,r2,-1
    fae4:	10bfffc4 	addi	r2,r2,-1
    fae8:	103ffe1e 	bne	r2,zero,fae4 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    faec:	e0fffd17 	ldw	r3,-12(fp)
    faf0:	008003f4 	movhi	r2,15
    faf4:	10909004 	addi	r2,r2,16960
    faf8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    fafc:	0100bef4 	movhi	r4,763
    fb00:	213c2004 	addi	r4,r4,-3968
    fb04:	100b883a 	mov	r5,r2
    fb08:	00020540 	call	2054 <__udivsi3>
    fb0c:	01200034 	movhi	r4,32768
    fb10:	213fffc4 	addi	r4,r4,-1
    fb14:	100b883a 	mov	r5,r2
    fb18:	00020540 	call	2054 <__udivsi3>
    fb1c:	1007883a 	mov	r3,r2
    fb20:	e0bfff17 	ldw	r2,-4(fp)
    fb24:	10c5c83a 	sub	r2,r2,r3
    fb28:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    fb2c:	e0bffc17 	ldw	r2,-16(fp)
    fb30:	10800044 	addi	r2,r2,1
    fb34:	e0bffc15 	stw	r2,-16(fp)
    fb38:	e0fffc17 	ldw	r3,-16(fp)
    fb3c:	e0bffe17 	ldw	r2,-8(fp)
    fb40:	18bfe616 	blt	r3,r2,fadc <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fb44:	e0fffd17 	ldw	r3,-12(fp)
    fb48:	008003f4 	movhi	r2,15
    fb4c:	10909004 	addi	r2,r2,16960
    fb50:	1885383a 	mul	r2,r3,r2
    fb54:	0100bef4 	movhi	r4,763
    fb58:	213c2004 	addi	r4,r4,-3968
    fb5c:	100b883a 	mov	r5,r2
    fb60:	00020540 	call	2054 <__udivsi3>
    fb64:	1007883a 	mov	r3,r2
    fb68:	e0bfff17 	ldw	r2,-4(fp)
    fb6c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fb70:	10bfffc4 	addi	r2,r2,-1
    fb74:	103ffe1e 	bne	r2,zero,fb70 <alt_busy_sleep+0x100>
    fb78:	00000d06 	br	fbb0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    fb7c:	e0fffd17 	ldw	r3,-12(fp)
    fb80:	008003f4 	movhi	r2,15
    fb84:	10909004 	addi	r2,r2,16960
    fb88:	1885383a 	mul	r2,r3,r2
    fb8c:	0100bef4 	movhi	r4,763
    fb90:	213c2004 	addi	r4,r4,-3968
    fb94:	100b883a 	mov	r5,r2
    fb98:	00020540 	call	2054 <__udivsi3>
    fb9c:	1007883a 	mov	r3,r2
    fba0:	e0bfff17 	ldw	r2,-4(fp)
    fba4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    fba8:	10bfffc4 	addi	r2,r2,-1
    fbac:	00bffe16 	blt	zero,r2,fba8 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    fbb0:	0005883a 	mov	r2,zero
}
    fbb4:	e037883a 	mov	sp,fp
    fbb8:	dfc00117 	ldw	ra,4(sp)
    fbbc:	df000017 	ldw	fp,0(sp)
    fbc0:	dec00204 	addi	sp,sp,8
    fbc4:	f800283a 	ret

0000fbc8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    fbc8:	defffe04 	addi	sp,sp,-8
    fbcc:	df000115 	stw	fp,4(sp)
    fbd0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    fbd4:	e03fff15 	stw	zero,-4(fp)
    fbd8:	00000506 	br	fbf0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    fbdc:	e0bfff17 	ldw	r2,-4(fp)
    fbe0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    fbe4:	e0bfff17 	ldw	r2,-4(fp)
    fbe8:	10800804 	addi	r2,r2,32
    fbec:	e0bfff15 	stw	r2,-4(fp)
    fbf0:	e0bfff17 	ldw	r2,-4(fp)
    fbf4:	10840030 	cmpltui	r2,r2,4096
    fbf8:	103ff81e 	bne	r2,zero,fbdc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    fbfc:	e037883a 	mov	sp,fp
    fc00:	df000017 	ldw	fp,0(sp)
    fc04:	dec00104 	addi	sp,sp,4
    fc08:	f800283a 	ret

0000fc0c <alt_get_errno>:
    fc0c:	defffe04 	addi	sp,sp,-8
    fc10:	dfc00115 	stw	ra,4(sp)
    fc14:	df000015 	stw	fp,0(sp)
    fc18:	d839883a 	mov	fp,sp
    fc1c:	00800074 	movhi	r2,1
    fc20:	108bd904 	addi	r2,r2,12132
    fc24:	10800017 	ldw	r2,0(r2)
    fc28:	10000526 	beq	r2,zero,fc40 <alt_get_errno+0x34>
    fc2c:	00800074 	movhi	r2,1
    fc30:	108bd904 	addi	r2,r2,12132
    fc34:	10800017 	ldw	r2,0(r2)
    fc38:	103ee83a 	callr	r2
    fc3c:	00000206 	br	fc48 <alt_get_errno+0x3c>
    fc40:	00800074 	movhi	r2,1
    fc44:	1092a604 	addi	r2,r2,19096
    fc48:	e037883a 	mov	sp,fp
    fc4c:	dfc00117 	ldw	ra,4(sp)
    fc50:	df000017 	ldw	fp,0(sp)
    fc54:	dec00204 	addi	sp,sp,8
    fc58:	f800283a 	ret

0000fc5c <alt_dev_llist_insert>:
    fc5c:	defffa04 	addi	sp,sp,-24
    fc60:	dfc00515 	stw	ra,20(sp)
    fc64:	df000415 	stw	fp,16(sp)
    fc68:	df000404 	addi	fp,sp,16
    fc6c:	e13ffe15 	stw	r4,-8(fp)
    fc70:	e17fff15 	stw	r5,-4(fp)
    fc74:	e0bffe17 	ldw	r2,-8(fp)
    fc78:	10000326 	beq	r2,zero,fc88 <alt_dev_llist_insert+0x2c>
    fc7c:	e0bffe17 	ldw	r2,-8(fp)
    fc80:	10800217 	ldw	r2,8(r2)
    fc84:	1000061e 	bne	r2,zero,fca0 <alt_dev_llist_insert+0x44>
    fc88:	000fc0c0 	call	fc0c <alt_get_errno>
    fc8c:	1007883a 	mov	r3,r2
    fc90:	00800584 	movi	r2,22
    fc94:	18800015 	stw	r2,0(r3)
    fc98:	00bffa84 	movi	r2,-22
    fc9c:	00001306 	br	fcec <alt_dev_llist_insert+0x90>
    fca0:	e0bffe17 	ldw	r2,-8(fp)
    fca4:	e0ffff17 	ldw	r3,-4(fp)
    fca8:	e0fffc15 	stw	r3,-16(fp)
    fcac:	e0bffd15 	stw	r2,-12(fp)
    fcb0:	e0bffd17 	ldw	r2,-12(fp)
    fcb4:	e0fffc17 	ldw	r3,-16(fp)
    fcb8:	10c00115 	stw	r3,4(r2)
    fcbc:	e0bffc17 	ldw	r2,-16(fp)
    fcc0:	10c00017 	ldw	r3,0(r2)
    fcc4:	e0bffd17 	ldw	r2,-12(fp)
    fcc8:	10c00015 	stw	r3,0(r2)
    fccc:	e0bffc17 	ldw	r2,-16(fp)
    fcd0:	10800017 	ldw	r2,0(r2)
    fcd4:	e0fffd17 	ldw	r3,-12(fp)
    fcd8:	10c00115 	stw	r3,4(r2)
    fcdc:	e0bffc17 	ldw	r2,-16(fp)
    fce0:	e0fffd17 	ldw	r3,-12(fp)
    fce4:	10c00015 	stw	r3,0(r2)
    fce8:	0005883a 	mov	r2,zero
    fcec:	e037883a 	mov	sp,fp
    fcf0:	dfc00117 	ldw	ra,4(sp)
    fcf4:	df000017 	ldw	fp,0(sp)
    fcf8:	dec00204 	addi	sp,sp,8
    fcfc:	f800283a 	ret

0000fd00 <_do_ctors>:
    fd00:	defffd04 	addi	sp,sp,-12
    fd04:	dfc00215 	stw	ra,8(sp)
    fd08:	df000115 	stw	fp,4(sp)
    fd0c:	df000104 	addi	fp,sp,4
    fd10:	00800074 	movhi	r2,1
    fd14:	10835004 	addi	r2,r2,3392
    fd18:	e0bfff15 	stw	r2,-4(fp)
    fd1c:	00000606 	br	fd38 <_do_ctors+0x38>
    fd20:	e0bfff17 	ldw	r2,-4(fp)
    fd24:	10800017 	ldw	r2,0(r2)
    fd28:	103ee83a 	callr	r2
    fd2c:	e0bfff17 	ldw	r2,-4(fp)
    fd30:	10bfff04 	addi	r2,r2,-4
    fd34:	e0bfff15 	stw	r2,-4(fp)
    fd38:	e0ffff17 	ldw	r3,-4(fp)
    fd3c:	00800074 	movhi	r2,1
    fd40:	10835104 	addi	r2,r2,3396
    fd44:	18bff62e 	bgeu	r3,r2,fd20 <_do_ctors+0x20>
    fd48:	e037883a 	mov	sp,fp
    fd4c:	dfc00117 	ldw	ra,4(sp)
    fd50:	df000017 	ldw	fp,0(sp)
    fd54:	dec00204 	addi	sp,sp,8
    fd58:	f800283a 	ret

0000fd5c <_do_dtors>:
    fd5c:	defffd04 	addi	sp,sp,-12
    fd60:	dfc00215 	stw	ra,8(sp)
    fd64:	df000115 	stw	fp,4(sp)
    fd68:	df000104 	addi	fp,sp,4
    fd6c:	00800074 	movhi	r2,1
    fd70:	10835004 	addi	r2,r2,3392
    fd74:	e0bfff15 	stw	r2,-4(fp)
    fd78:	00000606 	br	fd94 <_do_dtors+0x38>
    fd7c:	e0bfff17 	ldw	r2,-4(fp)
    fd80:	10800017 	ldw	r2,0(r2)
    fd84:	103ee83a 	callr	r2
    fd88:	e0bfff17 	ldw	r2,-4(fp)
    fd8c:	10bfff04 	addi	r2,r2,-4
    fd90:	e0bfff15 	stw	r2,-4(fp)
    fd94:	e0ffff17 	ldw	r3,-4(fp)
    fd98:	00800074 	movhi	r2,1
    fd9c:	10835104 	addi	r2,r2,3396
    fda0:	18bff62e 	bgeu	r3,r2,fd7c <_do_dtors+0x20>
    fda4:	e037883a 	mov	sp,fp
    fda8:	dfc00117 	ldw	ra,4(sp)
    fdac:	df000017 	ldw	fp,0(sp)
    fdb0:	dec00204 	addi	sp,sp,8
    fdb4:	f800283a 	ret

0000fdb8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    fdb8:	defffe04 	addi	sp,sp,-8
    fdbc:	dfc00115 	stw	ra,4(sp)
    fdc0:	df000015 	stw	fp,0(sp)
    fdc4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    fdc8:	0009883a 	mov	r4,zero
    fdcc:	01440004 	movi	r5,4096
    fdd0:	00108780 	call	10878 <alt_icache_flush>
#endif
}
    fdd4:	e037883a 	mov	sp,fp
    fdd8:	dfc00117 	ldw	ra,4(sp)
    fddc:	df000017 	ldw	fp,0(sp)
    fde0:	dec00204 	addi	sp,sp,8
    fde4:	f800283a 	ret

0000fde8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    fde8:	defff904 	addi	sp,sp,-28
    fdec:	dfc00615 	stw	ra,24(sp)
    fdf0:	df000515 	stw	fp,20(sp)
    fdf4:	df000504 	addi	fp,sp,20
    fdf8:	e13ffc15 	stw	r4,-16(fp)
    fdfc:	e17ffd15 	stw	r5,-12(fp)
    fe00:	e1bffe15 	stw	r6,-8(fp)
    fe04:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    fe08:	e0800217 	ldw	r2,8(fp)
    fe0c:	d8800015 	stw	r2,0(sp)
    fe10:	e13ffc17 	ldw	r4,-16(fp)
    fe14:	e17ffd17 	ldw	r5,-12(fp)
    fe18:	e1bffe17 	ldw	r6,-8(fp)
    fe1c:	e1ffff17 	ldw	r7,-4(fp)
    fe20:	000ffc80 	call	ffc8 <alt_iic_isr_register>
}  
    fe24:	e037883a 	mov	sp,fp
    fe28:	dfc00117 	ldw	ra,4(sp)
    fe2c:	df000017 	ldw	fp,0(sp)
    fe30:	dec00204 	addi	sp,sp,8
    fe34:	f800283a 	ret

0000fe38 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    fe38:	defff904 	addi	sp,sp,-28
    fe3c:	df000615 	stw	fp,24(sp)
    fe40:	df000604 	addi	fp,sp,24
    fe44:	e13ffe15 	stw	r4,-8(fp)
    fe48:	e17fff15 	stw	r5,-4(fp)
    fe4c:	e0bfff17 	ldw	r2,-4(fp)
    fe50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe54:	0005303a 	rdctl	r2,status
    fe58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe5c:	e0fffb17 	ldw	r3,-20(fp)
    fe60:	00bfff84 	movi	r2,-2
    fe64:	1884703a 	and	r2,r3,r2
    fe68:	1001703a 	wrctl	status,r2
  
  return context;
    fe6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    fe70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    fe74:	e0bffa17 	ldw	r2,-24(fp)
    fe78:	00c00044 	movi	r3,1
    fe7c:	1884983a 	sll	r2,r3,r2
    fe80:	1007883a 	mov	r3,r2
    fe84:	00800074 	movhi	r2,1
    fe88:	1092af04 	addi	r2,r2,19132
    fe8c:	10800017 	ldw	r2,0(r2)
    fe90:	1886b03a 	or	r3,r3,r2
    fe94:	00800074 	movhi	r2,1
    fe98:	1092af04 	addi	r2,r2,19132
    fe9c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    fea0:	00800074 	movhi	r2,1
    fea4:	1092af04 	addi	r2,r2,19132
    fea8:	10800017 	ldw	r2,0(r2)
    feac:	100170fa 	wrctl	ienable,r2
    feb0:	e0bffc17 	ldw	r2,-16(fp)
    feb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    feb8:	e0bffd17 	ldw	r2,-12(fp)
    febc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    fec0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    fec4:	0001883a 	nop
}
    fec8:	e037883a 	mov	sp,fp
    fecc:	df000017 	ldw	fp,0(sp)
    fed0:	dec00104 	addi	sp,sp,4
    fed4:	f800283a 	ret

0000fed8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    fed8:	defff904 	addi	sp,sp,-28
    fedc:	df000615 	stw	fp,24(sp)
    fee0:	df000604 	addi	fp,sp,24
    fee4:	e13ffe15 	stw	r4,-8(fp)
    fee8:	e17fff15 	stw	r5,-4(fp)
    feec:	e0bfff17 	ldw	r2,-4(fp)
    fef0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fef4:	0005303a 	rdctl	r2,status
    fef8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fefc:	e0fffb17 	ldw	r3,-20(fp)
    ff00:	00bfff84 	movi	r2,-2
    ff04:	1884703a 	and	r2,r3,r2
    ff08:	1001703a 	wrctl	status,r2
  
  return context;
    ff0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ff10:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    ff14:	e0bffa17 	ldw	r2,-24(fp)
    ff18:	00c00044 	movi	r3,1
    ff1c:	1884983a 	sll	r2,r3,r2
    ff20:	0084303a 	nor	r2,zero,r2
    ff24:	1007883a 	mov	r3,r2
    ff28:	00800074 	movhi	r2,1
    ff2c:	1092af04 	addi	r2,r2,19132
    ff30:	10800017 	ldw	r2,0(r2)
    ff34:	1886703a 	and	r3,r3,r2
    ff38:	00800074 	movhi	r2,1
    ff3c:	1092af04 	addi	r2,r2,19132
    ff40:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ff44:	00800074 	movhi	r2,1
    ff48:	1092af04 	addi	r2,r2,19132
    ff4c:	10800017 	ldw	r2,0(r2)
    ff50:	100170fa 	wrctl	ienable,r2
    ff54:	e0bffc17 	ldw	r2,-16(fp)
    ff58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff5c:	e0bffd17 	ldw	r2,-12(fp)
    ff60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ff64:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    ff68:	0001883a 	nop
}
    ff6c:	e037883a 	mov	sp,fp
    ff70:	df000017 	ldw	fp,0(sp)
    ff74:	dec00104 	addi	sp,sp,4
    ff78:	f800283a 	ret

0000ff7c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    ff7c:	defffc04 	addi	sp,sp,-16
    ff80:	df000315 	stw	fp,12(sp)
    ff84:	df000304 	addi	fp,sp,12
    ff88:	e13ffe15 	stw	r4,-8(fp)
    ff8c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    ff90:	000530fa 	rdctl	r2,ienable
    ff94:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    ff98:	e0bfff17 	ldw	r2,-4(fp)
    ff9c:	00c00044 	movi	r3,1
    ffa0:	1884983a 	sll	r2,r3,r2
    ffa4:	1007883a 	mov	r3,r2
    ffa8:	e0bffd17 	ldw	r2,-12(fp)
    ffac:	1884703a 	and	r2,r3,r2
    ffb0:	1004c03a 	cmpne	r2,r2,zero
    ffb4:	10803fcc 	andi	r2,r2,255
}
    ffb8:	e037883a 	mov	sp,fp
    ffbc:	df000017 	ldw	fp,0(sp)
    ffc0:	dec00104 	addi	sp,sp,4
    ffc4:	f800283a 	ret

0000ffc8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ffc8:	defff504 	addi	sp,sp,-44
    ffcc:	dfc00a15 	stw	ra,40(sp)
    ffd0:	df000915 	stw	fp,36(sp)
    ffd4:	df000904 	addi	fp,sp,36
    ffd8:	e13ffc15 	stw	r4,-16(fp)
    ffdc:	e17ffd15 	stw	r5,-12(fp)
    ffe0:	e1bffe15 	stw	r6,-8(fp)
    ffe4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    ffe8:	00bffa84 	movi	r2,-22
    ffec:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    fff0:	e0bffd17 	ldw	r2,-12(fp)
    fff4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    fff8:	e0bff817 	ldw	r2,-32(fp)
    fffc:	10800808 	cmpgei	r2,r2,32
   10000:	1000271e 	bne	r2,zero,100a0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10004:	0005303a 	rdctl	r2,status
   10008:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1000c:	e0fffa17 	ldw	r3,-24(fp)
   10010:	00bfff84 	movi	r2,-2
   10014:	1884703a 	and	r2,r3,r2
   10018:	1001703a 	wrctl	status,r2
  
  return context;
   1001c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10020:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   10024:	00800074 	movhi	r2,1
   10028:	1092bd04 	addi	r2,r2,19188
   1002c:	e0fff817 	ldw	r3,-32(fp)
   10030:	180690fa 	slli	r3,r3,3
   10034:	10c5883a 	add	r2,r2,r3
   10038:	e0fffe17 	ldw	r3,-8(fp)
   1003c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10040:	00800074 	movhi	r2,1
   10044:	1092bd04 	addi	r2,r2,19188
   10048:	e0fff817 	ldw	r3,-32(fp)
   1004c:	180690fa 	slli	r3,r3,3
   10050:	18c00104 	addi	r3,r3,4
   10054:	10c5883a 	add	r2,r2,r3
   10058:	e0ffff17 	ldw	r3,-4(fp)
   1005c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10060:	e0bffe17 	ldw	r2,-8(fp)
   10064:	10000526 	beq	r2,zero,1007c <alt_iic_isr_register+0xb4>
   10068:	e0bff817 	ldw	r2,-32(fp)
   1006c:	e13ffc17 	ldw	r4,-16(fp)
   10070:	100b883a 	mov	r5,r2
   10074:	000fe380 	call	fe38 <alt_ic_irq_enable>
   10078:	00000406 	br	1008c <alt_iic_isr_register+0xc4>
   1007c:	e0bff817 	ldw	r2,-32(fp)
   10080:	e13ffc17 	ldw	r4,-16(fp)
   10084:	100b883a 	mov	r5,r2
   10088:	000fed80 	call	fed8 <alt_ic_irq_disable>
   1008c:	e0bff715 	stw	r2,-36(fp)
   10090:	e0bff917 	ldw	r2,-28(fp)
   10094:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10098:	e0bffb17 	ldw	r2,-20(fp)
   1009c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   100a0:	e0bff717 	ldw	r2,-36(fp)
}
   100a4:	e037883a 	mov	sp,fp
   100a8:	dfc00117 	ldw	ra,4(sp)
   100ac:	df000017 	ldw	fp,0(sp)
   100b0:	dec00204 	addi	sp,sp,8
   100b4:	f800283a 	ret

000100b8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   100b8:	defff904 	addi	sp,sp,-28
   100bc:	dfc00615 	stw	ra,24(sp)
   100c0:	df000515 	stw	fp,20(sp)
   100c4:	df000504 	addi	fp,sp,20
   100c8:	e13ffc15 	stw	r4,-16(fp)
   100cc:	e17ffd15 	stw	r5,-12(fp)
   100d0:	e1bffe15 	stw	r6,-8(fp)
   100d4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   100d8:	e13ffd17 	ldw	r4,-12(fp)
   100dc:	e17ffe17 	ldw	r5,-8(fp)
   100e0:	e1bfff17 	ldw	r6,-4(fp)
   100e4:	001030c0 	call	1030c <open>
   100e8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   100ec:	e0bffb17 	ldw	r2,-20(fp)
   100f0:	10001c16 	blt	r2,zero,10164 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   100f4:	00800074 	movhi	r2,1
   100f8:	10875604 	addi	r2,r2,7512
   100fc:	e0fffb17 	ldw	r3,-20(fp)
   10100:	18c00324 	muli	r3,r3,12
   10104:	10c5883a 	add	r2,r2,r3
   10108:	10c00017 	ldw	r3,0(r2)
   1010c:	e0bffc17 	ldw	r2,-16(fp)
   10110:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10114:	00800074 	movhi	r2,1
   10118:	10875604 	addi	r2,r2,7512
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	18c00324 	muli	r3,r3,12
   10124:	18c00104 	addi	r3,r3,4
   10128:	10c5883a 	add	r2,r2,r3
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10138:	00800074 	movhi	r2,1
   1013c:	10875604 	addi	r2,r2,7512
   10140:	e0fffb17 	ldw	r3,-20(fp)
   10144:	18c00324 	muli	r3,r3,12
   10148:	18c00204 	addi	r3,r3,8
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	e0bffc17 	ldw	r2,-16(fp)
   10158:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1015c:	e13ffb17 	ldw	r4,-20(fp)
   10160:	000ea6c0 	call	ea6c <alt_release_fd>
  }
} 
   10164:	e037883a 	mov	sp,fp
   10168:	dfc00117 	ldw	ra,4(sp)
   1016c:	df000017 	ldw	fp,0(sp)
   10170:	dec00204 	addi	sp,sp,8
   10174:	f800283a 	ret

00010178 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10178:	defffb04 	addi	sp,sp,-20
   1017c:	dfc00415 	stw	ra,16(sp)
   10180:	df000315 	stw	fp,12(sp)
   10184:	df000304 	addi	fp,sp,12
   10188:	e13ffd15 	stw	r4,-12(fp)
   1018c:	e17ffe15 	stw	r5,-8(fp)
   10190:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10194:	01000074 	movhi	r4,1
   10198:	21075904 	addi	r4,r4,7524
   1019c:	e17ffd17 	ldw	r5,-12(fp)
   101a0:	01800044 	movi	r6,1
   101a4:	01c07fc4 	movi	r7,511
   101a8:	00100b80 	call	100b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   101ac:	01000074 	movhi	r4,1
   101b0:	21075604 	addi	r4,r4,7512
   101b4:	e17ffe17 	ldw	r5,-8(fp)
   101b8:	000d883a 	mov	r6,zero
   101bc:	01c07fc4 	movi	r7,511
   101c0:	00100b80 	call	100b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   101c4:	01000074 	movhi	r4,1
   101c8:	21075c04 	addi	r4,r4,7536
   101cc:	e17fff17 	ldw	r5,-4(fp)
   101d0:	01800044 	movi	r6,1
   101d4:	01c07fc4 	movi	r7,511
   101d8:	00100b80 	call	100b8 <alt_open_fd>
}  
   101dc:	e037883a 	mov	sp,fp
   101e0:	dfc00117 	ldw	ra,4(sp)
   101e4:	df000017 	ldw	fp,0(sp)
   101e8:	dec00204 	addi	sp,sp,8
   101ec:	f800283a 	ret

000101f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   101f0:	defffe04 	addi	sp,sp,-8
   101f4:	dfc00115 	stw	ra,4(sp)
   101f8:	df000015 	stw	fp,0(sp)
   101fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10200:	00800074 	movhi	r2,1
   10204:	108bd904 	addi	r2,r2,12132
   10208:	10800017 	ldw	r2,0(r2)
   1020c:	10000526 	beq	r2,zero,10224 <alt_get_errno+0x34>
   10210:	00800074 	movhi	r2,1
   10214:	108bd904 	addi	r2,r2,12132
   10218:	10800017 	ldw	r2,0(r2)
   1021c:	103ee83a 	callr	r2
   10220:	00000206 	br	1022c <alt_get_errno+0x3c>
   10224:	00800074 	movhi	r2,1
   10228:	1092a604 	addi	r2,r2,19096
}
   1022c:	e037883a 	mov	sp,fp
   10230:	dfc00117 	ldw	ra,4(sp)
   10234:	df000017 	ldw	fp,0(sp)
   10238:	dec00204 	addi	sp,sp,8
   1023c:	f800283a 	ret

00010240 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10240:	defffd04 	addi	sp,sp,-12
   10244:	df000215 	stw	fp,8(sp)
   10248:	df000204 	addi	fp,sp,8
   1024c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10250:	e0bfff17 	ldw	r2,-4(fp)
   10254:	10800217 	ldw	r2,8(r2)
   10258:	10d00034 	orhi	r3,r2,16384
   1025c:	e0bfff17 	ldw	r2,-4(fp)
   10260:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10264:	e03ffe15 	stw	zero,-8(fp)
   10268:	00001d06 	br	102e0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1026c:	00800074 	movhi	r2,1
   10270:	10875604 	addi	r2,r2,7512
   10274:	e0fffe17 	ldw	r3,-8(fp)
   10278:	18c00324 	muli	r3,r3,12
   1027c:	10c5883a 	add	r2,r2,r3
   10280:	10c00017 	ldw	r3,0(r2)
   10284:	e0bfff17 	ldw	r2,-4(fp)
   10288:	10800017 	ldw	r2,0(r2)
   1028c:	1880111e 	bne	r3,r2,102d4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10290:	00800074 	movhi	r2,1
   10294:	10875604 	addi	r2,r2,7512
   10298:	e0fffe17 	ldw	r3,-8(fp)
   1029c:	18c00324 	muli	r3,r3,12
   102a0:	18c00204 	addi	r3,r3,8
   102a4:	10c5883a 	add	r2,r2,r3
   102a8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   102ac:	1000090e 	bge	r2,zero,102d4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   102b0:	e0bffe17 	ldw	r2,-8(fp)
   102b4:	10c00324 	muli	r3,r2,12
   102b8:	00800074 	movhi	r2,1
   102bc:	10875604 	addi	r2,r2,7512
   102c0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   102c4:	e0bfff17 	ldw	r2,-4(fp)
   102c8:	18800226 	beq	r3,r2,102d4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   102cc:	00bffcc4 	movi	r2,-13
   102d0:	00000a06 	br	102fc <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   102d4:	e0bffe17 	ldw	r2,-8(fp)
   102d8:	10800044 	addi	r2,r2,1
   102dc:	e0bffe15 	stw	r2,-8(fp)
   102e0:	00800074 	movhi	r2,1
   102e4:	108bd804 	addi	r2,r2,12128
   102e8:	10800017 	ldw	r2,0(r2)
   102ec:	1007883a 	mov	r3,r2
   102f0:	e0bffe17 	ldw	r2,-8(fp)
   102f4:	18bfdd2e 	bgeu	r3,r2,1026c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   102f8:	0005883a 	mov	r2,zero
}
   102fc:	e037883a 	mov	sp,fp
   10300:	df000017 	ldw	fp,0(sp)
   10304:	dec00104 	addi	sp,sp,4
   10308:	f800283a 	ret

0001030c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1030c:	defff604 	addi	sp,sp,-40
   10310:	dfc00915 	stw	ra,36(sp)
   10314:	df000815 	stw	fp,32(sp)
   10318:	df000804 	addi	fp,sp,32
   1031c:	e13ffd15 	stw	r4,-12(fp)
   10320:	e17ffe15 	stw	r5,-8(fp)
   10324:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10328:	00bfffc4 	movi	r2,-1
   1032c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10330:	00bffb44 	movi	r2,-19
   10334:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10338:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1033c:	e13ffd17 	ldw	r4,-12(fp)
   10340:	01400074 	movhi	r5,1
   10344:	294bd604 	addi	r5,r5,12120
   10348:	00106200 	call	10620 <alt_find_dev>
   1034c:	e0bff815 	stw	r2,-32(fp)
   10350:	e0bff817 	ldw	r2,-32(fp)
   10354:	1000051e 	bne	r2,zero,1036c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10358:	e13ffd17 	ldw	r4,-12(fp)
   1035c:	00106b00 	call	106b0 <alt_find_file>
   10360:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10364:	00800044 	movi	r2,1
   10368:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1036c:	e0bff817 	ldw	r2,-32(fp)
   10370:	10002926 	beq	r2,zero,10418 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10374:	e13ff817 	ldw	r4,-32(fp)
   10378:	00107c40 	call	107c4 <alt_get_fd>
   1037c:	e0bff915 	stw	r2,-28(fp)
   10380:	e0bff917 	ldw	r2,-28(fp)
   10384:	1000030e 	bge	r2,zero,10394 <open+0x88>
    {
      status = index;
   10388:	e0bff917 	ldw	r2,-28(fp)
   1038c:	e0bffa15 	stw	r2,-24(fp)
   10390:	00002306 	br	10420 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   10394:	e0bff917 	ldw	r2,-28(fp)
   10398:	10c00324 	muli	r3,r2,12
   1039c:	00800074 	movhi	r2,1
   103a0:	10875604 	addi	r2,r2,7512
   103a4:	1885883a 	add	r2,r3,r2
   103a8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   103ac:	e0fffe17 	ldw	r3,-8(fp)
   103b0:	00900034 	movhi	r2,16384
   103b4:	10bfffc4 	addi	r2,r2,-1
   103b8:	1886703a 	and	r3,r3,r2
   103bc:	e0bffc17 	ldw	r2,-16(fp)
   103c0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   103c4:	e0bffb17 	ldw	r2,-20(fp)
   103c8:	1000051e 	bne	r2,zero,103e0 <open+0xd4>
   103cc:	e13ffc17 	ldw	r4,-16(fp)
   103d0:	00102400 	call	10240 <alt_file_locked>
   103d4:	e0bffa15 	stw	r2,-24(fp)
   103d8:	e0bffa17 	ldw	r2,-24(fp)
   103dc:	10001016 	blt	r2,zero,10420 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   103e0:	e0bff817 	ldw	r2,-32(fp)
   103e4:	10800317 	ldw	r2,12(r2)
   103e8:	10000826 	beq	r2,zero,1040c <open+0x100>
   103ec:	e0bff817 	ldw	r2,-32(fp)
   103f0:	10800317 	ldw	r2,12(r2)
   103f4:	e13ffc17 	ldw	r4,-16(fp)
   103f8:	e17ffd17 	ldw	r5,-12(fp)
   103fc:	e1bffe17 	ldw	r6,-8(fp)
   10400:	e1ffff17 	ldw	r7,-4(fp)
   10404:	103ee83a 	callr	r2
   10408:	00000106 	br	10410 <open+0x104>
   1040c:	0005883a 	mov	r2,zero
   10410:	e0bffa15 	stw	r2,-24(fp)
   10414:	00000206 	br	10420 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10418:	00bffb44 	movi	r2,-19
   1041c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10420:	e0bffa17 	ldw	r2,-24(fp)
   10424:	1000090e 	bge	r2,zero,1044c <open+0x140>
  {
    alt_release_fd (index);  
   10428:	e13ff917 	ldw	r4,-28(fp)
   1042c:	000ea6c0 	call	ea6c <alt_release_fd>
    ALT_ERRNO = -status;
   10430:	00101f00 	call	101f0 <alt_get_errno>
   10434:	1007883a 	mov	r3,r2
   10438:	e0bffa17 	ldw	r2,-24(fp)
   1043c:	0085c83a 	sub	r2,zero,r2
   10440:	18800015 	stw	r2,0(r3)
    return -1;
   10444:	00bfffc4 	movi	r2,-1
   10448:	00000106 	br	10450 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1044c:	e0bff917 	ldw	r2,-28(fp)
}
   10450:	e037883a 	mov	sp,fp
   10454:	dfc00117 	ldw	ra,4(sp)
   10458:	df000017 	ldw	fp,0(sp)
   1045c:	dec00204 	addi	sp,sp,8
   10460:	f800283a 	ret

00010464 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10464:	defffa04 	addi	sp,sp,-24
   10468:	df000515 	stw	fp,20(sp)
   1046c:	df000504 	addi	fp,sp,20
   10470:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10474:	0005303a 	rdctl	r2,status
   10478:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1047c:	e0fffc17 	ldw	r3,-16(fp)
   10480:	00bfff84 	movi	r2,-2
   10484:	1884703a 	and	r2,r3,r2
   10488:	1001703a 	wrctl	status,r2
  
  return context;
   1048c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10490:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10494:	e0bfff17 	ldw	r2,-4(fp)
   10498:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1049c:	e0bffd17 	ldw	r2,-12(fp)
   104a0:	10800017 	ldw	r2,0(r2)
   104a4:	e0fffd17 	ldw	r3,-12(fp)
   104a8:	18c00117 	ldw	r3,4(r3)
   104ac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   104b0:	e0bffd17 	ldw	r2,-12(fp)
   104b4:	10800117 	ldw	r2,4(r2)
   104b8:	e0fffd17 	ldw	r3,-12(fp)
   104bc:	18c00017 	ldw	r3,0(r3)
   104c0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   104c4:	e0bffd17 	ldw	r2,-12(fp)
   104c8:	e0fffd17 	ldw	r3,-12(fp)
   104cc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   104d0:	e0bffd17 	ldw	r2,-12(fp)
   104d4:	e0fffd17 	ldw	r3,-12(fp)
   104d8:	10c00015 	stw	r3,0(r2)
   104dc:	e0bffb17 	ldw	r2,-20(fp)
   104e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   104e4:	e0bffe17 	ldw	r2,-8(fp)
   104e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   104ec:	e037883a 	mov	sp,fp
   104f0:	df000017 	ldw	fp,0(sp)
   104f4:	dec00104 	addi	sp,sp,4
   104f8:	f800283a 	ret

000104fc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   104fc:	defffb04 	addi	sp,sp,-20
   10500:	dfc00415 	stw	ra,16(sp)
   10504:	df000315 	stw	fp,12(sp)
   10508:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1050c:	d0a00e17 	ldw	r2,-32712(gp)
   10510:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10514:	d0a6e317 	ldw	r2,-25716(gp)
   10518:	10800044 	addi	r2,r2,1
   1051c:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10520:	00002e06 	br	105dc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10524:	e0bffd17 	ldw	r2,-12(fp)
   10528:	10800017 	ldw	r2,0(r2)
   1052c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10530:	e0bffd17 	ldw	r2,-12(fp)
   10534:	10800403 	ldbu	r2,16(r2)
   10538:	10803fcc 	andi	r2,r2,255
   1053c:	10000426 	beq	r2,zero,10550 <alt_tick+0x54>
   10540:	d0a6e317 	ldw	r2,-25716(gp)
   10544:	1000021e 	bne	r2,zero,10550 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10548:	e0bffd17 	ldw	r2,-12(fp)
   1054c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10550:	e0bffd17 	ldw	r2,-12(fp)
   10554:	10800217 	ldw	r2,8(r2)
   10558:	d0e6e317 	ldw	r3,-25716(gp)
   1055c:	18801d36 	bltu	r3,r2,105d4 <alt_tick+0xd8>
   10560:	e0bffd17 	ldw	r2,-12(fp)
   10564:	10800403 	ldbu	r2,16(r2)
   10568:	10803fcc 	andi	r2,r2,255
   1056c:	1000191e 	bne	r2,zero,105d4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10570:	e0bffd17 	ldw	r2,-12(fp)
   10574:	10800317 	ldw	r2,12(r2)
   10578:	e0fffd17 	ldw	r3,-12(fp)
   1057c:	18c00517 	ldw	r3,20(r3)
   10580:	1809883a 	mov	r4,r3
   10584:	103ee83a 	callr	r2
   10588:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1058c:	e0bfff17 	ldw	r2,-4(fp)
   10590:	1000031e 	bne	r2,zero,105a0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10594:	e13ffd17 	ldw	r4,-12(fp)
   10598:	00104640 	call	10464 <alt_alarm_stop>
   1059c:	00000d06 	br	105d4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   105a0:	e0bffd17 	ldw	r2,-12(fp)
   105a4:	10c00217 	ldw	r3,8(r2)
   105a8:	e0bfff17 	ldw	r2,-4(fp)
   105ac:	1887883a 	add	r3,r3,r2
   105b0:	e0bffd17 	ldw	r2,-12(fp)
   105b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   105b8:	e0bffd17 	ldw	r2,-12(fp)
   105bc:	10c00217 	ldw	r3,8(r2)
   105c0:	d0a6e317 	ldw	r2,-25716(gp)
   105c4:	1880032e 	bgeu	r3,r2,105d4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   105c8:	e0bffd17 	ldw	r2,-12(fp)
   105cc:	00c00044 	movi	r3,1
   105d0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   105d4:	e0bffe17 	ldw	r2,-8(fp)
   105d8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   105dc:	e0fffd17 	ldw	r3,-12(fp)
   105e0:	d0a00e04 	addi	r2,gp,-32712
   105e4:	18bfcf1e 	bne	r3,r2,10524 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   105e8:	0001883a 	nop
}
   105ec:	e037883a 	mov	sp,fp
   105f0:	dfc00117 	ldw	ra,4(sp)
   105f4:	df000017 	ldw	fp,0(sp)
   105f8:	dec00204 	addi	sp,sp,8
   105fc:	f800283a 	ret

00010600 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10600:	deffff04 	addi	sp,sp,-4
   10604:	df000015 	stw	fp,0(sp)
   10608:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1060c:	000170fa 	wrctl	ienable,zero
}
   10610:	e037883a 	mov	sp,fp
   10614:	df000017 	ldw	fp,0(sp)
   10618:	dec00104 	addi	sp,sp,4
   1061c:	f800283a 	ret

00010620 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10620:	defffa04 	addi	sp,sp,-24
   10624:	dfc00515 	stw	ra,20(sp)
   10628:	df000415 	stw	fp,16(sp)
   1062c:	df000404 	addi	fp,sp,16
   10630:	e13ffe15 	stw	r4,-8(fp)
   10634:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10638:	e0bfff17 	ldw	r2,-4(fp)
   1063c:	10800017 	ldw	r2,0(r2)
   10640:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10644:	e13ffe17 	ldw	r4,-8(fp)
   10648:	00029ac0 	call	29ac <strlen>
   1064c:	10800044 	addi	r2,r2,1
   10650:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10654:	00000d06 	br	1068c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10658:	e0bffc17 	ldw	r2,-16(fp)
   1065c:	10c00217 	ldw	r3,8(r2)
   10660:	e0bffd17 	ldw	r2,-12(fp)
   10664:	1809883a 	mov	r4,r3
   10668:	e17ffe17 	ldw	r5,-8(fp)
   1066c:	100d883a 	mov	r6,r2
   10670:	00109ec0 	call	109ec <memcmp>
   10674:	1000021e 	bne	r2,zero,10680 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10678:	e0bffc17 	ldw	r2,-16(fp)
   1067c:	00000706 	br	1069c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10680:	e0bffc17 	ldw	r2,-16(fp)
   10684:	10800017 	ldw	r2,0(r2)
   10688:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1068c:	e0fffc17 	ldw	r3,-16(fp)
   10690:	e0bfff17 	ldw	r2,-4(fp)
   10694:	18bff01e 	bne	r3,r2,10658 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10698:	0005883a 	mov	r2,zero
}
   1069c:	e037883a 	mov	sp,fp
   106a0:	dfc00117 	ldw	ra,4(sp)
   106a4:	df000017 	ldw	fp,0(sp)
   106a8:	dec00204 	addi	sp,sp,8
   106ac:	f800283a 	ret

000106b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   106b0:	defffb04 	addi	sp,sp,-20
   106b4:	dfc00415 	stw	ra,16(sp)
   106b8:	df000315 	stw	fp,12(sp)
   106bc:	df000304 	addi	fp,sp,12
   106c0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   106c4:	00800074 	movhi	r2,1
   106c8:	108bd404 	addi	r2,r2,12112
   106cc:	10800017 	ldw	r2,0(r2)
   106d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   106d4:	00003106 	br	1079c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   106d8:	e0bffd17 	ldw	r2,-12(fp)
   106dc:	10800217 	ldw	r2,8(r2)
   106e0:	1009883a 	mov	r4,r2
   106e4:	00029ac0 	call	29ac <strlen>
   106e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   106ec:	e0bffd17 	ldw	r2,-12(fp)
   106f0:	10c00217 	ldw	r3,8(r2)
   106f4:	e0bffe17 	ldw	r2,-8(fp)
   106f8:	10bfffc4 	addi	r2,r2,-1
   106fc:	1885883a 	add	r2,r3,r2
   10700:	10800003 	ldbu	r2,0(r2)
   10704:	10803fcc 	andi	r2,r2,255
   10708:	1080201c 	xori	r2,r2,128
   1070c:	10bfe004 	addi	r2,r2,-128
   10710:	10800bd8 	cmpnei	r2,r2,47
   10714:	1000031e 	bne	r2,zero,10724 <alt_find_file+0x74>
    {
      len -= 1;
   10718:	e0bffe17 	ldw	r2,-8(fp)
   1071c:	10bfffc4 	addi	r2,r2,-1
   10720:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10724:	e0bffe17 	ldw	r2,-8(fp)
   10728:	e0ffff17 	ldw	r3,-4(fp)
   1072c:	1885883a 	add	r2,r3,r2
   10730:	10800003 	ldbu	r2,0(r2)
   10734:	10803fcc 	andi	r2,r2,255
   10738:	1080201c 	xori	r2,r2,128
   1073c:	10bfe004 	addi	r2,r2,-128
   10740:	10800be0 	cmpeqi	r2,r2,47
   10744:	1000081e 	bne	r2,zero,10768 <alt_find_file+0xb8>
   10748:	e0bffe17 	ldw	r2,-8(fp)
   1074c:	e0ffff17 	ldw	r3,-4(fp)
   10750:	1885883a 	add	r2,r3,r2
   10754:	10800003 	ldbu	r2,0(r2)
   10758:	10803fcc 	andi	r2,r2,255
   1075c:	1080201c 	xori	r2,r2,128
   10760:	10bfe004 	addi	r2,r2,-128
   10764:	10000a1e 	bne	r2,zero,10790 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   10768:	e0bffd17 	ldw	r2,-12(fp)
   1076c:	10c00217 	ldw	r3,8(r2)
   10770:	e0bffe17 	ldw	r2,-8(fp)
   10774:	1809883a 	mov	r4,r3
   10778:	e17fff17 	ldw	r5,-4(fp)
   1077c:	100d883a 	mov	r6,r2
   10780:	00109ec0 	call	109ec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10784:	1000021e 	bne	r2,zero,10790 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10788:	e0bffd17 	ldw	r2,-12(fp)
   1078c:	00000806 	br	107b0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   10790:	e0bffd17 	ldw	r2,-12(fp)
   10794:	10800017 	ldw	r2,0(r2)
   10798:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1079c:	e0fffd17 	ldw	r3,-12(fp)
   107a0:	00800074 	movhi	r2,1
   107a4:	108bd404 	addi	r2,r2,12112
   107a8:	18bfcb1e 	bne	r3,r2,106d8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   107ac:	0005883a 	mov	r2,zero
}
   107b0:	e037883a 	mov	sp,fp
   107b4:	dfc00117 	ldw	ra,4(sp)
   107b8:	df000017 	ldw	fp,0(sp)
   107bc:	dec00204 	addi	sp,sp,8
   107c0:	f800283a 	ret

000107c4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   107c4:	defffc04 	addi	sp,sp,-16
   107c8:	df000315 	stw	fp,12(sp)
   107cc:	df000304 	addi	fp,sp,12
   107d0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   107d4:	00bffa04 	movi	r2,-24
   107d8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   107dc:	e03ffd15 	stw	zero,-12(fp)
   107e0:	00001d06 	br	10858 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   107e4:	00800074 	movhi	r2,1
   107e8:	10875604 	addi	r2,r2,7512
   107ec:	e0fffd17 	ldw	r3,-12(fp)
   107f0:	18c00324 	muli	r3,r3,12
   107f4:	10c5883a 	add	r2,r2,r3
   107f8:	10800017 	ldw	r2,0(r2)
   107fc:	1000131e 	bne	r2,zero,1084c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   10800:	00800074 	movhi	r2,1
   10804:	10875604 	addi	r2,r2,7512
   10808:	e0fffd17 	ldw	r3,-12(fp)
   1080c:	18c00324 	muli	r3,r3,12
   10810:	10c5883a 	add	r2,r2,r3
   10814:	e0ffff17 	ldw	r3,-4(fp)
   10818:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1081c:	00800074 	movhi	r2,1
   10820:	108bd804 	addi	r2,r2,12128
   10824:	10c00017 	ldw	r3,0(r2)
   10828:	e0bffd17 	ldw	r2,-12(fp)
   1082c:	1880040e 	bge	r3,r2,10840 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   10830:	00800074 	movhi	r2,1
   10834:	108bd804 	addi	r2,r2,12128
   10838:	e0fffd17 	ldw	r3,-12(fp)
   1083c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   10840:	e0bffd17 	ldw	r2,-12(fp)
   10844:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10848:	00000606 	br	10864 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1084c:	e0bffd17 	ldw	r2,-12(fp)
   10850:	10800044 	addi	r2,r2,1
   10854:	e0bffd15 	stw	r2,-12(fp)
   10858:	e0bffd17 	ldw	r2,-12(fp)
   1085c:	10800810 	cmplti	r2,r2,32
   10860:	103fe01e 	bne	r2,zero,107e4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10864:	e0bffe17 	ldw	r2,-8(fp)
}
   10868:	e037883a 	mov	sp,fp
   1086c:	df000017 	ldw	fp,0(sp)
   10870:	dec00104 	addi	sp,sp,4
   10874:	f800283a 	ret

00010878 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10878:	defffb04 	addi	sp,sp,-20
   1087c:	df000415 	stw	fp,16(sp)
   10880:	df000404 	addi	fp,sp,16
   10884:	e13ffe15 	stw	r4,-8(fp)
   10888:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1088c:	e0bfff17 	ldw	r2,-4(fp)
   10890:	10840070 	cmpltui	r2,r2,4097
   10894:	1000021e 	bne	r2,zero,108a0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10898:	00840004 	movi	r2,4096
   1089c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   108a0:	e0fffe17 	ldw	r3,-8(fp)
   108a4:	e0bfff17 	ldw	r2,-4(fp)
   108a8:	1885883a 	add	r2,r3,r2
   108ac:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   108b0:	e0bffe17 	ldw	r2,-8(fp)
   108b4:	e0bffc15 	stw	r2,-16(fp)
   108b8:	00000506 	br	108d0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   108bc:	e0bffc17 	ldw	r2,-16(fp)
   108c0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   108c4:	e0bffc17 	ldw	r2,-16(fp)
   108c8:	10800804 	addi	r2,r2,32
   108cc:	e0bffc15 	stw	r2,-16(fp)
   108d0:	e0fffc17 	ldw	r3,-16(fp)
   108d4:	e0bffd17 	ldw	r2,-12(fp)
   108d8:	18bff836 	bltu	r3,r2,108bc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   108dc:	e0bffe17 	ldw	r2,-8(fp)
   108e0:	108007cc 	andi	r2,r2,31
   108e4:	10000226 	beq	r2,zero,108f0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   108e8:	e0bffc17 	ldw	r2,-16(fp)
   108ec:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   108f0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   108f4:	e037883a 	mov	sp,fp
   108f8:	df000017 	ldw	fp,0(sp)
   108fc:	dec00104 	addi	sp,sp,4
   10900:	f800283a 	ret

00010904 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10904:	defffe04 	addi	sp,sp,-8
   10908:	df000115 	stw	fp,4(sp)
   1090c:	df000104 	addi	fp,sp,4
   10910:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10914:	e0bfff17 	ldw	r2,-4(fp)
   10918:	10bffe84 	addi	r2,r2,-6
   1091c:	10c00428 	cmpgeui	r3,r2,16
   10920:	18001a1e 	bne	r3,zero,1098c <alt_exception_cause_generated_bad_addr+0x88>
   10924:	100690ba 	slli	r3,r2,2
   10928:	00800074 	movhi	r2,1
   1092c:	10824f04 	addi	r2,r2,2364
   10930:	1885883a 	add	r2,r3,r2
   10934:	10800017 	ldw	r2,0(r2)
   10938:	1000683a 	jmp	r2
   1093c:	0001097c 	xorhi	zero,zero,1061
   10940:	0001097c 	xorhi	zero,zero,1061
   10944:	0001098c 	andi	zero,zero,1062
   10948:	0001098c 	andi	zero,zero,1062
   1094c:	0001098c 	andi	zero,zero,1062
   10950:	0001097c 	xorhi	zero,zero,1061
   10954:	00010984 	movi	zero,1062
   10958:	0001098c 	andi	zero,zero,1062
   1095c:	0001097c 	xorhi	zero,zero,1061
   10960:	0001097c 	xorhi	zero,zero,1061
   10964:	0001098c 	andi	zero,zero,1062
   10968:	0001097c 	xorhi	zero,zero,1061
   1096c:	00010984 	movi	zero,1062
   10970:	0001098c 	andi	zero,zero,1062
   10974:	0001098c 	andi	zero,zero,1062
   10978:	0001097c 	xorhi	zero,zero,1061
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1097c:	00800044 	movi	r2,1
   10980:	00000306 	br	10990 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10984:	0005883a 	mov	r2,zero
   10988:	00000106 	br	10990 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1098c:	0005883a 	mov	r2,zero
  }
}
   10990:	e037883a 	mov	sp,fp
   10994:	df000017 	ldw	fp,0(sp)
   10998:	dec00104 	addi	sp,sp,4
   1099c:	f800283a 	ret

000109a0 <atexit>:
   109a0:	200b883a 	mov	r5,r4
   109a4:	000d883a 	mov	r6,zero
   109a8:	0009883a 	mov	r4,zero
   109ac:	000f883a 	mov	r7,zero
   109b0:	0010a681 	jmpi	10a68 <__register_exitproc>

000109b4 <exit>:
   109b4:	defffe04 	addi	sp,sp,-8
   109b8:	000b883a 	mov	r5,zero
   109bc:	dc000015 	stw	r16,0(sp)
   109c0:	dfc00115 	stw	ra,4(sp)
   109c4:	2021883a 	mov	r16,r4
   109c8:	0010b7c0 	call	10b7c <__call_exitprocs>
   109cc:	00800074 	movhi	r2,1
   109d0:	108bd004 	addi	r2,r2,12096
   109d4:	11000017 	ldw	r4,0(r2)
   109d8:	20800f17 	ldw	r2,60(r4)
   109dc:	10000126 	beq	r2,zero,109e4 <exit+0x30>
   109e0:	103ee83a 	callr	r2
   109e4:	8009883a 	mov	r4,r16
   109e8:	0010d100 	call	10d10 <_exit>

000109ec <memcmp>:
   109ec:	01c000c4 	movi	r7,3
   109f0:	3980192e 	bgeu	r7,r6,10a58 <memcmp+0x6c>
   109f4:	2144b03a 	or	r2,r4,r5
   109f8:	11c4703a 	and	r2,r2,r7
   109fc:	10000f26 	beq	r2,zero,10a3c <memcmp+0x50>
   10a00:	20800003 	ldbu	r2,0(r4)
   10a04:	28c00003 	ldbu	r3,0(r5)
   10a08:	10c0151e 	bne	r2,r3,10a60 <memcmp+0x74>
   10a0c:	31bfff84 	addi	r6,r6,-2
   10a10:	01ffffc4 	movi	r7,-1
   10a14:	00000406 	br	10a28 <memcmp+0x3c>
   10a18:	20800003 	ldbu	r2,0(r4)
   10a1c:	28c00003 	ldbu	r3,0(r5)
   10a20:	31bfffc4 	addi	r6,r6,-1
   10a24:	10c00e1e 	bne	r2,r3,10a60 <memcmp+0x74>
   10a28:	21000044 	addi	r4,r4,1
   10a2c:	29400044 	addi	r5,r5,1
   10a30:	31fff91e 	bne	r6,r7,10a18 <memcmp+0x2c>
   10a34:	0005883a 	mov	r2,zero
   10a38:	f800283a 	ret
   10a3c:	20c00017 	ldw	r3,0(r4)
   10a40:	28800017 	ldw	r2,0(r5)
   10a44:	1880041e 	bne	r3,r2,10a58 <memcmp+0x6c>
   10a48:	31bfff04 	addi	r6,r6,-4
   10a4c:	21000104 	addi	r4,r4,4
   10a50:	29400104 	addi	r5,r5,4
   10a54:	39bff936 	bltu	r7,r6,10a3c <memcmp+0x50>
   10a58:	303fe91e 	bne	r6,zero,10a00 <memcmp+0x14>
   10a5c:	003ff506 	br	10a34 <memcmp+0x48>
   10a60:	10c5c83a 	sub	r2,r2,r3
   10a64:	f800283a 	ret

00010a68 <__register_exitproc>:
   10a68:	00800074 	movhi	r2,1
   10a6c:	defffa04 	addi	sp,sp,-24
   10a70:	108bd004 	addi	r2,r2,12096
   10a74:	dc000315 	stw	r16,12(sp)
   10a78:	14000017 	ldw	r16,0(r2)
   10a7c:	dc400415 	stw	r17,16(sp)
   10a80:	dfc00515 	stw	ra,20(sp)
   10a84:	80805217 	ldw	r2,328(r16)
   10a88:	2023883a 	mov	r17,r4
   10a8c:	10003626 	beq	r2,zero,10b68 <__register_exitproc+0x100>
   10a90:	10c00117 	ldw	r3,4(r2)
   10a94:	010007c4 	movi	r4,31
   10a98:	20c00e16 	blt	r4,r3,10ad4 <__register_exitproc+0x6c>
   10a9c:	1a400044 	addi	r9,r3,1
   10aa0:	8800211e 	bne	r17,zero,10b28 <__register_exitproc+0xc0>
   10aa4:	18c00084 	addi	r3,r3,2
   10aa8:	18c7883a 	add	r3,r3,r3
   10aac:	18c7883a 	add	r3,r3,r3
   10ab0:	12400115 	stw	r9,4(r2)
   10ab4:	10c7883a 	add	r3,r2,r3
   10ab8:	19400015 	stw	r5,0(r3)
   10abc:	0005883a 	mov	r2,zero
   10ac0:	dfc00517 	ldw	ra,20(sp)
   10ac4:	dc400417 	ldw	r17,16(sp)
   10ac8:	dc000317 	ldw	r16,12(sp)
   10acc:	dec00604 	addi	sp,sp,24
   10ad0:	f800283a 	ret
   10ad4:	00800034 	movhi	r2,0
   10ad8:	10881904 	addi	r2,r2,8292
   10adc:	10002526 	beq	r2,zero,10b74 <__register_exitproc+0x10c>
   10ae0:	01006404 	movi	r4,400
   10ae4:	d9400015 	stw	r5,0(sp)
   10ae8:	d9800115 	stw	r6,4(sp)
   10aec:	d9c00215 	stw	r7,8(sp)
   10af0:	00020640 	call	2064 <malloc>
   10af4:	d9400017 	ldw	r5,0(sp)
   10af8:	d9800117 	ldw	r6,4(sp)
   10afc:	d9c00217 	ldw	r7,8(sp)
   10b00:	10001c26 	beq	r2,zero,10b74 <__register_exitproc+0x10c>
   10b04:	80c05217 	ldw	r3,328(r16)
   10b08:	10000115 	stw	zero,4(r2)
   10b0c:	02400044 	movi	r9,1
   10b10:	10c00015 	stw	r3,0(r2)
   10b14:	80805215 	stw	r2,328(r16)
   10b18:	10006215 	stw	zero,392(r2)
   10b1c:	10006315 	stw	zero,396(r2)
   10b20:	0007883a 	mov	r3,zero
   10b24:	883fdf26 	beq	r17,zero,10aa4 <__register_exitproc+0x3c>
   10b28:	18d1883a 	add	r8,r3,r3
   10b2c:	4211883a 	add	r8,r8,r8
   10b30:	1211883a 	add	r8,r2,r8
   10b34:	41802215 	stw	r6,136(r8)
   10b38:	01000044 	movi	r4,1
   10b3c:	11806217 	ldw	r6,392(r2)
   10b40:	20c8983a 	sll	r4,r4,r3
   10b44:	310cb03a 	or	r6,r6,r4
   10b48:	11806215 	stw	r6,392(r2)
   10b4c:	41c04215 	stw	r7,264(r8)
   10b50:	01800084 	movi	r6,2
   10b54:	89bfd31e 	bne	r17,r6,10aa4 <__register_exitproc+0x3c>
   10b58:	11806317 	ldw	r6,396(r2)
   10b5c:	3108b03a 	or	r4,r6,r4
   10b60:	11006315 	stw	r4,396(r2)
   10b64:	003fcf06 	br	10aa4 <__register_exitproc+0x3c>
   10b68:	80805304 	addi	r2,r16,332
   10b6c:	80805215 	stw	r2,328(r16)
   10b70:	003fc706 	br	10a90 <__register_exitproc+0x28>
   10b74:	00bfffc4 	movi	r2,-1
   10b78:	003fd106 	br	10ac0 <__register_exitproc+0x58>

00010b7c <__call_exitprocs>:
   10b7c:	00800074 	movhi	r2,1
   10b80:	108bd004 	addi	r2,r2,12096
   10b84:	10800017 	ldw	r2,0(r2)
   10b88:	defff404 	addi	sp,sp,-48
   10b8c:	dd800815 	stw	r22,32(sp)
   10b90:	d8800015 	stw	r2,0(sp)
   10b94:	10805204 	addi	r2,r2,328
   10b98:	dd000615 	stw	r20,24(sp)
   10b9c:	dc800415 	stw	r18,16(sp)
   10ba0:	dfc00b15 	stw	ra,44(sp)
   10ba4:	df000a15 	stw	fp,40(sp)
   10ba8:	ddc00915 	stw	r23,36(sp)
   10bac:	dd400715 	stw	r21,28(sp)
   10bb0:	dcc00515 	stw	r19,20(sp)
   10bb4:	dc400315 	stw	r17,12(sp)
   10bb8:	dc000215 	stw	r16,8(sp)
   10bbc:	2025883a 	mov	r18,r4
   10bc0:	2829883a 	mov	r20,r5
   10bc4:	d8800115 	stw	r2,4(sp)
   10bc8:	05bfffc4 	movi	r22,-1
   10bcc:	d8800017 	ldw	r2,0(sp)
   10bd0:	14c05217 	ldw	r19,328(r2)
   10bd4:	98001d26 	beq	r19,zero,10c4c <__call_exitprocs+0xd0>
   10bd8:	dd400117 	ldw	r21,4(sp)
   10bdc:	98800117 	ldw	r2,4(r19)
   10be0:	173fffc4 	addi	fp,r2,-1
   10be4:	e0000d16 	blt	fp,zero,10c1c <__call_exitprocs+0xa0>
   10be8:	14000044 	addi	r16,r2,1
   10bec:	8421883a 	add	r16,r16,r16
   10bf0:	8421883a 	add	r16,r16,r16
   10bf4:	84402004 	addi	r17,r16,128
   10bf8:	9c63883a 	add	r17,r19,r17
   10bfc:	9c21883a 	add	r16,r19,r16
   10c00:	a0001e26 	beq	r20,zero,10c7c <__call_exitprocs+0x100>
   10c04:	80804017 	ldw	r2,256(r16)
   10c08:	15001c26 	beq	r2,r20,10c7c <__call_exitprocs+0x100>
   10c0c:	e73fffc4 	addi	fp,fp,-1
   10c10:	843fff04 	addi	r16,r16,-4
   10c14:	8c7fff04 	addi	r17,r17,-4
   10c18:	e5bff91e 	bne	fp,r22,10c00 <__call_exitprocs+0x84>
   10c1c:	00800034 	movhi	r2,0
   10c20:	10881e04 	addi	r2,r2,8312
   10c24:	10000926 	beq	r2,zero,10c4c <__call_exitprocs+0xd0>
   10c28:	98800117 	ldw	r2,4(r19)
   10c2c:	1000311e 	bne	r2,zero,10cf4 <__call_exitprocs+0x178>
   10c30:	98800017 	ldw	r2,0(r19)
   10c34:	10003426 	beq	r2,zero,10d08 <__call_exitprocs+0x18c>
   10c38:	9809883a 	mov	r4,r19
   10c3c:	a8800015 	stw	r2,0(r21)
   10c40:	00020780 	call	2078 <free>
   10c44:	acc00017 	ldw	r19,0(r21)
   10c48:	983fe41e 	bne	r19,zero,10bdc <__call_exitprocs+0x60>
   10c4c:	dfc00b17 	ldw	ra,44(sp)
   10c50:	df000a17 	ldw	fp,40(sp)
   10c54:	ddc00917 	ldw	r23,36(sp)
   10c58:	dd800817 	ldw	r22,32(sp)
   10c5c:	dd400717 	ldw	r21,28(sp)
   10c60:	dd000617 	ldw	r20,24(sp)
   10c64:	dcc00517 	ldw	r19,20(sp)
   10c68:	dc800417 	ldw	r18,16(sp)
   10c6c:	dc400317 	ldw	r17,12(sp)
   10c70:	dc000217 	ldw	r16,8(sp)
   10c74:	dec00c04 	addi	sp,sp,48
   10c78:	f800283a 	ret
   10c7c:	98800117 	ldw	r2,4(r19)
   10c80:	80c00017 	ldw	r3,0(r16)
   10c84:	10bfffc4 	addi	r2,r2,-1
   10c88:	17001526 	beq	r2,fp,10ce0 <__call_exitprocs+0x164>
   10c8c:	80000015 	stw	zero,0(r16)
   10c90:	183fde26 	beq	r3,zero,10c0c <__call_exitprocs+0x90>
   10c94:	00800044 	movi	r2,1
   10c98:	1708983a 	sll	r4,r2,fp
   10c9c:	98806217 	ldw	r2,392(r19)
   10ca0:	9dc00117 	ldw	r23,4(r19)
   10ca4:	2084703a 	and	r2,r4,r2
   10ca8:	1000061e 	bne	r2,zero,10cc4 <__call_exitprocs+0x148>
   10cac:	183ee83a 	callr	r3
   10cb0:	98800117 	ldw	r2,4(r19)
   10cb4:	15ffc51e 	bne	r2,r23,10bcc <__call_exitprocs+0x50>
   10cb8:	a8800017 	ldw	r2,0(r21)
   10cbc:	14ffd326 	beq	r2,r19,10c0c <__call_exitprocs+0x90>
   10cc0:	003fc206 	br	10bcc <__call_exitprocs+0x50>
   10cc4:	98806317 	ldw	r2,396(r19)
   10cc8:	2084703a 	and	r2,r4,r2
   10ccc:	1000061e 	bne	r2,zero,10ce8 <__call_exitprocs+0x16c>
   10cd0:	89400017 	ldw	r5,0(r17)
   10cd4:	9009883a 	mov	r4,r18
   10cd8:	183ee83a 	callr	r3
   10cdc:	003ff406 	br	10cb0 <__call_exitprocs+0x134>
   10ce0:	9f000115 	stw	fp,4(r19)
   10ce4:	003fea06 	br	10c90 <__call_exitprocs+0x114>
   10ce8:	89000017 	ldw	r4,0(r17)
   10cec:	183ee83a 	callr	r3
   10cf0:	003fef06 	br	10cb0 <__call_exitprocs+0x134>
   10cf4:	98800017 	ldw	r2,0(r19)
   10cf8:	982b883a 	mov	r21,r19
   10cfc:	1027883a 	mov	r19,r2
   10d00:	983fb61e 	bne	r19,zero,10bdc <__call_exitprocs+0x60>
   10d04:	003fd106 	br	10c4c <__call_exitprocs+0xd0>
   10d08:	0005883a 	mov	r2,zero
   10d0c:	003ffa06 	br	10cf8 <__call_exitprocs+0x17c>

00010d10 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10d10:	defffd04 	addi	sp,sp,-12
   10d14:	df000215 	stw	fp,8(sp)
   10d18:	df000204 	addi	fp,sp,8
   10d1c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10d20:	0001883a 	nop
   10d24:	e0bfff17 	ldw	r2,-4(fp)
   10d28:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10d2c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10d30:	10000226 	beq	r2,zero,10d3c <_exit+0x2c>
    ALT_SIM_FAIL();
   10d34:	002af070 	cmpltui	zero,zero,43969
   10d38:	00000106 	br	10d40 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10d3c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10d40:	003fff06 	br	10d40 <_exit+0x30>
